amends ".../pkl-concourse-pipeline/src/Pipeline.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"

local class PayJsLibraryPipeline {
  name: String
  source_branch: String
}

local payJsLibraries: Listing<PayJsLibraryPipeline> = new {
  new {
    name = "commons"
    source_branch = "master"
  }
  new {
    name = "metrics"
    source_branch = "main"
  }
}

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/pay-js.pkl", "master")
  shared_resources.payCiGitHubResource
  for (jsLibrary in payJsLibraries) {
    (shared_resources.payGithubResourceWithBranch("js-\(jsLibrary.name)-git-release", "pay-js-\(jsLibrary.name)", jsLibrary.source_branch)) {
      source {
        ["commit_filter"] = new Mapping<String, Listing<String>> {
          ["exclude"] = new Listing {
            "\\[automated release\\]"
          }
        }
      }
    }
  }
}

groups = new {
  for (jsLibrary in payJsLibraries) {
    new {
      name = "js-\(jsLibrary.name)"
      jobs = new { "version-and-push-\(jsLibrary.name)" }
    }
  }
  pipeline_self_update.payPipelineSelfUpdateGroup
}

jobs = new {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/pay-js.pkl")
  for (jsLibrary in payJsLibraries) {
    new {
      name = "version-and-push-\(jsLibrary.name)"
      plan = new {
        new InParallelStep {
          in_parallel = new Listing<Step> {
            new GetStep {
              get = "js-\(jsLibrary.name)-git-release"
              trigger = true
            }
            new GetStep { get = "pay-ci" }
          }
        }
        new TaskStep {
          task = "npm-version-and-create-pr"
          file = "pay-ci/ci/tasks/npm-version-and-create-pr.yml"
          input_mapping = new {
            ["src"] = "js-\(jsLibrary.name)-git-release"
          }
          params = new {
            ["BASE"] = "\(jsLibrary.source_branch)"
            ["REPO"] = "alphagov/pay-js-\(jsLibrary.name)"
            ["GITHUB_TOKEN"] = "((github-access-token))"
          }
        }
      }
    }
  }
}
