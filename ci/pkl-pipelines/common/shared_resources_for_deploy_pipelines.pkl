import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"
import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/TaskConfig.pkl"

import "./shared_resources_for_multi_arch_builds.pkl"

class PayApplication {
  name: String
  is_a_java_or_node_app: Boolean = false
  has_db: Boolean = false
  rds_identifier_suffix: Int = 0
  override_app_to_deploy: String?
  override_ecr_repo: String?
  override_github_repo: String?
  use_app_specific_deploy_task: Boolean = false
  smoke_test: Boolean = true
  pact_tag: Boolean = false
  multi_arch_build_image: shared_resources_for_multi_arch_builds.ImageToMultiArchBuild = new {
    name = outer.name
    github_repo = getGithubRepo()
    dockerhub_repo = getDockerRepo()
    ecr_repo = getECRRepo()
  }
  // We should change the webhooks egress directory
  terraform_path_within_environment: String = "microservices_v2/\(if (name == "webhooks-egress") "webhooks_egress" else name)"

  function getECRRepo(): String = "govukpay/\(override_ecr_repo ?? name)"
  function getDockerRepo(): String = "governmentdigitalservice/pay-\(override_ecr_repo ?? name)"
  function getGithubRepo(): String = (override_github_repo ?? "pay-" + name)
  function getTerraformRootPath(environment: String) = List(
    "pay-infra", "provisioning", "terraform", "deployments",
    environment.split("-")[0], environment, terraform_path_within_environment
  ).join("/")
}

class MetricsConfig {
  is_a_success: Boolean = false
  put_metrics: Boolean = false
  put_sidecar_metrics: Boolean = false
  put_grafana_annotation: Boolean = false
}

local payApps: Listing<PayApplication> = new Listing<PayApplication> {
  new { name = "adminusers"; has_db = true; pact_tag = true; is_a_java_or_node_app = true }
  new { name = "cardid"; pact_tag = true; is_a_java_or_node_app = true }
  new { name = "connector"; has_db = true; pact_tag = true; is_a_java_or_node_app = true }
  new { name = "egress"; use_app_specific_deploy_task = true }
  new { name = "frontend"; use_app_specific_deploy_task = true; pact_tag = true;is_a_java_or_node_app = true }
  new { name = "ledger"; has_db = true; pact_tag = true ; is_a_java_or_node_app = true }
  new { name = "notifications" }
  new { name = "products"; has_db = true; pact_tag = true ; is_a_java_or_node_app = true }
  new { name = "products-ui"; pact_tag = true ; is_a_java_or_node_app = true }
  new { name = "publicapi"; pact_tag = true ; is_a_java_or_node_app = true }
  new { name = "publicauth"; has_db = true;  rds_identifier_suffix = 1; is_a_java_or_node_app = true }
  new { name = "selfservice"; pact_tag = true; is_a_java_or_node_app = true }
  new { name = "toolbox"; smoke_test = false; is_a_java_or_node_app = true }
  new { name = "webhooks"; has_db = true; pact_tag = true; is_a_java_or_node_app = true }
  new { name = "webhooks-egress"; use_app_specific_deploy_task = true }
}.toList().sortBy((app) -> app.name).toListing()

// sidecars or other helpers
local payHelpers: Listing<PayApplication> = new Listing<PayApplication> {
  new { name = "adot"; smoke_test = false; }
  new { name = "alpine"; smoke_test = false; override_app_to_deploy = "scheduled-tasks"; override_github_repo = "pay-infra" }
  new { name = "nginx-forward-proxy"; smoke_test = false; override_app_to_deploy = "frontend" }
  new { name = "nginx-proxy"; smoke_test = false; override_ecr_repo = "docker-nginx-proxy"
    override_app_to_deploy = "toolbox" }
  new { name = "stream-s3-sqs"; smoke_test = false; override_app_to_deploy = "scheduled-tasks" }
}.toList().sortBy((app) -> app.name).toListing()

payScheduledTask = new PayApplication { name = "scheduled-tasks"; use_app_specific_deploy_task = true }

allPayApplications: Listing<PayApplication> = new {
  ...payApps
  ...payHelpers
}

payApplicationsWithDB = payApps.toList().filter((app) -> app.has_db).toListing()

function runDBMigrationsTask(app: PayApplication, cluster: String) = new Pipeline.TaskStep {
  task = "run-db-migration"
  config {
    platform = "linux"
    image_resource {
      type = "registry-image"
      source {
        ["repository"] = "governmentdigitalservice/pay-node-runner"
        ["tag"] = "node18"
      }
    }
    inputs = new Listing<TaskConfig.Input> {
      new TaskConfig.Input { name = "pay-ci" }
    }
    params = new {
      ...getAWSAssumeRoleCreds()
      ["AWS_PAGER"] = ""
      ["AWS_REGION"] = "eu-west-1"
      ["CLUSTER_NAME"] = cluster
      ["APP_NAME"] = app.name
      ["APPLICATION_IMAGE_TAG"] = "((.:application_image_tag))"
    }
    run {
      path = "node"
      args {
        "pay-ci/ci/scripts/run-ecs-db-migration.js"
      }
    }
  }
}

function waitForDeployTask(app: PayApplication, environment: String) = new Pipeline.TaskStep {
  task = "wait-for-deploy"
  file = "pay-ci/ci/tasks/wait-for-deploy.yml"
  params {
    ["APP_NAME"] = app.name
    ["APPLICATION_IMAGE_TAG"] = "((.:application_image_tag))"
    ["ENVIRONMENT"] = environment
    when (app.is_a_java_or_node_app == true) {
      ["NGINX_IMAGE_TAG"] = "((.:nginx_image_tag))"
      ["ADOT_IMAGE_TAG"] = "((.:adot_image_tag))"
    }
    when (app.name == "frontend") {
      ["NGINX_FORWARD_PROXY_IMAGE_TAG"] = "((.:nginx_forward_proxy_image_tag))"
    }
    ...getAWSAssumeRoleCreds()
  }
}

function getAdditionalConfigForNotifications() = new TaskConfig {
  platform = "linux"
  inputs {
    new TaskConfig.Input { name = "pay-infra" }
    new TaskConfig.Input { name = "pay-ci" }
  }
  image_resource {
    type = "registry-image"
    source {
      ["repository"] = "hashicorp/terraform"
      ["tag"] = "1.3.7"
    }
  }
  run = new TaskConfig.Run {
    path = "/bin/sh"
    args {
      "pay-ci/ci/scripts/deploy-notifications.sh"
    }
  }
}

function deployApplicationTask(app: PayApplication, awsEnvVars: Map,
  taskName: String) = new Pipeline.TaskStep {

  task = taskName

  when (app.use_app_specific_deploy_task) {
    when (app.name == "frontend") {
      file = "pay-ci/ci/tasks/deploy-\(app.name)-with-adot.yml"
    } else {
      file = "pay-ci/ci/tasks/deploy-\(app.name).yml"
    }
  } else {
    when (app.name != "notifications") {
      file = "pay-ci/ci/tasks/deploy-app-with-adot.yml"
    }
  }

  params {
    ["APP_NAME"] = app.name
    when (app.name == "scheduled-tasks") {
      ["ALPINE_IMAGE_TAG"] = "((.:alpine_image_tag))"
      ["STREAM_S3_SQS_IMAGE_TAG"] = "((.:stream_s3_sqs_image_tag))"
    } else {
      ["APPLICATION_IMAGE_TAG"] = "((.:application_image_tag))"
    }
    ["ACCOUNT"] = awsEnvVars["account"]
    ["ENVIRONMENT"] = awsEnvVars["environment"]
    when (app.name == "frontend") {
      ["NGINX_FORWARD_PROXY_IMAGE_TAG"] = "((.:nginx_forward_proxy_image_tag))"
    }
    when (app.is_a_java_or_node_app == true) {
      ["NGINX_IMAGE_TAG"] = "((.:nginx_image_tag))"
      ["ADOT_IMAGE_TAG"] = "((.:adot_image_tag))"
    }
    ...getAWSAssumeRoleCreds()
    when (app.name == "notifications") {
      ["AWS_REGION"] = "eu-west-1"
    }
  }

  when (app.name == "notifications") {
    config = getAdditionalConfigForNotifications()
  }
}

function getAWSAssumeRoleCreds() = new Mapping<String, String> {
  ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
  ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
  ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
}
