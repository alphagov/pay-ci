amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/TaskConfig.pkl"
import "../common/shared_resources.pkl"
import "../common/pipeline_self_update.pkl"
import "../common/shared_resources_for_slack_notifications.pkl"

local pushGatewayVersion = "v1.9.0"
local typealias SlackNotificationConfig = shared_resources_for_slack_notifications.SlackNotificationConfig

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/prometheus-pushgateway.pkl", "master")
  (shared_resources.payECRResource("ecr-prometheus-pushgateway", "pushgateway", "pay_aws_deploy_account_id")) {
    check_every = "never"
    source { ["tag"] = pushGatewayVersion }
  }
  shared_resources.payECRResourceWithVariant("adot-ecr-registry-staging", "govukpay/adot", "pay_aws_staging_account_id", "release")
  shared_resources.payDockerHubResource("prometheus-pushgateway-resource-dockerhub", "governmentdigitalservice/pay-prometheus-pushgateway-resource", "latest-master")
  (shared_resources.payDockerHubResource("prometheus-pushgateway", "prom/pushgateway", pushGatewayVersion)) {
    check_every = "1h"
  } |> asArm()
  shared_resources.payCiGitHubResource
  (shared_resources.payGithubResource("prometheus-pushgateway-resource-release", "pay-prometheus-pushgateway-resource")) {
    source { ["tag_regex"] = "alpha_release-(.*)" }
  }
  shared_resources.slackNotificationResource
}

resource_types = new {
  shared_resources.slackNotificationResourceType
}

jobs = new {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/prometheus-pushgateway.pkl")
  new {
    name = "push-adot-to-deploy-ecr"
    plan = new {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          getStep("pay-ci", false, false)
          getStep("adot-ecr-registry-staging", true, false)
        }
      }
      parseReleaseTag("adot", false)
      assumeCopyFromStagingEcrRole()
      loadVar("release_number", "ecr-release-info/release-number")
      assumeWriteToDeployEcrRole()
      loadVarWithJsonFormat("copy-from-staging-ecr-role", "assume-copy-from-ecr-staging-role/assume-role.json")
      loadVarWithJsonFormat("write-to-deploy-ecr-role", "assume-write-to-ecr-deploy-role/assume-role.json")
      copyAdotToDeploy()
    }
  }
  new {
    name = "copy-prometheus-pushgateway"
    plan = new {
      getStep("prometheus-pushgateway", true, true)
      putStep("ecr-prometheus-pushgateway", "prometheus-pushgateway/image.tar", "", true)
    }
    on_failure = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig { message = "Failed copying pushgateway:v1.6.0 image from Docker Hub to ECR"
        slack_channel_for_failure = "#govuk-pay-starling" }
    )
    on_success = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig { is_a_success = true; message = "Copied pushgateway:v1.6.0 image from Docker Hub to ECR" }
    )
  }
  new {
    name = "build-and-push-prometheus-pushgateway-resource"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          getStep("prometheus-pushgateway-resource-release", true, false)
          getStep("pay-ci", false, false)
        }
      }
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new TaskStep {
            task = "parse-release-tag"
            file = "pay-ci/ci/tasks/parse-release-tag.yml"
            input_mapping {
              ["git-release"] = "prometheus-pushgateway-resource-release"
            }
          }
          shared_resources.generateDockerCredsConfigStep
        }
      }
      new InParallelStep {
        in_parallel = new Listing<Step> {
          loadVar("release-name", "prometheus-pushgateway-resource-release/.git/ref")
          loadVar("release-tag", "tags/tags")
          loadVar("release-number", "tags/release-number")
          loadVar("release-sha", "tags/release-sha")
          loadVar("date", "tags/date")
        }
      }
      new TaskStep {
        task = "build-prometheus-pushgateway-resource"
        privileged = true
        params {
          ["CONTEXT"] = "prometheus-pushgateway-resource-release"
          ["DOCKER_CONFIG"] = "docker_creds"
          ["LABEL_release_number"] = "((.:release-number))"
          ["LABEL_release_name"] = "((.:release-name))"
          ["LABEL_release_sha"] = "((.:release-sha))"
          ["LABEL_build_date"] = "((.:date))"
        }
        config {
          platform = "linux"
          image_resource {
            type = "registry-image"
            source {
              ["repository"] = "concourse/oci-build-task"
            }
          }
          inputs = new Listing {
            new TaskConfig.Input { name = "prometheus-pushgateway-resource-release" }
            new TaskConfig.Input { name = "docker_creds" }
          }
          outputs = new Listing {
            new TaskConfig.Output { name = "image" }
          }
          run {
            path = "build"
          }
        }
      }
      putStep("prometheus-pushgateway-resource-dockerhub", "image/image.tar", "tags/tags", true)
    }
  }
}

local function loadVar(variable: String, fileName: String): LoadVarStep = new LoadVarStep {
  load_var = variable
  file = fileName
}

local function getStep(resourceName: String, shouldTrigger: Boolean, isOci: Boolean): GetStep = new GetStep {
  get = resourceName
  when (shouldTrigger) {
    trigger = true
  }
  when (isOci) {
    params {
      ["format"] = "oci"
    }
  }
}

local function putStep(resourceName: String, imageName: String, additionalTags: String, skipDownload: Boolean): PutStep = new PutStep {
  put = resourceName
  params {
    when (imageName.length > 0) {
      ["image"] = imageName
    }
    when (additionalTags.length > 0) {
      ["additional_tags"] = additionalTags
    }
  }
  get_params {
    when (skipDownload) {
      ["skip_download"] = true
    }
  }
}

local function asArm() = new Mixin {
  source { 
    ["platform"] = new Config { 
      ["architecture"] = "arm64" 
      ["os"] = "linux"
    } 
  }
}

local function copyAdotToDeploy(): TaskStep = new TaskStep {
  task = "copy-adot-to-deploy"
  file = "pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml"
  privileged = true
  params {
    ["ECR_REPO_NAME"] = "govukpay/adot"
    ["RELEASE_NUMBER"] = "((.:release_number))"
    ["SOURCE_ECR_REGISTRY"] = "((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    ["DESTINATION_ECR_REGISTRY"] = "((pay_aws_deploy_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    ["SOURCE_AWS_ACCESS_KEY_ID"] = "((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))"
    ["SOURCE_AWS_SECRET_ACCESS_KEY"] = "((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))"
    ["SOURCE_AWS_SESSION_TOKEN"] = "((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))"
    ["DESTINATION_AWS_ACCESS_KEY_ID"] = "((.:write-to-deploy-ecr-role.AWS_ACCESS_KEY_ID))"
    ["DESTINATION_AWS_SECRET_ACCESS_KEY"] = "((.:write-to-deploy-ecr-role.AWS_SECRET_ACCESS_KEY))"
    ["DESTINATION_AWS_SESSION_TOKEN"] = "((.:write-to-deploy-ecr-role.AWS_SESSION_TOKEN))"
  }
}

local function loadVarWithJsonFormat(variable: String, fileName: String): LoadVarStep = new LoadVarStep {
  load_var = variable
  file = fileName
  format = "json"
}

local function assumeCopyFromStagingEcrRole(): TaskStep = new TaskStep {
  task = "assume-copy-from-ecr-staging-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping {
    ["assume-role"] = "assume-copy-from-ecr-staging-role"
  }
  params {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_staging_account_id)):role/concourse"
    ["AWS_ROLE_SESSION_NAME"] = "copy-from-ecr-in-staging"
  }
}

local function assumeWriteToDeployEcrRole(): TaskStep = new TaskStep {
  task = "assume-write-to-ecr-deploy-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping {
    ["assume-role"] = "assume-write-to-ecr-deploy-role"
  }
  params {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse"
    ["AWS_ROLE_SESSION_NAME"] = "copy-to-ecr-in-deploy"
  }
}

local function parseReleaseTag(appName: String, includeOutputMapping: Boolean) = new TaskStep {
  task = "parse-ecr-release-tag"
  file = "pay-ci/ci/tasks/parse-ecr-release-tag.yml"
  input_mapping = new {
    ["ecr-image"] = "\(appName)-ecr-registry-staging"
  }
  when (includeOutputMapping) {
    local releaseInfoPrefix = if (appName == "nginx-proxy") "nginx" else appName
    output_mapping = new {
      ["ecr-release-info"] = "\(releaseInfoPrefix)-release-info"
    }
  }
}
