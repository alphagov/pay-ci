---
resources:
  - name: pull-request-builds-ecr
    type: registry-image
    icon: docker
    source:
      repository: govukpay/pull-request-builds
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      tag: latest

  - name: pay-perftests-pr
    type: pull-request
    icon: github
    source:
      repository: alphagov/pay-perftests
      disable_forks: true
      access_token: ((github-access-token))

  - name: perf-tests-pipeline
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/perf-tests.yml

  - name: perf-tests-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-perftests
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: pay-ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: perf-tests-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/perftests
      tag: latest
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: perf-tests-ecr-release
    type: registry-image
    icon: docker
    source:
      repository: govukpay/perftests
      variant: release
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: perf-tests-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: governmentdigitalservice/pay-perftests
      tag: latest-master
      password: ((docker-access-token))
      username: ((docker-username))

  - name: slack-notification
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-notification-secret))

  - name: every-night-at-11pm
    icon: alarm
    source:
      start: "23:00"
      stop: "23:30"
      location: Europe/London
    type: time

  - name: every-sunday-at-0315
    type: time
    icon: alarm
    source:
      location: UTC
      start: "03:15"
      stop: "03:25"
      days: [Sunday]

  - name: every-sunday-at-0450
    type: time
    icon: alarm
    source:
      location: UTC
      start: "04:50"
      stop: "05:00"
      days: [Sunday]

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

  - name: pull-request
    type: registry-image
    source:
      repository: teliaoss/github-pr-resource
      tag: v0.21.0

groups:
  - name: complete-perf-tests
    jobs:
      - scale-and-run-all-simulations
  - name: individual-perf-tests
    jobs:
      - run-payment-simulation-perf-test
      - run-search-payment-simulation-perf-test
      - run-self-service-simulation-perf-test
  - name: environment-scaling
    jobs:
      - scale-up-databases
      - scale-up-services
      - scale-up-all
      - scale-down-databases
      - scale-down-services
      - scale-down-all
  - name: perf-tests-build
    jobs:
      - build-and-push-perf-tests
      - build-and-run-perftests-from-pr
  - name: update-perf-tests-pipeline
    jobs:
      - update-perf-tests-pipeline
  - name: all-jobs
    jobs:
      - scale-and-run-all-simulations
      - run-payment-simulation-perf-test
      - run-search-payment-simulation-perf-test
      - run-self-service-simulation-perf-test
      - scale-up-databases
      - scale-up-services
      - scale-up-all
      - scale-down-databases
      - scale-down-services
      - scale-down-all
      - build-and-push-perf-tests
      - build-and-run-perftests-from-pr
      - update-perf-tests-pipeline

definitions:
  - &scale-down-services
    in_parallel:
      - do: # Stubs is in the deploy account
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/pay-concourse-stubs-deploy-tooling
            AWS_ROLE_SESSION_NAME: terraform-deploy-assume-role
        - load_var: deploy-role
          file: assume-role/assume-role.json
        - task: scale-down-stubs
          file: pay-ci/ci/tasks/scale-fargate-service.yml
          params:
            SERVICE_NAME: stubs
            ECS_CLUSTER: deploy-tooling-fargate
            SCALE_DIRECTION: in
            DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.stubs))
            AWS_ACCESS_KEY_ID: ((.:deploy-role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:deploy-role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:deploy-role.AWS_SESSION_TOKEN))
      - task: scale-down-adminusers
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: adminusers
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.adminusers))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-cardid
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: cardid
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.cardid))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-connector
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: connector
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.connector))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-egress
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: egress
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.egress))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-frontend
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: frontend
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.frontend))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-ledger
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: ledger
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.ledger))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-notifications
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: notifications
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.notifications))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-publicapi
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: publicapi
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.publicapi))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-publicauth
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: publicauth
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.publicauth))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-down-selfservice
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: selfservice
          SCALE_DIRECTION: in
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.selfservice))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - do:
        - task: scale-down-webhooks
          file: pay-ci/ci/tasks/scale-fargate-service.yml
          params:
            SERVICE_NAME: webhooks
            SCALE_DIRECTION: in
            DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.webhooks))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: scale-down-webhooks-egress
          file: pay-ci/ci/tasks/scale-fargate-service.yml
          params:
            SERVICE_NAME: webhooks-egress
            SCALE_DIRECTION: in
            TARGET_GROUP_NAME_SUFFIX: 'tg'
            DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_down_to.webhooks-egress))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - &scale-down-databases
    in_parallel:
      - task: stop-adminusers-db
        file: pay-ci/ci/tasks/stop-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-adminusers-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: stop-connector-db
        file: pay-ci/ci/tasks/stop-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-connector-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: stop-ledger-db
        file: pay-ci/ci/tasks/stop-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-ledger-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: stop-products-db
        file: pay-ci/ci/tasks/stop-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-products-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: stop-publicauth-db
        file: pay-ci/ci/tasks/stop-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-publicauth-rds-1
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: stop-webhooks-db
        file: pay-ci/ci/tasks/stop-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-webhooks-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - &scale-up-services
    in_parallel:
      - task: scale-up-adminusers
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: adminusers
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.adminusers))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-cardid
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: cardid
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.cardid))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-connector
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: connector
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.connector))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-egress
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: egress
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.egress))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-frontend
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: frontend
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.frontend))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-ledger
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: ledger
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.ledger))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-notifications
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: notifications
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.notifications))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-publicapi
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: publicapi
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.publicapi))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-publicauth
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: publicauth
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.publicauth))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: scale-up-selfservice
        file: pay-ci/ci/tasks/scale-fargate-service.yml
        params:
          SERVICE_NAME: selfservice
          SCALE_DIRECTION: out
          DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.selfservice))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - do: # Stubs is in the deploy account
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/pay-concourse-stubs-deploy-tooling
            AWS_ROLE_SESSION_NAME: terraform-deploy-assume-role
        - load_var: deploy-role-stubs
          file: assume-role/assume-role.json
        - task: scale-up-stubs
          file: pay-ci/ci/tasks/scale-fargate-service.yml
          params:
            SERVICE_NAME: stubs
            ECS_CLUSTER: deploy-tooling-fargate
            SCALE_DIRECTION: out
            DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.stubs))
            AWS_ACCESS_KEY_ID: ((.:deploy-role-stubs.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:deploy-role-stubs.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:deploy-role-stubs.AWS_SESSION_TOKEN))
      - do:
        - task: scale-up-webhooks-egress
          file: pay-ci/ci/tasks/scale-fargate-service.yml
          params:
            SERVICE_NAME: webhooks-egress
            SCALE_DIRECTION: out
            TARGET_GROUP_NAME_SUFFIX: 'tg'
            DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.webhooks-egress))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: scale-up-webhooks
          file: pay-ci/ci/tasks/scale-fargate-service.yml
          params:
            SERVICE_NAME: webhooks
            SCALE_DIRECTION: out
            DESIRED_HEALTHY_INSTANCES: ((.:service-volumes.scale_up_to.webhooks))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - &scale-up-databases
    in_parallel:
      - task: start-adminusers-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-adminusers-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: start-connector-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-connector-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: start-ledger-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-ledger-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: start-products-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-products-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: start-publicauth-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-publicauth-rds-1
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: start-webhooks-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-webhooks-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - &prepare-codebuild
    task: prepare-codebuild
    file: pay-ci/ci/tasks/prepare-perftests-codebuild.yml
    vars:
      perf_tests_repo: "govukpay/perftests"
      perf_tests_version: ((.:release-tag))

jobs:
  - name: scale-and-run-all-simulations
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: perf-tests-ecr-release
        - get: perf-tests-git-release
        - get: pay-ci
        - get: every-night-at-11pm
          trigger: true
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: release-tag
          file: perf-tests-ecr-release/tag
        - load_var: gatling-simulation-settings
          file: perf-tests-git-release/ci/gatling-simulation-settings.json
          format: json
        - load_var: service-volumes
          file: perf-tests-git-release/ci/scale-service-volumes.yml
          format: yml
      - task: pause-deploy-to-perf-pipeline
        file: pay-ci/ci/tasks/pause-unpause-pipeline.yml
        params:
          ACTION: pause
          PIPELINE: deploy-to-perf
          FLY_USERNAME: pay-dev
          FLY_PASSWORD: ((readonly_local_user_password))
      - <<: *scale-up-databases
      - <<: *scale-up-services
      - <<: *prepare-codebuild
      - try:
          # The payment simulation should be the first simulation run to give time for the events queues to be consumed
          # completely while the other simulations run. This enables the automatic expiry and expunging processes to
          # complete their work before we scale down and ensures we don't leave lots of messages on the SQS queues.
          task: payment-simulation-perf-test
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-PaymentSimulation.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          on_failure:
            put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: Performance test PaymentSimulation failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
#   Temporarily disable search scenarios in daily scheduled perftests.
#   Ledger is currently unable to fulfil these perftest requests reliably.
#      - try:
#          task: search-payments-simulation-perf-test
#          file: pay-ci/ci/tasks/run-codebuild.yml
#          params:
#            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-SearchPaymentsSimulation.json"
#            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
#            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
#            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
#          on_failure:
#            put: slack-notification
#            attempts: 10
#            params:
#              channel: '#govuk-pay-announce'
#              silent: true
#              text: ':red-circle: Performance test SearchPaymentsSimulation failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#              icon_emoji: ":concourse:"
#              username: pay-concourse
      - try:
          task: self-service-simulation-perf-test
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-SelfServiceSimulation.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          on_failure:
            put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: Performance test SelfServiceSimulation failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        # This one failure goes to starling since it's the daily performance test run and this is a notification that the actual execution of
        # those tests is failing (as opposed to bad results from the performance test itself)
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed to execute performance test - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Performance test execution completed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    ensure:
      do:
        - <<: *scale-down-services
        - <<: *scale-down-databases
        - task: unpause-deploy-to-perf-pipeline
          file: pay-ci/ci/tasks/pause-unpause-pipeline.yml
          params:
            ACTION: unpause
            PIPELINE: deploy-to-perf
            FLY_USERNAME: pay-dev
            FLY_PASSWORD: ((readonly_local_user_password))

  - name: run-search-payment-simulation-perf-test
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: perf-tests-ecr-release
        - get: perf-tests-git-release
        - get: pay-ci
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: release-tag
          file: perf-tests-ecr-release/tag
        - load_var: gatling-simulation-settings
          file: perf-tests-git-release/ci/gatling-simulation-settings.json
          format: json
      - <<: *prepare-codebuild
      - try:
          task: search-payments-simulation-perf-test
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-SearchPaymentsSimulation.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          on_failure:
            put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: Performance test SearchPaymentsSimulation failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Failed to execute individual performance test SearchPaymentsSimulation - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Individual performance test execution of SearchPaymentsSimulation completed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse


  - name: run-payment-simulation-perf-test
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: perf-tests-ecr-release
        - get: perf-tests-git-release
        - get: pay-ci
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: release-tag
          file: perf-tests-ecr-release/tag
        - load_var: gatling-simulation-settings
          file: perf-tests-git-release/ci/gatling-simulation-settings.json
          format: json
      - <<: *prepare-codebuild
      - try:
          task: payment-simulation-perf-test
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-PaymentSimulation.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          on_failure:
            put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: Performance test PaymentSimulation failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Failed to execute individual performance test PaymentSimulation - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Individual performance test execution of PaymentSimulation completed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: run-self-service-simulation-perf-test
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: perf-tests-ecr-release
        - get: pay-ci
        - get: perf-tests-git-release
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: release-tag
          file: perf-tests-ecr-release/tag
        - load_var: gatling-simulation-settings
          file: perf-tests-git-release/ci/gatling-simulation-settings.json
          format: json
      - <<: *prepare-codebuild
      - try:
          task: self-service-simulation-perf-test
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-SelfServiceSimulation.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          on_failure:
            put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: Performance test SelfServiceSimulation failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Failed to execute individual performance test SelfServiceSimulation - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Individual performance test execution of SelfServiceSimulation completed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse


  - name: scale-up-databases
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: pay-ci
        - get: every-sunday-at-0315
          trigger: true
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
      - <<: *scale-up-databases

  - name: scale-up-services
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: pay-ci
        - get: perf-tests-git-release
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: service-volumes
          file: perf-tests-git-release/ci/scale-service-volumes.yml
          format: yml
      - <<: *scale-up-services

  - name: scale-up-all
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: pay-ci
        - get: perf-tests-git-release
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: service-volumes
          file: perf-tests-git-release/ci/scale-service-volumes.yml
          format: yml
      - <<: *scale-up-databases
      - <<: *scale-up-services

  - name: scale-down-databases
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: pay-ci
        - get: every-sunday-at-0450
          trigger: true
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
      - task: pause-deploy-to-perf-pipeline
        file: pay-ci/ci/tasks/pause-unpause-pipeline.yml
        params:
          ACTION: pause
          PIPELINE: deploy-to-perf
          FLY_USERNAME: pay-dev
          FLY_PASSWORD: ((readonly_local_user_password))
      - <<: *scale-down-databases
    ensure:
      task: unpause-deploy-to-perf-pipeline
      file: pay-ci/ci/tasks/pause-unpause-pipeline.yml
      params:
        ACTION: unpause
        PIPELINE: deploy-to-perf
        FLY_USERNAME: pay-dev
        FLY_PASSWORD: ((readonly_local_user_password))

  - name: scale-down-services
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: pay-ci
        - get: perf-tests-git-release
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: service-volumes
          file: perf-tests-git-release/ci/scale-service-volumes.yml
          format: yml
      - <<: *scale-down-services

  - name: scale-down-all
    serial: true
    serial_groups: [perf-tests]
    plan:
      - in_parallel:
        - get: pay-ci
        - get: perf-tests-git-release
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
          AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
          format: json
        - load_var: service-volumes
          file: perf-tests-git-release/ci/scale-service-volumes.yml
          format: yml
      - task: pause-deploy-to-perf-pipeline
        file: pay-ci/ci/tasks/pause-unpause-pipeline.yml
        params:
          ACTION: pause
          PIPELINE: deploy-to-perf
          FLY_USERNAME: pay-dev
          FLY_PASSWORD: ((readonly_local_user_password))
      - <<: *scale-down-services
      - <<: *scale-down-databases
    ensure:
      task: unpause-deploy-to-perf-pipeline
      file: pay-ci/ci/tasks/pause-unpause-pipeline.yml
      params:
        ACTION: unpause
        PIPELINE: deploy-to-perf
        FLY_USERNAME: pay-dev
        FLY_PASSWORD: ((readonly_local_user_password))

  - name: build-and-push-perf-tests
    plan:
      - in_parallel:
        - get: perf-tests-git-release
          trigger: true
        - get: pay-ci
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: perf-tests-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: perf-tests-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - task: build-perf-tests-image
        privileged: true
        params:
          DOCKER_CONFIG: docker_creds
          LABEL_release_number: ((.:release-number))
          LABEL_release_name: ((.:release-name))
          LABEL_release_sha: ((.:release-sha))            
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: concourse/oci-build-task
          inputs:
            - name: perf-tests-git-release
              path: .
          outputs:
            - name: image
          run:
            path: build
      - in_parallel:
        - put: perf-tests-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
          get_params:
            skip_download: true
        - put: perf-tests-dockerhub
          params:
            image: image/image.tar
            additional_tags: tags/tags
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Failed to build and push pay-perftests image - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Built and pushed pay-perftests image - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: build-and-run-perftests-from-pr
    plan:
      - in_parallel:
        - get: pay-perftests-pr
        - get: pay-ci
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          steps:
          - task: build-perf-tests-image
            privileged: true
            params:
              DOCKER_CONFIG: docker_creds
            config:
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: concourse/oci-build-task
              inputs:
                - name: pay-perftests-pr
                  path: .
              outputs:
                - name: image
              run:
                path: build
          - task: assume-role
            file: pay-ci/ci/tasks/assume-role.yml
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-perf-tests-test-perf-1
              AWS_ROLE_SESSION_NAME: perf-tests-test-assume-role
      - task: get-docker-image-info
        file: pay-ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: perftests
        input_mapping:
          src: pay-perftests-pr
      - in_parallel:
          steps:
            - load_var: image_filename
              file: image_info/image_filename
            - load_var: image_tag
              file: image_info/tag
            - load_var: gatling-simulation-settings
              file: pay-perftests-pr/ci/gatling-simulation-settings.json
              format: json
            - load_var: role
              file: assume-role/assume-role.json
              format: json
      - in_parallel:
          steps:
          - put: pull-request-builds-ecr
            params:
              image: image/image.tar
              additional_tags: image_info/tag
            get_params:
              skip_download: true
          - <<: *prepare-codebuild
            vars:
              perf_tests_repo: govukpay/pull-request-builds
              perf_tests_version: ((.:image_tag))
      - in_parallel:
          steps:
            - try:
                task: payment-simulation-perf-test
                file: pay-ci/ci/tasks/run-codebuild.yml
                params:
                  PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-PaymentSimulation.json"
                  AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
                  AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
                  AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            - try:
                task: self-service-simulation-perf-test
                file: pay-ci/ci/tasks/run-codebuild.yml
                params:
                  PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-SelfServiceSimulation.json"
                  AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
                  AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
                  AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            - try:
                task: search-payments-simulation-perf-test
                file: pay-ci/ci/tasks/run-codebuild.yml
                params:
                  PATH_TO_CONFIG: "../../../../run-codebuild-configuration/perf-tests-SearchPaymentsSimulation.json"
                  AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
                  AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
                  AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: update-perf-tests-pipeline
    plan:
      - get: perf-tests-pipeline
        trigger: true
      - set_pipeline: perf-tests
        file: perf-tests-pipeline/ci/pipelines/perf-tests.yml
