amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.1#/Pipeline.pkl"
import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.1#/TaskConfig.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-dev/e2e-helpers.pkl", "master")

  shared_resources.payCiGitHubResource

  (shared_resources.payGithubResourceWithBranch("e2e-helpers-pipeline", "pay-ci", "master")) {
    source { ["paths"] = new Listing<String> { "ci/pipelines/e2e-helpers.yml" } }
  }

  (shared_resources.payGithubResourceWithBranch("endtoend-git-release", "pay-endtoend", "master")) {
    source { ["tag_regex"] = "alpha_release-(.*)" }
  }

  (shared_resources.payGithubResourceWithBranch("stubs-git-release", "pay-stubs", "master")) {
    source { ["tag_regex"] = "alpha_release-(.*)" }
  }

  (shared_resources.payGithubResourceWithBranch(
    "reverse-proxy-git-release", "pay-scripts", "master")
  ) {
    source { ["tag_regex"] = "reverse_proxy_alpha_release-(.*)" }
  }

  (shared_resources.payECRResource(
    "endtoend-ecr-registry-test", "govukpay/endtoend", "pay_aws_test_account_id")
  ) {
    source { ["tag"] = "latest" }
  }

  (shared_resources.payECRResourceWithVariant(
    "endtoend-candidate-ecr-registry-test", 
    "govukpay/endtoend", 
    "pay_aws_test_account_id", 
    "candidate")) 

  (shared_resources.payECRResourceWithVariant(
    "reverse-proxy-candidate-ecr-registry-test",
    "govukpay/reverse-proxy",
    "pay_aws_test_account_id", 
    "candidate")) 

  (shared_resources.payECRResourceWithVariant(
    "stubs-candidate-ecr-registry-test",
    "govukpay/stubs",
    "pay_aws_test_account_id", 
    "candidate")) 

  shared_resources.payDockerHubResource(
    "endtoend-dockerhub", 
    "governmentdigitalservice/pay-endtoend", 
    "latest-master")

  (shared_resources.payDockerHubResource("postgres-15-alpine", "postgres", "15-alpine")) {
    check_every = "1h" 
  }

  (shared_resources.payECRResource(
    "ecr-postgres-15-alpine", "postgres", "pay_aws_test_account_id")
  ) {
    check_every = "never"
    source { ["tag"] = "15-alpine" }
  }

  (shared_resources.payDockerHubResource(
    "localstack-localstack-3", 
    "localstack/localstack", "3")
  ) {
    check_every = "1h"
  }

  (shared_resources.payECRResource(
    "ecr-localstack-localstack-3", 
    "localstack/localstack", 
    "pay_aws_test_account_id")
  ) {
    check_every = "never"
    source { ["tag"] = "3" }
  }

  (shared_resources.payDockerHubResource(
    "selenium-standalone-chrome-3-141-59",
    "selenium/standalone-chrome",
     "3.141.59")) {
    check_every = "1h"
  }

  (shared_resources.payECRResource(
    "ecr-selenium-standalone-chrome-3-141-59",
    "selenium/standalone-chrome",
    "pay_aws_test_account_id")
  ) {
    check_every = "never"
    source { ["tag"] = "3.141.59" }
  }

  shared_resources.slackNotificationResource
}

resource_types = new {
  shared_resources.slackNotificationResourceType
}

jobs = new {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-dev/e2e-helpers.pkl")

  new {
    name = "build-and-push-endtoend-candidate"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new GetStep { get = "endtoend-git-release" trigger = true }
          new GetStep { get = "pay-ci" }
        }
      }

      shared_resources.generateDockerCredsConfigStep
      shared_resources.parseReleaseTag("endtoend-git-release")
      new LoadVarStep { load_var = "release_number_tag" file = "tags/release-number" }

      new InParallelStep {  // One step in parallel, but that's what the original does
        in_parallel = new Listing<Step> {
          buildImage("build-endtoend-image", "endtoend-git-release")
        }
      }

      putCandidateImage("endtoend-candidate-ecr-registry-test")
    }
    on_failure = shared_resources.paySlackNotificationForFail(
      "#govuk-pay-starling",
      "Failed to build and push pay-endtoend candidate image"
    )
    on_success = shared_resources.paySlackNotificationForSuccess(
      "#govuk-pay-activity",
      "Built and pushed pay-endtoend candidate image"
    )
  }

  new {
    name = "endtoend-e2e"
    plan {
      new InParallelStep {
        in_parallel = new Listing {
          new GetStep { 
            get = "endtoend-candidate-ecr-registry-test"
            trigger = true
            passed = new Listing { "build-and-push-endtoend-candidate" }
            params { ["format"] = "oci" }
          }
          new GetStep { get = "pay-ci" }
        }
      }

      shared_resources.parseCandidateTag("endtoend-candidate-ecr-registry-test")

      new LoadVarStep { 
        load_var = "candidate_number_tag" 
        file = "parse-candidate-tag/release-number" 
      }

      assumeCodeBuildRole("executor", "e2e-test-assume-role")

      new InParallelStep {
        in_parallel = new Listing {
          new LoadVarStep { 
            load_var = "candidate_image_tag" 
            file = "endtoend-candidate-ecr-registry-test/tag" 
          }
          new LoadVarStep { 
            load_var = "role" 
            file = "assume-role/assume-role.json"
            format = "json"
          }
        }
      }

      shared_resources.prepareCodeBuild(
        "endtoend", 
        "prepare-e2e-codebuild.yml", 
        "((.:candidate_image_tag))"
      )

      new InParallelStep {
        in_parallel = new Listing {
          shared_resources.runCodeBuild(
            "run-codebuild-card", "../../../../run-codebuild-configuration/card.json",
            3
          )
          shared_resources.runCodeBuild(
            "run-codebuild-products", "../../../../run-codebuild-configuration/products.json",
            1
          )
          shared_resources.runCodeBuild(
            "run-codebuild-zap", "../../../../run-codebuild-configuration/zap.json",
            1
          )
        }
      }

      new InParallelStep {
        in_parallel = new Listing {
          putStep(
            "endtoend-ecr-registry-test",
            "endtoend-candidate-ecr-registry-test/image.tar",
            "parse-candidate-tag/release-tag",
            true
          )
          putStep(
            "endtoend-dockerhub",
            "endtoend-candidate-ecr-registry-test/image.tar",
            "",
            true
          )
        }
      }
    }
    on_failure = shared_resources.paySlackNotificationForFail(
      "#govuk-pay-starling",
      "pay-endtoend failed post-merge e2e tests"
    )
    on_success = shared_resources.paySlackNotificationForSuccess(
      "#govuk-pay-activity",
      "pay-endtoend passed post-merge e2e tests and was pushed as a final release"
    )
  }

  new {
    name = "build-and-push-reverse-proxy-candidate"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new GetStep { get = "pay-ci" }
          new GetStep { get = "reverse-proxy-git-release" trigger = true } //sub
        }
      }

      shared_resources.parseReleaseTag("reverse-proxy-git-release")

      new InParallelStep {
        in_parallel = new Listing<Step> {
          new LoadVarStep { load_var = "release-number" file = "tags/release-number" }
          new LoadVarStep { load_var = "release-name" file = "reverse-proxy-git-release/.git/ref" }
          new LoadVarStep { load_var = "release-sha" file = "tags/release-sha" }
          new LoadVarStep { load_var = "candidate-image-tag" file = "tags/candidate-tag" }
          new LoadVarStep { load_var = "date" file = "tags/date" }
          assumeCodeBuildRole("builder", "codebuild-assume-role")
        }
      }

      new LoadVarStep { load_var = "role" file = "assume-role/assume-role.json" format = "json" }
      shared_resources.prepareCodeBuildMultiarch("reverse-proxy")
      shared_resources.generateDockerCredsConfigStep
      shared_resources.runCodeBuildMultiarch("reverse-proxy", 3)
      shared_resources.runCodeBuild(
        "run-codebuild-reverse-proxy-manifest",
        "../../../../run-codebuild-configuration/reverse-proxy-manifest.json",
        3
      )
    }
    on_failure = shared_resources.paySlackNotificationForFail(
      "#govuk-pay-starling",
      "Failed to build and push e2e helper reverse-proxy"
    )
    on_success = shared_resources.paySlackNotificationForSuccess(
      "#govuk-pay-activity",
      "Built and pushed e2e helper reverse-proxy"
    )
  }

  new {
    name = "reverse-proxy-e2e"
    plan {
      new InParallelStep {
        in_parallel = new Listing {
          new GetStep { 
            get = "reverse-proxy-candidate-ecr-registry-test"
            trigger = true
            params { ["format"] = "oci" }
          }
          new GetStep { get = "pay-ci" }
        }
      }

      shared_resources.parseCandidateTag("reverse-proxy-candidate-ecr-registry-test")

      new LoadVarStep { 
        load_var = "candidate_number_tag"
        file = "parse-candidate-tag/release-number" 
      }

      assumeCodeBuildRole("executor", "e2e-test-assume-role")

      new InParallelStep {
        in_parallel = new Listing {
          new LoadVarStep { 
            load_var = "candidate_image_tag" 
            file = "reverse-proxy-candidate-ecr-registry-test/tag" 
          }
          new LoadVarStep { 
            load_var = "role" 
            file = "assume-role/assume-role.json"
            format = "json"
          }
        }
      }

      shared_resources.prepareCodeBuild(
        "reverse-proxy", 
        "prepare-e2e-codebuild.yml", 
        "((.:candidate_image_tag))"
      )

      new InParallelStep {
        in_parallel = new Listing {
          shared_resources.runCodeBuild(
            "run-codebuild-card", "../../../../run-codebuild-configuration/card.json",
            3
          )
          shared_resources.runCodeBuild(
            "run-codebuild-products", "../../../../run-codebuild-configuration/products.json",
            1
          )
          shared_resources.runCodeBuild(
            "run-codebuild-zap", "../../../../run-codebuild-configuration/zap.json",
            1
          )
        }
      }

      new InParallelStep {
        in_parallel = new Listing {
          shared_resources.generateDockerCredsConfigStep
          shared_resources.parseCandidateTag("reverse-proxy-candidate-ecr-registry-test")
          assumeCodeBuildRole("executor", "e2e-test-assume-role")
          assumeRetagRole
         }
      }

      new InParallelStep {
        in_parallel = new Listing {
          new LoadVarStep { 
            load_var = "retag-role" 
            file = "assume-retag-role/assume-role.json" 
            format = "json"
          }
          new LoadVarStep { 
            load_var = "release_image_tag" 
            file = "parse-candidate-tag/release-tag" 
          }
        }
      }

      new InParallelStep {
        in_parallel = new Listing {
          retagCandidateInEcr("reverse-proxy", "((.:release_image_tag))", "release")
          retagCandidateInEcr("reverse-proxy", "latest", "latest")
          retagCandidateInDockerHub(
            "governmentdigitalservice/pay-reverse-proxy",
            "((.:candidate_image_tag))",
            "release"
          )
        }
      }
    }
    on_failure = shared_resources.paySlackNotificationForFail(
      "#govuk-pay-starling",
      "e2e helper reverse-proxy failed post-merge e2e tests"
    )
    on_success = shared_resources.paySlackNotificationForSuccess(
      "#govuk-pay-activity",
      "e2e helper reverse-proxy passed post-merge e2e tests and was pushed as a final release"
    )
  }

  new {
    name = "build-and-push-stubs-candidate" 
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new GetStep { get = "stubs-git-release" trigger = true } 
          new GetStep { get = "pay-ci" }
        }
      }

      new InParallelStep {
        in_parallel = new Listing<Step> {
          shared_resources.generateDockerCredsConfigStep
          assumeCodeBuildRole("builder", "codebuild-assume-role")
        }
      }

      shared_resources.parseReleaseTag("stubs-git-release")

      new InParallelStep {
        in_parallel = new Listing<Step> {
          new LoadVarStep { load_var = "release-number"; file = "tags/release-number" }
          new LoadVarStep { load_var = "release-name"; file = "stubs-git-release/.git/ref" }
          new LoadVarStep { load_var = "release-sha"; file = "tags/release-sha" }
          new LoadVarStep { load_var = "date" file = "tags/date" }
          new LoadVarStep { load_var = "role" file = "assume-role/assume-role.json" format = "json" }
        }
      }

      shared_resources.prepareCodeBuildMultiarch("stubs")
      shared_resources.runCodeBuildMultiarch("stubs", 1)
      shared_resources.runCodeBuild(
        "run-codebuild-stubs-manifest",
        "../../../../run-codebuild-configuration/stubs-manifest.json",
        1
      )
    }
    on_failure = shared_resources.paySlackNotificationForFail(
      "#govuk-pay-starling",
      "Failed to build and push pay-stubs candidate image"
    )
    on_success = shared_resources.paySlackNotificationForSuccess(
      "#govuk-pay-activity",
      "Built and pushed pay-stubs candidate image"
    )
  }

  new {
    name = "stubs-e2e"
    plan {
      new InParallelStep {
        in_parallel = new Listing {
          new GetStep { 
            get = "stubs-candidate-ecr-registry-test"
            trigger = true
            params { ["format"] = "oci" }
          }
          new GetStep { get = "pay-ci" }
        }
      }

      new InParallelStep {
        in_parallel = new Listing {
          shared_resources.generateDockerCredsConfigStep
          shared_resources.parseCandidateTag("stubs-candidate-ecr-registry-test")
          assumeCodeBuildRole("executor", "e2e-test-assume-role")
          assumeRetagRole
          assumeWriteToDeployRole
        }
      }

      new InParallelStep {
        in_parallel = new Listing {
          new LoadVarStep { 
            load_var = "candidate_image_tag" 
            file = "stubs-candidate-ecr-registry-test/tag" 
          }
          new LoadVarStep { 
            load_var = "role" 
            file = "assume-role/assume-role.json"
            format = "json"
          }
          new LoadVarStep { 
            load_var = "retag-role" 
            file = "assume-retag-role/assume-role.json"
            format = "json"
          }
          new LoadVarStep { 
            load_var = "write-to-deploy-role" 
            file = "assume-write-to-deploy-role/assume-role.json"
            format = "json"
          }
          new LoadVarStep { 
            load_var = "release_image_tag" 
            file = "parse-candidate-tag/release-tag"
          }
          new LoadVarStep { 
            load_var = "release_number" 
            file = "parse-candidate-tag/release-number"
          }
        }
      }

      shared_resources.prepareCodeBuild(
        "stubs", 
        "prepare-e2e-codebuild.yml", 
        "((.:candidate_image_tag))"
      )

      new InParallelStep {
        in_parallel = new Listing {
          shared_resources.runCodeBuild(
            "run-codebuild-card", "../../../../run-codebuild-configuration/card.json",
            3
          )
          shared_resources.runCodeBuild(
            "run-codebuild-products", "../../../../run-codebuild-configuration/products.json",
            1
          )
        }
      }

      new InParallelStep {
        in_parallel = new Listing {
          retagCandidateInEcr("stubs", "((.:release_image_tag))", "release")
          retagCandidateInEcr("stubs", "latest", "latest")
          retagCandidateInDockerHub(
            "governmentdigitalservice/pay-stubs",
            "((.:candidate_image_tag))",
            "release"
          )
          copyMultiarchImageToAccount("stubs")
        }
      }
    }
    on_failure = shared_resources.paySlackNotificationForFail(
      "#govuk-pay-starling",
      "pay-stubs failed post-merge e2e tests"
    )
    on_success = shared_resources.paySlackNotificationForSuccess(
      "#govuk-pay-activity",
      "pay-stubs passed post-merge e2e tests and was pushed as a final release"
    )
  }

  copyImageToEcr("postgres-15-alpine", "postgres:15-alpine")
  copyImageToEcr("localstack-localstack-3", "localstack/localstack:2.0")
  copyImageToEcr(
    "selenium-standalone-chrome-3-141-59",
    "selenium/standalone-chrome:3-141-59"
  )
}

// THINGS BELOW HERE MAY BE USEFUL IN SHARED_RESOURCES

local function buildImage(taskName: String, context: String): TaskStep = new {
  task = taskName
  privileged = true
  params {
    ["CONTEXT"] = context
    ["DOCKER_CONFIG"] = "docker_creds"
  }
  config {
    platform = "linux"
    image_resource {
      type = "registry-image"
      source { ["repository"] = "concourse/oci-build-task" }
    }
    inputs = new Listing {
      new TaskConfig.Input { name = context }
      new TaskConfig.Input { name = "docker_creds" }
    }
    outputs = new Listing {
      new TaskConfig.Output { name = "image" }
    }
    run { path = "build" }
  }
}

local function putCandidateImage(putName: String): PutStep = new {
  put = putName
  params = new {
    ["image"] = "image/image.tar"
    ["additional_tags"] = "tags/candidate-tag"
  }
  get_params = new { ["skip_download"] = true }
}

local function assumeCodeBuildRole(codeBuildRole: String, sessionName: String): TaskStep = new {
  task = "assume-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  params = new {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-\(codeBuildRole)-test-12"
    ["AWS_ROLE_SESSION_NAME"] = sessionName
  }
}

local assumeRetagRole: TaskStep = new {
  task = "assume-retag-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping = new {
    ["assume-role"] = "assume-retag-role"
  }
  params = new {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_test_account_id)):role/concourse"
    ["AWS_ROLE_SESSION_NAME"] = "retag-ecr-image-as-release"
  }
}

local assumeWriteToDeployRole: TaskStep = new {
  task = "assume-write-to-deploy-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping = new {
    ["assume-role"] = "assume-write-to-deploy-role"
  }
  params = new {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_dev_worker_ecr_access"
    ["AWS_ROLE_SESSION_NAME"] = "write-ecr-to-deploy"
  }
}

local function retagCandidateInDockerHub(repo: String, tag: String, taskTag: String): TaskStep = new {
  task = "retag-candidate-as-\(taskTag)-in-dockerhub"
  file = "pay-ci/ci/tasks/manifest-retag.yml"
  params = new {
    ["SOURCE_MANIFEST"] = "\(repo):\(tag)"
    ["NEW_MANIFEST"] = "\(repo):latest-master"
  }
}

local function retagCandidateInEcr(repo: String, tag: String, taskTag: String): TaskStep = new {
  task = "retag-candidate-as-\(taskTag)-in-ecr"
  file = "pay-ci/ci/tasks/manifest-retag.yml"
  params = new {
    ["DOCKER_LOGIN_ECR"] = "1"
    ["AWS_ACCOUNT_ID"] = "((pay_aws_test_account_id))"
    ["SOURCE_MANIFEST"] = "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/\(repo):((.:candidate_image_tag))"
    ["NEW_MANIFEST"] = "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/\(repo):\(tag)"
    ["AWS_ACCESS_KEY_ID"] = "((.:retag-role.AWS_ACCESS_KEY_ID))"
    ["AWS_SECRET_ACCESS_KEY"] = "((.:retag-role.AWS_SECRET_ACCESS_KEY))"
    ["AWS_SESSION_TOKEN"] = "((.:retag-role.AWS_SESSION_TOKEN))"
  }
}

local function copyMultiarchImageToAccount(repo: String): TaskStep = new {
  task = "copy-images-to-\(repo)-ecr-registry-deploy"
  file = "pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml"
  privileged = true
  params = new {
    ["DESTINATION_AWS_ACCESS_KEY_ID"] = "((.:write-to-deploy-role.AWS_ACCESS_KEY_ID))"
    ["DESTINATION_AWS_SECRET_ACCESS_KEY"] = "((.:write-to-deploy-role.AWS_SECRET_ACCESS_KEY))"
    ["DESTINATION_AWS_SESSION_TOKEN"] = "((.:write-to-deploy-role.AWS_SESSION_TOKEN))"
    ["DESTINATION_ECR_REGISTRY"] = "((pay_aws_deploy_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    ["ECR_REPO_NAME"] = "govukpay/\(repo)"
    ["RELEASE_NUMBER"] = "((.:release_number))"
    ["SOURCE_AWS_ACCESS_KEY_ID"] = "((.:retag-role.AWS_ACCESS_KEY_ID))"
    ["SOURCE_AWS_SECRET_ACCESS_KEY"] = "((.:retag-role.AWS_SECRET_ACCESS_KEY))"
    ["SOURCE_AWS_SESSION_TOKEN"] = "((.:retag-role.AWS_SESSION_TOKEN))"
    ["SOURCE_ECR_REGISTRY"] = "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
  }
}

// COPIED FROM prometheus-pushgateway.pkl -- MOVE TO SHARED_RESOURCES?

local function putStep(resourceName: String, imageName: String, additionalTags: String, skipDownload: Boolean): PutStep = new PutStep {
  put = resourceName
  params {
    when (imageName.length > 0) {
      ["image"] = imageName
    }
    when (additionalTags.length > 0) {
      ["additional_tags"] = additionalTags
    }
  }
  get_params {
    when (skipDownload) {
      ["skip_download"] = true
    }
  }
}

local function copyImageToEcr(image: String, displayName: String): Job = new {
  name = "copy-\(image)"
  plan {
    new GetStep { 
      get = image
      trigger = true
      params { ["format"] = "oci" }
    }

    new PutStep {
      put = "ecr-\(image)"
      params { ["image"] = "\(image)/image.tar" }
      get_params { ["skip_download"] = true }
    }
  }

  on_failure = shared_resources.paySlackNotificationForFail(
    "#govuk-pay-starling",
    "Failed copying \(displayName) image from Docker Hub to ECR"
  )

  on_success = shared_resources.paySlackNotificationForSuccess(
    "#govuk-pay-activity",
    "Copied \(displayName) image from Docker Hub to ECR"
  )
}
