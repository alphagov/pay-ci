container_limits: {}
platform: linux
image_resource:
  type: registry-image
  source:
    repository: governmentdigitalservice/pay-concourse-runner
params:
  SOURCE_ECR_REGISTRY:
  DESTINATION_ECR_REGISTRY:
  ECR_REPO_NAME:
  RELEASE_NUMBER:
  SOURCE_AWS_ACCESS_KEY_ID:
  SOURCE_AWS_SECRET_ACCESS_KEY:
  SOURCE_AWS_SESSION_TOKEN:
  DESTINATION_AWS_ACCESS_KEY_ID:
  DESTINATION_AWS_SECRET_ACCESS_KEY:
  DESTINATION_AWS_SESSION_TOKEN:
  TAG_LABEL:

run:
  path: bash
  args:
    - -ec
    - |

      function cleanup {
        echo "CLEANUP TRIGGERED"
        clean_docker
        stop_docker
        echo "CLEANUP COMPLETE"
      }

      TAG_LABEL=${TAG_LABEL:-candidate}

      trap cleanup EXIT
      source /docker-helpers.sh

      start_docker

      set +x # This is a safety measure to prevent us accidentally leaking AWS secrets in the future
      AWS_ACCESS_KEY_ID="$SOURCE_AWS_ACCESS_KEY_ID"
      AWS_SECRET_ACCESS_KEY="$SOURCE_AWS_SECRET_ACCESS_KEY"
      AWS_SESSION_TOKEN="$SOURCE_AWS_SESSION_TOKEN"
      export AWS_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY
      export AWS_SESSION_TOKEN

      echo "Logging in to source ECR"
      aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin "$SOURCE_ECR_REGISTRY"

      echo "Pulling images"
      docker pull --quiet "${SOURCE_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-armv8" &
      docker pull --quiet "${SOURCE_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-amd64" &

      echo "Waiting for pulls to complete"
      wait

      echo "Retagging images locally"
      docker tag "${SOURCE_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-armv8" "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-armv8"
      docker tag "${SOURCE_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-amd64" "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-amd64"

      set +x # This is a safety measure to prevent us accidentally leaking AWS secrets in the future
      AWS_ACCESS_KEY_ID="$DESTINATION_AWS_ACCESS_KEY_ID"
      AWS_SECRET_ACCESS_KEY="$DESTINATION_AWS_SECRET_ACCESS_KEY"
      AWS_SESSION_TOKEN="$DESTINATION_AWS_SESSION_TOKEN"
      export AWS_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY
      export AWS_SESSION_TOKEN

      echo "Logging in to destination ECR"
      aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin "$DESTINATION_ECR_REGISTRY"

      echo "Pushing images"
      docker push --quiet "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-armv8" &
      docker push --quiet "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-amd64" &

      echo "Waiting for pushes to complete"
      wait

      echo "Creating release manifest in destination registry"
      docker buildx imagetools create \
        -t "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-release" \
        "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-armv8" \
        "${DESTINATION_ECR_REGISTRY}/${ECR_REPO_NAME}:${RELEASE_NUMBER}-${TAG_LABEL}-amd64"
