amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"
import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/shared_resources_for_deploy_pipelines.pkl"
import "../common/shared_resources_for_slack_notifications.pkl" as shared_slack
import "../common/shared_resources_for_terraform.pkl"
import "../common/PayResources.pkl"

local s3ObjectPathForEventNotification = Map (
  "dev", "s3/pay-govuk-logs-dev/2025-04-15-00-00-00-2AD1799A1B3E2A9D",
  "test", "s3-e2e/test-log.txt"
)

resource_types {
  shared_slack.slackNotificationResourceType
}

local class LoggingEnv {
  account: shared_resources.AWSAccountName
  environment: String = ""
  run_e2e_test_after_deploy: Boolean = false
  include_destroy_job: Boolean = false
  tf_root: String
  depends_on_job: String = ""
}

local function getEnvironmentOrAccount(loggingEnv: LoggingEnv): String =
  if (loggingEnv.environment != "" && loggingEnv.environment.length > 0) loggingEnv.environment
  else loggingEnv.account.toString()

local loggingEnvironments = new Listing<LoggingEnv> {
  new LoggingEnv {
    account = "dev"
    include_destroy_job = true
    tf_root = "pay-infra/provisioning/terraform/deployments/dev/logging_pipeline"
    depends_on_job = "e2e-test-logging-pipeline-in-test-e2e-env"
  }
  new LoggingEnv {
    account = "test"
    tf_root = "pay-infra/provisioning/terraform/deployments/test/logging_pipeline"
    depends_on_job = "e2e-test-logging-pipeline-in-test-e2e-env"
  }
  new LoggingEnv {
    account = "test" environment = "test-e2e"
    run_e2e_test_after_deploy = true
    tf_root = "pay-infra/provisioning/terraform/deployments/test/e2e_test_logging_pipeline"
  }
  new LoggingEnv {
    account = "test" environment = "test-12"
    tf_root = "pay-infra/provisioning/terraform/deployments/test/test-12/management/logging_pipeline"
    depends_on_job = "e2e-test-logging-pipeline-in-test-e2e-env"
  }
  new LoggingEnv {
    account = "test" environment = "test-perf-1"
    tf_root = "pay-infra/provisioning/terraform/deployments/test/test-perf-1/management/logging_pipeline"
    depends_on_job = "e2e-test-logging-pipeline-in-test-e2e-env"
  }
}

resources {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-dev/deploy-logging-pipeline.pkl", "master")
  shared_resources.payCiGitHubResource
  shared_slack.slackNotificationResource
  new PayResources.PayInfraGitHubResource {
    source {
      paths = new {
        "provisioning/terraform/modules/pay_logging_pipeline/**"
        "provisioning/terraform/deployments/**/logging_pipeline/**"
      }
    }
  }

  new Pipeline.Resource {
    name = "pay-logging-firehose-transformation"
    type = "s3"
    icon = "lambda"

    source = new {
      ["access_key_id"] = "((readonly_access_key_id))"
      ["secret_access_key"] = "((readonly_secret_access_key))"
      ["session_token"] = "((readonly_session_token))"
      ["region_name"] = "eu-west-1"
      ["aws_role_arn"] = "arn:aws:iam::((pay_aws_dev_account_id)):role/concourse"
      ["bucket"] = "pay-govuk-lambda-deploy"
      ["regexp"] = "pay-logging-firehose-transformation-v(.*).zip"
      ["skip_download"] = true
    }
  }

  new Pipeline.Resource {
    name = "pay-logging-s3-to-firehose-delivery"
    type = "s3"
    icon = "lambda"

    source = new {
      ["access_key_id"] = "((readonly_access_key_id))"
      ["secret_access_key"] = "((readonly_secret_access_key))"
      ["session_token"] = "((readonly_session_token))"
      ["region_name"] = "eu-west-1"
      ["aws_role_arn"] = "arn:aws:iam::((pay_aws_dev_account_id)):role/concourse"
      ["bucket"] = "pay-govuk-lambda-deploy"
      ["regexp"] = "pay-logging-s3-to-firehose-delivery-v(.*).zip"
      ["skip_download"] = true
    }
  }
}

jobs {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-dev/deploy-logging-pipeline.pkl")

  for (loggingEnv in loggingEnvironments) {
    getDeployJob(loggingEnv)

    when (loggingEnv.include_destroy_job) {
      getDestroyJob(loggingEnv)
    }

    when (loggingEnv.run_e2e_test_after_deploy) {
      getE2EJob(loggingEnv)
    }
  }
}

local function getDeployJob(loggingEnv: LoggingEnv): Job = new {
  name = "deploy-\(getEnvironmentOrAccount(loggingEnv))"
  plan = new {
    new InParallelStep {
      in_parallel = new Listing<Step> {
        getStep("pay-infra", true, loggingEnv.depends_on_job)
        getStep("pay-ci", false, "")
        getStep("pay-logging-firehose-transformation", true, loggingEnv.depends_on_job)
        getStep("pay-logging-s3-to-firehose-delivery", true, loggingEnv.depends_on_job)
      }
    }
    new shared_resources.AssumeConcourseRoleTask {
      aws_account_name = loggingEnv.account
      role_name = "logging-pipeline-concourse"
      output_name = "assume-role"
      session_name = "deploy-\(getEnvironmentOrAccount(loggingEnv))-logging-pipeline"
    }
    shared_resources.loadVarJson("role", "assume-role/assume-role.json")
    ...shared_resources_for_terraform.LoadTerraformVersionForTFRootSteps(loggingEnv.tf_root)
    new TaskStep {
      task = "deploy-logging-pipeline"
      file = "pay-ci/ci/tasks/deploy-logging-pipeline.yml"
      input_mapping = new {
        ["pay-infra"] = "pay-infra"
        ["pay-logging-firehose-transformation"] = "pay-logging-firehose-transformation"
        ["pay-logging-s3-to-firehose-delivery"] = "pay-logging-s3-to-firehose-delivery"
      }
      params = new {
        ...shared_resources_for_deploy_pipelines.getAWSAssumeRoleCreds()
        ["TERRAFORM_ACTION"] = "apply"
        ["TERRAFORM_PATH"] = loggingEnv.tf_root
      }
    }
  }
  on_success = shared_slack.paySlackNotification(
    new shared_slack.SlackNotificationConfig {
      is_a_success = true
      message = "Logging pipeline deployed successfully in \(getEnvironmentOrAccount(loggingEnv)) env"
    }
  )
  on_failure = shared_slack.paySlackNotification(
    new shared_slack.SlackNotificationConfig {
      message = "Logging pipeline deployment failed in \(getEnvironmentOrAccount(loggingEnv)) env"
      slack_channel_for_failure = "#govuk-pay-starling"
    }
  )
  on_error = shared_slack.paySlackNotification(
    new shared_slack.SlackNotificationConfig {
      message = "Error deploying logging pipeline in \(getEnvironmentOrAccount(loggingEnv)) env"
      slack_channel_for_failure = "#govuk-pay-starling"
    }
  )
}

local function getDestroyJob(loggingEnv: LoggingEnv): Job = new {
  name = "destroy-\(getEnvironmentOrAccount(loggingEnv))"
  plan = new {
    new InParallelStep {
      in_parallel = new Listing<Step> {
        getStep("pay-infra", false, "")
        getStep("pay-ci", false, "")
      }
    }
    new shared_resources.AssumeConcourseRoleTask {
      aws_account_name = loggingEnv.account
      role_name = "logging-pipeline-concourse"
      output_name = "assume-role"
      session_name = "destroy-logging-pipeline"
    }
    shared_resources.loadVarJson("role", "assume-role/assume-role.json")
    ...shared_resources_for_terraform.LoadTerraformVersionForTFRootSteps(loggingEnv.tf_root)
    new TaskStep {
      task = "deploy-logging-pipeline"
      file = "pay-ci/ci/tasks/deploy-logging-pipeline.yml"
      input_mapping = new {
        ["pay-infra"] = "pay-infra"
      }
      params = new {
        ...shared_resources_for_deploy_pipelines.getAWSAssumeRoleCreds()
        ["TERRAFORM_ACTION"] = "destroy"
        ["TERRAFORM_PATH"] = loggingEnv.tf_root
      }
    }
  }
}

local function getE2EJob(loggingEnv: LoggingEnv): Job = new {
  name = "e2e-test-logging-pipeline-in-\(getEnvironmentOrAccount(loggingEnv))-env"
  plan = new {
    new InParallelStep {
      in_parallel = new Listing<Step> {
        getStep("pay-ci", false, "deploy-\(getEnvironmentOrAccount(loggingEnv))")
        getStep("pay-infra", true, "deploy-\(getEnvironmentOrAccount(loggingEnv))")
        getStep("pay-logging-firehose-transformation", true, "deploy-\(getEnvironmentOrAccount(loggingEnv))")
        getStep("pay-logging-s3-to-firehose-delivery", true, "deploy-\(getEnvironmentOrAccount(loggingEnv))")
      }
    }
    new shared_resources.AssumeConcourseRoleTask {
      aws_account_name = loggingEnv.account
      role_name = "logging-pipeline-concourse"
      output_name = "assume-role"
      session_name = "\(getEnvironmentOrAccount(loggingEnv))-logging-pipeline"
    }
    shared_resources.loadVarJson("role", "assume-role/assume-role.json")
    new TaskStep {
      task = "run-logging-pipeline-e2e-test"
      file = "pay-ci/ci/tasks/run-logging-pipeline-e2e-test.yml"
      input_mapping = new {
        ["pay-ci"] = "pay-ci"
      }
      params = new {
        ["AWS_ACCOUNT_ID"] = "((pay_aws_\(loggingEnv.account)_account_id))"
        ["AWS_ACCOUNT_NAME"] = loggingEnv.account
        when (loggingEnv.account != "dev") {
          ["ENVIRONMENT"] = loggingEnv.environment
        }
        ["S3_OBJECT_PATH"] = "\(s3ObjectPathForEventNotification.getOrNull(loggingEnv.account))"
        ["AWS_DEFAULT_REGION"] = "eu-west-1"
        ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
        ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
        ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
      }
    }
  }
  on_success = shared_slack.paySlackNotification(
    new shared_slack.SlackNotificationConfig {
      is_a_success = true
      message = "Logging pipeline - e2e test job completed successfully in \(getEnvironmentOrAccount(loggingEnv)) environment"
    }
  )
  on_failure = shared_slack.paySlackNotification(
    new shared_slack.SlackNotificationConfig {
      message = "Logging pipeline - e2e test job failed in \(getEnvironmentOrAccount(loggingEnv)) environment"
      slack_channel_for_failure = "#govuk-pay-starling"
    }
  )
  on_error = shared_slack.paySlackNotification(
    new shared_slack.SlackNotificationConfig {
      message = "Logging pipeline - Error running e2e test in \(getEnvironmentOrAccount(loggingEnv)) environment"
      slack_channel_for_failure = "#govuk-pay-starling"
    }
  )
}

local function getStep(name: String, shouldTriggerJob: Boolean, dependsOnJob: String) = new GetStep {
  get = name
  trigger = shouldTriggerJob
  when (dependsOnJob != null && dependsOnJob.length > 0) {
    passed {
      dependsOnJob
    }
  }
}
