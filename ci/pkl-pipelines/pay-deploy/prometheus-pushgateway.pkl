amends "@concourse_pipeline/Pipeline.pkl"

import "@concourse_pipeline/TaskConfig.pkl"
import "../common/shared_resources.pkl"
import "../common/pipeline_self_update.pkl"

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/prometheus-pushgateway.pkl", "master")
  (shared_resources.payECRResource("ecr-prometheus-pushgateway", "pushgateway", "pay_aws_deploy_account_id")) {
    check_every = "never"
    source { ["tag"] = "v1.7.0" }
  }
  shared_resources.payECRResourceWithVariant("adot-ecr-registry-staging", "govukpay/adot", "pay_aws_staging_account_id", "release")
  shared_resources.payECRResourceWithVariant("adot-ecr-registry-deploy", "govukpay/adot", "pay_aws_deploy_account_id", "release")
  shared_resources.payDockerHubResource("prometheus-pushgateway-resource-dockerhub", "governmentdigitalservice/pay-prometheus-pushgateway-resource", "latest-master")
  (shared_resources.payDockerHubResource("prometheus-pushgateway", "prom/pushgateway", "v1.7.0")) {
    check_every = "1h"
  }
  shared_resources.payCiGitHubResource
  (shared_resources.payGithubResource("prometheus-pushgateway-resource-release", "pay-prometheus-pushgateway-resource")) {
    source { ["tag_regex"] = "alpha_release-(.*)" }
  }
  shared_resources.slackNotificationResource
}

resource_types = new {
  shared_resources.slackNotificationResourceType
}

jobs = new {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/prometheus-pushgateway.pkl")
  new {
    name = "push-adot-to-deploy-ecr"
    plan = new {
      getStep("adot-ecr-registry-staging", true, true)
      loadVar("application_image_tag", "adot-ecr-registry-staging/tag")
      putStep("adot-ecr-registry-deploy", "adot-ecr-registry-staging/image.tar", "adot-ecr-registry-staging/tag", true)
    }
  }
  new {
    name = "copy-prometheus-pushgateway"
    plan = new {
      getStep("prometheus-pushgateway", true, true)
      putStep("ecr-prometheus-pushgateway", "prometheus-pushgateway/image.tar", "", true)
    }
    on_failure = shared_resources.paySlackNotificationForFail("#govuk-pay-starling", "Failed copying pushgateway:v1.6.0 image from Docker Hub to ECR")
    on_success = shared_resources.paySlackNotificationForSuccess("#govuk-pay-activity", "Copied pushgateway:v1.6.0 image from Docker Hub to ECR")
  }
  new {
    name = "build-and-push-prometheus-pushgateway-resource"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          getStep("prometheus-pushgateway-resource-release", true, false)
          getStep("pay-ci", false, false)
        }
      }
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new TaskStep {
            task = "parse-release-tag"
            file = "pay-ci/ci/tasks/parse-release-tag.yml"
            input_mapping {
              ["git-release"] = "prometheus-pushgateway-resource-release"
            }
          }
          shared_resources.generateDockerCredsConfigStep
        }
      }
      new InParallelStep {
        in_parallel = new Listing<Step> {
          loadVar("release-name", "prometheus-pushgateway-resource-release/.git/ref")
          loadVar("release-tag", "tags/tags")
          loadVar("release-number", "tags/release-number")
          loadVar("release-sha", "tags/release-sha")
          loadVar("date", "tags/date")
        }
      }
      new TaskStep {
        task = "build-prometheus-pushgateway-resource"
        privileged = true
        params {
          ["CONTEXT"] = "prometheus-pushgateway-resource-release"
          ["DOCKER_CONFIG"] = "docker_creds"
          ["LABEL_release_number"] = "((.:release-number))"
          ["LABEL_release_name"] = "((.:release-name))"
          ["LABEL_release_sha"] = "((.:release-sha))"
          ["LABEL_build_date"] = "((.:date))"
        }
        config {
          platform = "linux"
          image_resource {
            type = "registry-image"
            source {
              ["repository"] = "concourse/oci-build-task"
            }
          }
          inputs = new Listing {
            new TaskConfig.Input { name = "prometheus-pushgateway-resource-release" }
            new TaskConfig.Input { name = "docker_creds" }
          }
          outputs = new Listing {
            new TaskConfig.Output { name = "image" }
          }
          run {
            path = "build"
          }
        }
      }
      putStep("prometheus-pushgateway-resource-dockerhub", "image/image.tar", "tags/tags", true)
    }
  }
}

local function loadVar(variable: String, fileName: String): LoadVarStep = new LoadVarStep {
  load_var = variable
  file = fileName
}

local function getStep(resourceName: String, shouldTrigger: Boolean, isOci: Boolean): GetStep = new GetStep {
  get = resourceName
  when (shouldTrigger) {
    trigger = true
  }
  when (isOci) {
    params {
      ["format"] = "oci"
    }
  }
}

local function putStep(resourceName: String, imageName: String, additionalTags: String, skipDownload: Boolean): PutStep = new PutStep {
  put = resourceName
  params {
    when (imageName.length > 0) {
      ["image"] = imageName
    }
    when (additionalTags.length > 0) {
      ["additional_tags"] = additionalTags
    }
  }
  get_params {
    when (skipDownload) {
      ["skip_download"] = true
    }
  }
}
