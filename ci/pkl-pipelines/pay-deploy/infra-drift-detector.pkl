amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/shared_resources_for_slack_notifications.pkl"
import "../common/PayResources.pkl"

local typealias SlackNotificationConfig = shared_resources_for_slack_notifications.SlackNotificationConfig

resource_types {
  shared_resources.slackNotificationResourceType
}
resources {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/infra-drift-detector.pkl", "master")
  shared_resources.payCiGitHubResource
  new PayResources.PayInfraGitHubResource {}
  shared_resources.slackNotificationResource
  new {
    name = "every-15-minutes"
    icon = "alarm"
    type = "time"
    source {
      ["interval"] = "15m"
    }
  }
  new {
    name = "every-morning-at-six"
    type = "time"
    icon = "alarm"
    source {
      ["start"] = "06:00"
      ["stop"] = "06:30"
      ["location"] = "Europe/London"
    }
  }
  new {
    name = "every-morning-at-six-thirty"
    type = "time"
    icon = "alarm"
    source {
      ["start"] = "06:30"
      ["stop"] = "07:00"
      ["location"] = "Europe/London"
    }
  }
  new {
    name = "every-morning-at-seven"
    type = "time"
    icon = "alarm"
    source {
      ["start"] = "07:00"
      ["stop"] = "07:30"
      ["location"] = "Europe/London"
    }
  }
}

jobs {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/infra-drift-detector.pkl")
for (env, time in Map("staging-2", "every-morning-at-six", "production-2", "every-morning-at-six-thirty", "deploy-tooling", "every-morning-at-seven")) {
  new {
    name = "\(env)-bastion"
    serial = true
     plan {
      new InParallelStep {
        in_parallel = new Listing<Step>{
          getStep("pay-ci")
          getStep("pay-infra")
          (getStep("\(time)")) { trigger = true }
        }
      }
      new TaskStep {
        task = "assume-role"
        file = "pay-ci/ci/tasks/assume-role.yml"
        params {
          when(env.split("-")[0] == "production") {
          ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_prod_account_id)):role/pay-concourse-bastion-read-only-\(env)"
          }
          else {
            ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_\(env.split("-")[0])_account_id)):role/pay-concourse-bastion-read-only-\(env)"
          }
          ["AWS_ROLE_SESSION_NAME"] = "pay-concourse-bastion-drift-detection"
        }
      }
      (loadVar("role", "assume-role/assume-role.json")) { format = "json" }
      new TaskStep {
        task = "check-for-drift"
        file = "pay-ci/ci/tasks/check-for-tf-drift.yml"
        params {
          ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
          ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
          ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
          ["DEPLOYMENT_PATH"] = "\(env.split("-")[0])/\(env)/environment/bastion"
        }
      }
    }
    on_failure = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig {
        message = "Terraform drift detected for $BUILD_JOB_NAME."
        slack_channel_for_failure = "#govuk-pay-starling"
      })
    on_error = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig {
        message = "Pipeline to detect Terraform drift for $BUILD_JOB_NAME failed to run."
        slack_channel_for_failure = "#govuk-pay-starling"
      })
    on_success = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig{
        is_a_success = true
        message = "Terraform state consistent for $BUILD_JOB_NAME."
      })
  }
}

  for (env in List("deploy", "staging", "production")) {
    new {
      name = "\(env)-check-for-zendesk-unsubscribers"
      plan {
        new InParallelStep {
          in_parallel = new Listing<Step>{
            (getStep("every-15-minutes")) { trigger = true }
            getStep("pay-ci")
            getStep("pay-infra")
          }
        }
        new TaskStep {
          task = "assume-role"
          file = "pay-ci/ci/tasks/assume-role.yml"
          attempts = 3
          params {
            when (env == "production") {
              ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_prod_account_id)):role/concourse"
            }
            else {
              ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_\(env)_account_id)):role/concourse"
            }
            ["AWS_ROLE_SESSION_NAME"] = "zendesk-unsubscriber-assume-role"
          }
        }
        (loadVar("role", "assume-role/assume-role.json")) { format = "json" }
        new TaskStep {
          task = "check-sns-subscriptions"
          file = "pay-ci/ci/tasks/check-sns-subscriptions.yml"
          attempts = 3
          params {
            ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
            ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
            ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
            ["AWS_REGION"] = "eu-west-1"
            ["AWS_DEFAULT_REGION"] = "eu-west-1"
            when (env=="deploy") {
              ["REGIONS"] = "eu-west-1 eu-central-1 us-east-1"
            }
            else {
              ["REGIONS"] = "eu-west-1 us-east-1"
            }
          }
        }
      }
    on_failure = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig {
        message = "SNS subscription check: An SNS topic subscriber is unsubscribed, or has an incorrect subscriber in \(env) - $BUILD_JOB_NAME."
        slack_channel_for_failure = "#govuk-pay-starling"
      })
    on_success = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig {
        is_a_success = true
        message = "SNS subscription check: SNS topic subscribers consistent in \(env) - $BUILD_JOB_NAME."
      })
    }
  }
}

local function getStep(name: String): GetStep = new GetStep {
  get = name
}

local function loadVar(variable: String, fileName: String): LoadVarStep = new LoadVarStep {
  load_var = variable
  file = fileName
}
