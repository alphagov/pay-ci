# This workflow checks that all the base images in a specified docker file are manifests and not images
#
# Usage:
# jobs:
#   validate-docker-image-is-manifest:
#     uses: alphagov/pay-ci/.github/workflows/_validate_docker_image_is_manifest.yml@master
#     with:
#       dockerfile: "Dockerfile"
#
name: Validate Docker Image is Manifest

on:
  workflow_call:
    inputs:
      dockerfile:
        description: "Filepath within the repo under test to the Dockerfile to be checked"
        required: false
        type: string
        default: "Dockerfile"

permissions:
  contents: read

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: "Check dockerfile '${{ inputs.dockerfile }}'"

    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          fetch-depth: 1
      - name: Validate base images are manifests
        run: |
          set -euo pipefail

          DOCKERFILE=${{ inputs.dockerfile }}

          while read -r BASE_CONTAINER_DEFINITION; do
            echo "Checking base container definition: $BASE_CONTAINER_DEFINITION"

            # Image definitions are going to be of one of the forms:
            #
            #   image_name:tag
            #   image_name:tag@sha256:<sha>
            #   image_name@sha256
            #
            IMAGE=$(cut -f 1 -d "@" <<<"$BASE_CONTAINER_DEFINITION")
            DIGEST=$(cut -f 2 -d "@" <<<"$BASE_CONTAINER_DEFINITION")

            if [ -z "$DIGEST" ]; then
              echo
              echo "Error There was no image digest in '$BASE_CONTAINER_DEFINITION'"
              echo "The FROM lines must have a digest pin in order to use this workflow"
              exit 1
            fi

            IMAGE_NAME=$(cut -f 1 -d ":" <<<"$IMAGE")
            IMAGE_TAG=$(cut -f 2 -d ":" <<<"$IMAGE")

            function bad_manifest_error {
              echo
              echo "All image sha pins must point to the image manifest, not to one of the architecture specific images"
              echo "This manifest must include a linux/amd64 image and a linux/arm64 image."
              echo "This is required so our multi-architecture builds can succeed"
              echo
              if [ -z "$IMAGE_TAG" ]; then
                echo "No image tag is specified in the FROM definition, so I can't lookup a potentially correct manifest sha for you"
                echo
                echo "To get this yourself run 'docker pull ${IMAGE_TAG}:<tag> | grep Digest'"
                echo
                echo "To validate that is a manifest you can run 'docker manifest inspect ${IMAGE_NAME}@<digest>', if you get a JSON blob from"
                echo "  this, then the sha is a manifest, however if it says 'manifest verification failed for digest <digest>' then it is not a manifest"
              else
                LIKELY_DIGEST=$(docker pull "${IMAGE_NAME}:${IMAGE_TAG}" 2>&1 | grep Digest | cut -f 2 -d " ")

                echo "It's likely the digest you need is '$LIKELY_DIGEST' based on a lookup of ${IMAGE_NAME}:${IMAGE_TAG}"
              fi
              echo
              echo "See the guide to updating base images in the pay team manual: https://manual.payments.service.gov.uk/manual/reference/docker.html#updating-docker-base-images"
              echo
              exit 1
            }


            TMPFILE=$(mktemp)

            function cleanup() {
              echo "Removing $TMPFILE"
              rm "$TMPFILE"
            }

            trap cleanup EXIT

            docker buildx imagetools inspect "$BASE_CONTAINER_DEFINITION" --raw > "$TMPFILE" 2>&1

            MEDIATYPE=$(jq --raw-output .mediaType < "$TMPFILE")
            if [[ "$MEDIATYPE" != "application/vnd.docker.distribution.manifest.list.v2+json" ]] && [[ "$MEDIATYPE" != "application/vnd.oci.image.index.v1+json" ]]; then
              echo
              echo "ERROR! The image specified by '$BASE_CONTAINER_DEFINITION' does not refer to a manifest"
              bad_manifest_error
            fi

            AMD64_IMAGE_COUNT=$(jq < "$TMPFILE" '(.manifests[] | select(.platform.os == "linux" and .platform.architecture == "amd64") | [.]) // [] | length')
            ARM64_IMAGE_COUNT=$(jq < "$TMPFILE" '(.manifests[] | select(.platform.os == "linux" and .platform.architecture == "arm64") | [.]) // [] | length')

            if [ "$AMD64_IMAGE_COUNT" -lt 1 ]; then
              echo "ERROR! The image specified by '$BASE_CONTAINER_DEFINITION' is a manifest but does not include a linux/amd64 container image"
              bad_manifest_error
            fi

            if [ "$ARM64_IMAGE_COUNT" -lt 1 ]; then
              echo "ERROR! The image specified by '$BASE_CONTAINER_DEFINITION' is a manifest but does not include a linux/arm64 container image"
              bad_manifest_error
            fi

            echo "Valid manifest for $BASE_CONTAINER_DEFINITION"
            echo
          done < <(grep "^FROM " "$DOCKERFILE" | awk '{ print $2; }' | sort | uniq)

          echo "All FROM lines in $DOCKERFILE point to valid manifests"
          echo
