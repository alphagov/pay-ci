#!/bin/ash
# shellcheck shell=dash

# Script for scanning ECR docker vulnerabilities with "docker scout cves"
# https://docs.docker.com/engine/reference/commandline/scout_cves/

# The report will be stored in reports/vulnerability_scan_report-YYYY-MM-DD.csv

if [ -z "${MANUAL_RUN+x}" ]; then
  export MANUAL_RUN="false"
fi

if [ "$MANUAL_RUN" != "true" ]; then
  cleanup() {
    echo "CLEANUP TRIGGERED"
    clean_docker
    stop_docker
    echo "CLEANUP COMPLETE"
  }

  trap cleanup EXIT
  source /docker-helpers.sh

  start_docker
else
  echo "Checking for required commands.."
  for cmd in "aws" "docker" "docker scout"; do
    # shellcheck disable=SC2086
    if ! command -v $cmd &>/dev/null; then
      echo "❌ '$cmd' command not found"
      exit 1
    else
      echo "✅ $cmd"
    fi
  done

  ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  echo "Logging into ECR.."
  aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin "${ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com"
fi

set -euo pipefail

ARCHITECTURE_TO_SCAN="linux/arm64"
IMAGES=""

mkdir -p reports
REPORTS_DESTINATION="$(pwd)/reports"

if [ "$MANUAL_RUN" != "true" ]; then
  cd pay-ci/ci/scripts/run-vulnerability-scan
  mkdir -p reports
fi

# Get a all ECS clusters
echo "Getting list of ECS clusters"
CLUSTERS=$(aws ecs list-clusters --query clusterArns --output text)

for CLUSTER in $CLUSTERS; do
  echo "Checking services in cluster $CLUSTER"
  SERVICES=$(aws ecs list-services --cluster "$CLUSTER" --query 'serviceArns' --output text | xargs -n1 | sort)

  for SERVICE in $SERVICES; do
    echo "Checking for container images in service $SERVICE"
    TASK_DEFINITION=$(
      aws ecs describe-services --cluster "$CLUSTER" --service "$SERVICE" --query 'services[].taskDefinition' --output text
    )
    CONTAINER_IMAGES=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION" --query 'taskDefinition.containerDefinitions[].image' --output text)
    for CONTAINER_IMAGE in $CONTAINER_IMAGES; do
      IMAGES="$IMAGES $CONTAINER_IMAGE"
    done
  done
done

IMAGES=$(echo "$IMAGES" | xargs -n1 | sort -u)

if [ "$MANUAL_RUN" != "true" ]; then
  aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"
  # Log in to dockerhub to run `docker scout`
  echo "$DOCKERHUB_ACCESS_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
fi

for IMAGE in $IMAGES; do
  SHORT_REPO_AND_TAG=$(echo "$IMAGE" | cut -d'/' -f 3)
  SHORT_REPO_NAME=$(echo "$SHORT_REPO_AND_TAG" | cut -f 1 -d ":")
  IMAGE_TAG=$(echo "$SHORT_REPO_AND_TAG" | cut -f 2 -d ":")

  echo "Scanning image $IMAGE"
  docker scout cves --format sarif --platform "$ARCHITECTURE_TO_SCAN" --output "reports/${SHORT_REPO_NAME}-${IMAGE_TAG}.json" "$IMAGE"
done

echo "Installing node dependencies"
npm install

echo
echo "|============================================================================================"
echo "| Generating vulnerability report"
echo "|============================================================================================"
node "generate_vulnerability_report.js"
echo "|============================================================================================"
echo

# Clean up report JSON files once done
echo "Removing JSON report files..."
rm -f reports/*.json

if [ "$MANUAL_RUN" != "true" ]; then
  # Copy to pass the output to next task
  cp reports/* "$REPORTS_DESTINATION"
  stop_docker
fi
