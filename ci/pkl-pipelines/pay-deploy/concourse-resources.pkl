amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/shared_resources_for_slack_notifications.pkl"

local class ConcourseResource {
  name: String
  git_branch: String
}

local concourse_resources = new Listing<ConcourseResource> {
  new { name = "pool-resource" git_branch = "master" }
  new { name = "cron-resource" git_branch = "main" }
}

resource_types {
  shared_resources_for_slack_notifications.slackNotificationResourceType
}

resources {
  for (concourse_resource in concourse_resources) {
    (shared_resources.payGithubResourceWithBranch("\(concourse_resource.name)-git-release", concourse_resource.name, concourse_resource.git_branch)) {
      source { ["tag_regex"] = "alpha_release-(.*)" }
    }
    shared_resources.payDockerHubResource(
      "\(concourse_resource.name)-dockerhub", "governmentdigitalservice/pay-\(concourse_resource.name)", "latest"
    )
  }
  shared_resources.payCiGitHubResource
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/concourse-resources.pkl", "master")
  shared_resources_for_slack_notifications.slackNotificationResource
}

jobs {
  for (concourse_resource in concourse_resources) {
    new {
      name = "build-and-push-\(concourse_resource.name)"
      plan {
        new InParallelStep {
          in_parallel = new Listing<Step> {
            new GetStep {
              get = "\(concourse_resource.name)-git-release"
              trigger = true
            }
            new GetStep { get = "pay-ci" }
          }
        }
        new TaskStep {
          task = "parse-release-tag"
          file = "pay-ci/ci/tasks/parse-release-tag.yml"
          input_mapping = new {
            ["git-release"] = "\(concourse_resource.name)-git-release"
          }
        }
        new InParallelStep {
          in_parallel = new InParallelConfig {
            steps = new Listing<Step> {
              loadVar("release-number", "tags/release-number")
              loadVar("release-name", "\(concourse_resource.name)-git-release/.git/ref")
              loadVar("release-sha", "tags/release-sha")
              loadVar("date", "tags/date")
              shared_resources.generateDockerCredsConfigStep
            }
          }
        }
        new TaskStep {
          task = "build-\(concourse_resource.name)"
          privileged = true
          params {
            ["CONTEXT"] = "\(concourse_resource.name)-git-release"
            ["DOCKER_CONFIG"] = "docker_creds"
            ["LABEL_release_number"] = "((.:release-number))"
            ["LABEL_release_name"] = "((.:release-name))"
            ["LABEL_release_sha"] = "((.:release-sha))"
            ["LABEL_build_date"] = "((.:date))"
            ["BUILD_ARG_base_image"] = "paketobuildpacks/run-jammy-base:latest"
          }
          config {
            platform = "linux"
            image_resource {
              type = "registry-image"
              source { ["repository"] = "concourse/oci-build-task" }
            }
            inputs {
              new { name = "\(concourse_resource.name)-git-release" }
              new { name = "docker_creds" }
            }
            outputs {
              new { name = "image" }
            }
            run { path = "build" }
          }
        }
        new PutStep {
          put = "\(concourse_resource.name)-dockerhub"
          params {
            ["image"] = "image/image.tar"
            ["additional_tags"] = "tags/all-release-tags"
          }
          get_params {
            ["skip_download"] = true
          }
        }
      }
      on_success = new PutStep {
        put = "slack-notification"
        attempts = 10
        params {
          ["channel"] = "#govuk-pay-activity"
          ["silent"] = true
          ["text"] = ":green-circle: \(concourse_resource.name) build and pushed to dockerhub successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
          ["icon_emoji"] = ":concourse:"
          ["username"] = "pay-concourse"
        }
      }
      on_failure = new PutStep {
        put = "slack-notification"
        attempts = 10
        params {
          ["channel"] = "#govuk-pay-announce"
          ["silent"] = true
          ["text"] = ":red-circle: \(concourse_resource.name) failed to build and push to dockerhub - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
          ["icon_emoji"] = ":concourse:"
          ["username"] = "pay-concourse"
        }
      }
    }
  }
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/concourse-resources.pkl")
}

local function loadVar(variable: String, fileName: String): LoadVarStep = new LoadVarStep {
  load_var = variable
  file = fileName
}