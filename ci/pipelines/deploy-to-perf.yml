definitions:
  array_anchors:
    - &load_app_name_from_parse_ecr_release_tag
      load_var: app_name
      file: ecr-release-info/app_name
    - &load_app_release_number_from_parse_ecr_release_tag
      load_var: app_release_number
      file: ecr-release-info/release-number
    - &load_adot_release_number_from_parse_ecr_release_tag
      load_var: adot_release_number
      file: adot-release-info/release-number
    - &load_nginx_release_number_from_parse_ecr_release_tag
      load_var: nginx_release_number
      file: nginx-release-info/release-number
    - &load_nginx_forward_proxy_release_number_from_parse_ecr_release_tag
      load_var: nginx_forward_proxy_release_number
      file: nginx-forward-proxy-release-info/release-number
    - &parse-adot-ecr-release-tag
      task: parse-adot-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: adot-ecr-registry-perf
      output_mapping:
        ecr-release-info: adot-release-info
    - &parse-nginx-ecr-release-tag
      task: parse-nginx-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: nginx-proxy-ecr-registry-perf
      output_mapping:
        ecr-release-info: nginx-release-info
    - &parse-nginx-forward-proxy-ecr-release-tag
      task: parse-nginx-forward-proxy-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: nginx-forward-proxy-ecr-registry-perf
      output_mapping:
        ecr-release-info: nginx-forward-proxy-release-info

  aws_assumed_role_creds: &aws_assumed_role_creds
    AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
    AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
    AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  wait_for_deploy_params: &wait_for_deploy_params
    <<: *aws_assumed_role_creds
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    ENVIRONMENT: test-perf-1

  deploy_params: &deploy_params
    <<: *aws_assumed_role_creds
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    ACCOUNT: test
    ENVIRONMENT: test-perf-1

  aws_test_config: &aws_test_config
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
    aws_ecr_registry_id: "((pay_aws_test_account_id))"
    aws_region: eu-west-1

  put_db_migration_slack_notification: &put_db_migration_slack_notification
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ":postgres:"
      username: pay-concourse
      text: ":postgres: starting $BUILD_JOB_NAME on test-perf-1\n
            - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_success_slack_notification: &put_db_migration_success_slack_notification
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":postgres:"
        username: pay-concourse
        text: ":green-circle: $BUILD_JOB_NAME completed successfully on test-perf-1\n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_failure_slack_notification: &put_db_migration_failure_slack_notification
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":postgres:"
        username: pay-concourse
        text: ":red-circle: $BUILD_JOB_NAME failed on test-perf-1\n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  slack_notification_success: &slack_notification_success
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: ":green-circle: Deployment of ((.:app_name)) to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  slack_notification_failure: &slack_notification_failure
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: ":red_circle: Deployment of ((.:app_name)) to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  pushgateway_default_labels: &pushgateway_default_labels
    pipeline: "$BUILD_PIPELINE_NAME"
    conocurse_job: "$BUILD_JOB_NAME"
    app: "((.:app_name))"
    environment: test-perf-1
    instance: "concourse"

  send_app_release_metric_success: &send_app_release_metric_success
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: "((.:app_release_number))"
      job: "deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success

  send_app_release_metric_failure: &send_app_release_metric_failure
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: "((.:app_release_number))"
      job: "deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure

  send_adot_release_metric_success: &send_adot_release_metric_success
    put: send-adot-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:adot_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success
        sidecar: adot

  send_adot_release_metric_failure: &send_adot_release_metric_failure
    put: send-adot-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:adot_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure
        sidecar: adot

  send_nginx_release_metric_success: &send_nginx_release_metric_success
    put: send-nginx-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success
        sidecar: nginx

  send_nginx_release_metric_failure: &send_nginx_release_metric_failure
    put: send-nginx-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure
        sidecar: nginx

  send_nginx_forward_proxy_release_metric_success: &send_nginx_forward_proxy_release_metric_success
    put: send-nginx-forward-proxy-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_forward_proxy_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx-forward-proxy/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success
        sidecar: nginx-forward-proxy

  send_nginx_forward_proxy_release_metric_failure: &send_nginx_forward_proxy_release_metric_failure
    put: send-nginx-forward-proxy-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_forward_proxy_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx-forward-proxy/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure
        sidecar: nginx-forward-proxy

  put_success_slack_and_metric_notification: &put_success_slack_and_metric_notification
    on_success:
      in_parallel:
          steps:
          - *slack_notification_success
          - *send_app_release_metric_success

  put_failure_slack_and_metric_notification: &put_failure_slack_and_metric_notification
    on_failure:
      in_parallel:
          steps:
          - *slack_notification_failure
          - *send_app_release_metric_failure

  put_success_slack_and_metric_notification_with_nginx_and_adot: &put_success_slack_and_metric_notification_with_nginx_and_adot
    on_success:
      in_parallel:
          steps:
          - *slack_notification_success
          - *send_app_release_metric_success
          - *send_nginx_release_metric_success
          - *send_adot_release_metric_success

  put_failure_slack_and_metric_notification_with_nginx_and_adot: &put_failure_slack_and_metric_notification_with_nginx_and_adot
    on_failure:
      in_parallel:
          steps:
          - *slack_notification_failure
          - *send_app_release_metric_failure
          - *send_nginx_release_metric_failure
          - *send_adot_release_metric_failure

  put_success_slack_and_metric_notification_with_nginx_and_adot_and_forward_proxy: &put_success_slack_and_metric_notification_with_nginx_and_adot_and_forward_proxy
    on_success:
      in_parallel:
          steps:
          - *slack_notification_success
          - *send_app_release_metric_success
          - *send_nginx_release_metric_success
          - *send_nginx_forward_proxy_release_metric_success
          - *send_adot_release_metric_success

  put_failure_slack_and_metric_notification_with_nginx_and_adot_and_forward_proxy: &put_failure_slack_and_metric_notification_with_nginx_and_adot_and_forward_proxy
    on_failure:
      in_parallel:
          steps:
          - *slack_notification_failure
          - *send_app_release_metric_failure
          - *send_nginx_release_metric_failure
          - *send_nginx_forward_proxy_release_metric_failure
          - *send_adot_release_metric_failure

resources:
  - name: prometheus-pushgateway
    type: prometheus-pushgateway
    source:
      url: https://prometheus-pushgateway.deploy.payments.service.gov.uk
      job: deployment_pipeline_release_number
  - name: deploy-to-perf-pipeline-definition
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/deploy-to-perf.yml
  - name: pay-ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
  - name: pay-infra
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-infra
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: adminusers-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: perf
      <<: *aws_test_config
  - name: adminusers-db-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: perf-db
      <<: *aws_test_config
  - name: frontend-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      variant: perf
      <<: *aws_test_config
  - name: products-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: perf
      <<: *aws_test_config
  - name: products-db-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: perf-db
      <<: *aws_test_config
  - name: products-ui-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      variant: perf
      <<: *aws_test_config
  - name: publicauth-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: perf
      <<: *aws_test_config
  - name: publicauth-db-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: perf-db
      <<: *aws_test_config
  - name: cardid-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      variant: perf
      <<: *aws_test_config
  - name: connector-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: perf
      <<: *aws_test_config
  - name: connector-db-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: perf-db
      <<: *aws_test_config
  - name: selfservice-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      variant: perf
      <<: *aws_test_config
  - name: publicapi-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      variant: perf
      <<: *aws_test_config
  - name: ledger-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: perf
      <<: *aws_test_config
  - name: ledger-db-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: perf-db
      <<: *aws_test_config
  - name: toolbox-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      variant: perf
      <<: *aws_test_config
  - name: adot-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adot
      variant: perf
      <<: *aws_test_config
  - name: nginx-proxy-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/docker-nginx-proxy
      variant: perf
      <<: *aws_test_config
  - name: nginx-forward-proxy-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/nginx-forward-proxy
      variant: perf
      <<: *aws_test_config
  - name: slack-notification
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-notification-secret))
  - name: egress-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/egress
      variant: egress-perf
      <<: *aws_test_config
  - name: webhooks-egress-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks-egress
      variant: perf
      <<: *aws_test_config
  - name: notifications-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/notifications
      variant: perf
      <<: *aws_test_config
  - name: alpine-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/alpine
      variant: perf
      <<: *aws_test_config
  - name: stream-s3-sqs-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stream-s3-sqs
      variant: perf
      <<: *aws_test_config
  - name: webhooks-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks
      variant: perf
      <<: *aws_test_config
  - name: webhooks-db-ecr-registry-perf
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks
      variant: perf-db
      <<: *aws_test_config

resource_types:
  - name: registry-image
    type: registry-image
    source:
      repository: concourse/registry-image-resource
      tag: "1.4.1"
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest
  - name: cf-cli
    type: registry-image
    source:
      repository: nulldriver/cf-cli-resource
  - name: prometheus-pushgateway
    type: docker-image
    source:
      repository: governmentdigitalservice/pay-prometheus-pushgateway-resource
      tag: latest-master

groups:
  - name: adminusers
    jobs:
      - deploy-adminusers-to-perf
      - adminusers-db-migration-perf
  - name: cardid
    jobs:
      - deploy-cardid-to-perf
  - name: connector
    jobs:
      - deploy-connector-to-perf
      - connector-db-migration-perf
  - name: egress
    jobs:
      - deploy-egress-to-perf
  - name: frontend
    jobs:
      - deploy-frontend-to-perf
  - name: ledger
    jobs:
      - deploy-ledger-to-perf
      - ledger-db-migration-perf
  - name: products
    jobs:
      - deploy-products-to-perf
      - products-db-migration-perf
  - name: products-ui
    jobs:
      - deploy-products-ui-to-perf
  - name: publicapi
    jobs:
      - deploy-publicapi-to-perf
  - name: publicauth
    jobs:
      - deploy-publicauth-to-perf
      - publicauth-db-migration-perf
  - name: selfservice
    jobs:
      - deploy-selfservice-to-perf
  - name: toolbox
    jobs:
      - deploy-toolbox-to-perf
  - name: webhooks
    jobs:
      - deploy-webhooks-to-perf
      - webhooks-db-migration-perf
  - name: webhooks-egress
    jobs:
      - deploy-webhooks-egress-to-perf
  - name: alpine
    jobs:
      - deploy-scheduled-tasks
  - name: notifications
    jobs:
      - deploy-notifications-to-perf
  - name: nginx-proxy
    jobs:
      - deploy-toolbox-to-perf
  - name: nginx-forward-proxy
    jobs:
      - deploy-frontend-to-perf
  - name: stream-s3-sqs
    jobs:
      - deploy-scheduled-tasks
  - name: update-deploy-to-perf-pipeline
    jobs:
      - update-deploy-to-perf-pipeline

jobs:
  - name: update-deploy-to-perf-pipeline
    plan:
      - get: deploy-to-perf-pipeline-definition
        trigger: true
      - set_pipeline: deploy-to-perf
        file: deploy-to-perf-pipeline-definition/ci/pipelines/deploy-to-perf.yml

  - name: deploy-adminusers-to-perf
    serial: true
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-perf
            trigger: true
          - get: adminusers-db-ecr-registry-perf
            trigger: true
          - get: nginx-proxy-ecr-registry-perf
            trigger: true
          - get: adot-ecr-registry-perf
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: adminusers-ecr-registry-perf
          - *parse-adot-ecr-release-tag
          - *parse-nginx-ecr-release-tag
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - *load_adot_release_number_from_parse_ecr_release_tag
          - *load_nginx_release_number_from_parse_ecr_release_tag
          - load_var: application_image_tag
            file: adminusers-ecr-registry-perf/tag
          - load_var: nginx_image_tag
            file: nginx-proxy-ecr-registry-perf/tag
          - load_var: adot_image_tag
            file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting adminusers deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: adminusers
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: adminusers
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: adminusers-db-migration-perf
    plan:
      - get: pay-ci
      - get: adminusers-db-ecr-registry-perf
        params:
          format: oci
        trigger: true
        passed: [deploy-adminusers-to-perf]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: db-migration-perf-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: adminusers-db-ecr-registry-perf/tag
      - task: start-adminusers-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-adminusers-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-perf-1-fargate"
            APP_NAME: "adminusers"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification
    ensure:
      task: stop-adminusers-db
      file: pay-ci/ci/tasks/stop-rds-instance.yml
      params:
        RDS_INSTANCE_NAME: test-perf-1-adminusers-rds-0
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: deploy-webhooks-to-perf
    serial: true
    plan:
      - get: webhooks-ecr-registry-perf
        trigger: true
      - get: webhooks-db-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting webhooks deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: webhooks
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of webhooks to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of webhooks to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: webhooks-db-migration-perf
    plan:
      - get: pay-ci
      - get: webhooks-db-ecr-registry-perf
        params:
          format: oci
        trigger: true
        passed: [deploy-webhooks-to-perf]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: db-migration-perf-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: webhooks-db-ecr-registry-perf/tag
      - task: start-webhooks-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-webhooks-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-perf-1-fargate"
            APP_NAME: "webhooks"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification
    ensure:
      task: stop-webhooks-db
      file: pay-ci/ci/tasks/stop-rds-instance.yml
      params:
        RDS_INSTANCE_NAME: test-perf-1-webhooks-rds-0
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: deploy-selfservice-to-perf
    serial: true
    plan:
      - get: selfservice-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting selfservice deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: selfservice
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: selfservice
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of selfservice to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of selfservice to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: deploy-connector-to-perf
    serial: true
    plan:
      - in_parallel:
          steps:
          - get: connector-ecr-registry-perf
            trigger: true
          - get: connector-db-ecr-registry-perf
            trigger: true
          - get: nginx-proxy-ecr-registry-perf
            trigger: true
          - get: adot-ecr-registry-perf
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - in_parallel:
          steps:
            - task: parse-ecr-release-tag
              file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
              input_mapping:
                ecr-image: connector-ecr-registry-perf
            - *parse-adot-ecr-release-tag
            - *parse-nginx-ecr-release-tag
      - in_parallel:
          steps:
            - *load_app_name_from_parse_ecr_release_tag
            - *load_app_release_number_from_parse_ecr_release_tag
            - *load_adot_release_number_from_parse_ecr_release_tag
            - *load_nginx_release_number_from_parse_ecr_release_tag
            - load_var: application_image_tag
              file: connector-ecr-registry-perf/tag
            - load_var: nginx_image_tag
              file: nginx-proxy-ecr-registry-perf/tag
            - load_var: adot_image_tag
              file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting connector deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: connector
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: connector
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: connector-db-migration-perf
    plan:
      - get: pay-ci
      - get: connector-db-ecr-registry-perf
        params:
          format: oci
        trigger: true
        passed: [deploy-connector-to-perf]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: db-migration-perf-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: connector-db-ecr-registry-perf/tag
      - task: start-connector-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-connector-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-perf-1-fargate"
            APP_NAME: "connector"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification
    ensure:
      task: stop-connector-db
      file: pay-ci/ci/tasks/stop-rds-instance.yml
      params:
        RDS_INSTANCE_NAME: test-perf-1-connector-rds-0
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: deploy-toolbox-to-perf
    serial: true
    plan:
      - get: toolbox-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: toolbox-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting toolbox deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: toolbox
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: toolbox
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of toolbox to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of toolbox to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: deploy-frontend-to-perf
    serial: true
    plan:
      - in_parallel:
          steps:
            - get: frontend-ecr-registry-perf
              trigger: true
            - get: nginx-forward-proxy-ecr-registry-perf
              trigger: true
            - get: nginx-proxy-ecr-registry-perf
              trigger: true
            - get: adot-ecr-registry-perf
              trigger: true
            - get: pay-infra
            - get: pay-ci
      - in_parallel:
          steps:
            - task: parse-ecr-release-tag
              file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
              input_mapping:
                ecr-image: frontend-ecr-registry-perf
            - *parse-adot-ecr-release-tag
            - *parse-nginx-ecr-release-tag
            - *parse-nginx-forward-proxy-ecr-release-tag
      - in_parallel:
          steps:
            - *load_app_name_from_parse_ecr_release_tag
            - *load_app_release_number_from_parse_ecr_release_tag
            - *load_adot_release_number_from_parse_ecr_release_tag
            - *load_nginx_release_number_from_parse_ecr_release_tag
            - *load_nginx_forward_proxy_release_number_from_parse_ecr_release_tag
            - load_var: application_image_tag
              file: frontend-ecr-registry-perf/tag
            - load_var: nginx_image_tag
              file: nginx-proxy-ecr-registry-perf/tag
            - load_var: nginx_forward_proxy_image_tag
              file: nginx-forward-proxy-ecr-registry-perf/tag
            - load_var: adot_image_tag
              file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting frontend deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-frontend-with-adot.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot_and_forward_proxy
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot_and_forward_proxy

  - name: deploy-products-to-perf
    serial: true
    plan:
      - get: products-ecr-registry-perf
        trigger: true
      - get: products-db-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting products deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: products
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of products to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of products to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: products-db-migration-perf
    plan:
      - get: pay-ci
      - get: products-db-ecr-registry-perf
        params:
          format: oci
        trigger: true
        passed: [deploy-products-to-perf]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: db-migration-perf-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: products-db-ecr-registry-perf/tag
      - task: start-products-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-products-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-perf-1-fargate"
            APP_NAME: "products"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification
    ensure:
      task: stop-products-db
      file: pay-ci/ci/tasks/stop-rds-instance.yml
      params:
        RDS_INSTANCE_NAME: test-perf-1-products-rds-0
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: deploy-products-ui-to-perf
    serial: true
    plan:
      - get: products-ui-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting products-ui deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: products-ui
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products-ui
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of products-ui to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of products-ui to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: deploy-publicauth-to-perf
    serial: true
    plan:
      - get: publicauth-ecr-registry-perf
        trigger: true
      - get: publicauth-db-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting publicauth deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: publicauth
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicauth
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of publicauth to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of publicauth to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: publicauth-db-migration-perf
    plan:
      - get: pay-ci
      - get: publicauth-db-ecr-registry-perf
        params:
          format: oci
        trigger: true
        passed: [deploy-publicauth-to-perf]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: db-migration-perf-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: publicauth-db-ecr-registry-perf/tag
      - task: start-publicauth-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-publicauth-rds-1
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-perf-1-fargate"
            APP_NAME: "publicauth"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification
    ensure:
      task: stop-publicauth-db
      file: pay-ci/ci/tasks/stop-rds-instance.yml
      params:
        RDS_INSTANCE_NAME: test-perf-1-publicauth-rds-1
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: deploy-cardid-to-perf
    serial: true
    plan:
      - in_parallel:
          steps:
          - get: cardid-ecr-registry-perf
            trigger: true
          - get: nginx-proxy-ecr-registry-perf
            trigger: true
          - get: adot-ecr-registry-perf
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: cardid-ecr-registry-perf
          - *parse-adot-ecr-release-tag
          - *parse-nginx-ecr-release-tag
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - *load_adot_release_number_from_parse_ecr_release_tag
          - *load_nginx_release_number_from_parse_ecr_release_tag
          - load_var: application_image_tag
            file: cardid-ecr-registry-perf/tag
          - load_var: nginx_image_tag
            file: nginx-proxy-ecr-registry-perf/tag
          - load_var: adot_image_tag
            file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting cardid deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: cardid
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: cardid
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: deploy-ledger-to-perf
    serial: true
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-perf
            trigger: true
          - get: ledger-db-ecr-registry-perf
            trigger: true
          - get: nginx-proxy-ecr-registry-perf
            trigger: true
          - get: adot-ecr-registry-perf
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: ledger-ecr-registry-perf
          - *parse-adot-ecr-release-tag
          - *parse-nginx-ecr-release-tag
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - *load_adot_release_number_from_parse_ecr_release_tag
          - *load_nginx_release_number_from_parse_ecr_release_tag
          - load_var: application_image_tag
            file: ledger-ecr-registry-perf/tag
          - load_var: nginx_image_tag
            file: nginx-proxy-ecr-registry-perf/tag
          - load_var: adot_image_tag
            file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting ledger deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: ledger
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: ledger
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: ledger-db-migration-perf
    plan:
      - get: pay-ci
      - get: ledger-db-ecr-registry-perf
        params:
          format: oci
        trigger: true
        passed: [deploy-ledger-to-perf]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: db-migration-perf-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: ledger-db-ecr-registry-perf/tag
      - task: start-ledger-db
        file: pay-ci/ci/tasks/start-rds-instance.yml
        params:
          RDS_INSTANCE_NAME: test-perf-1-ledger-rds-0
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-perf-1-fargate"
            APP_NAME: "ledger"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification
    ensure:
      task: stop-ledger-db
      file: pay-ci/ci/tasks/stop-rds-instance.yml
      params:
        RDS_INSTANCE_NAME: test-perf-1-ledger-rds-0
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  - name: deploy-publicapi-to-perf
    serial: true
    plan:
      - get: publicapi-ecr-registry-perf
        trigger: true
      - get: nginx-proxy-ecr-registry-perf
        trigger: true
      - get: adot-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-perf/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-perf/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting publicapi deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: publicapi
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicapi
          <<: *wait_for_deploy_params
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of publicapi to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of publicapi to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: deploy-egress-to-perf
    serial: true
    plan:
      - get: egress-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting egress deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-perf-1
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: test-perf-1
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of egress to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of egress to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: deploy-webhooks-egress-to-perf
    serial: true
    plan:
      - get: webhooks-egress-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-egress-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting webhooks-egress deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-webhooks-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-perf-1
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks-egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: test-perf-1
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of webhooks-egress to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of webhooks-egress to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"


  - name: deploy-notifications-to-perf
    serial: true
    plan:
      - get: notifications-ecr-registry-perf
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-perf/tag
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          icon_emoji: ":fargate:"
          username: pay-concourse
          text: ':rocket: Starting notifications deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        params:
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-perf-1
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
        config:
          platform: linux
          inputs:
            - name: pay-infra
          image_resource:
            type: registry-image
            source:
              repository: hashicorp/terraform
              tag: 1.3.7
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                cd pay-infra/provisioning/terraform/deployments/${ACCOUNT}/${ENVIRONMENT}/microservices_v2/notifications
                terraform init
                terraform apply \
                  -var notifications_image_tag=${APPLICATION_IMAGE_TAG} \
                  -auto-approve
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENVIRONMENT: test-perf-1
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":green-circle: Deployment of notifications to perf success - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: ":red_circle: Deployment of notifications to perf failed - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  - name: deploy-scheduled-tasks
    plan:
      - in_parallel:
        - get: alpine-ecr-registry-perf
          trigger: true
        - get: stream-s3-sqs-ecr-registry-perf
          trigger: true
        - get: pay-ci
        - get: pay-infra
      - in_parallel:
        - load_var: alpine_image_tag
          file: alpine-ecr-registry-perf/tag
        - load_var: stream_s3_sqs_image_tag
          file: stream-s3-sqs-ecr-registry-perf/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
            AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-perf
        file: pay-ci/ci/tasks/deploy-scheduled-tasks.yml
        params:
          APP_NAME: adminusers
          ALPINE_IMAGE_TAG: ((.:alpine_image_tag))
          STREAM_S3_SQS_IMAGE_TAG: ((.:stream_s3_sqs_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-perf-1
          <<: *aws_assumed_role_creds
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Scheduled tasks failed to deploy alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Scheduled tasks deployed alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
