amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"
import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"
import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/TaskConfig.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/PayResources.pkl"

local e2e_test_apps = new Listing {
  "adminusers"
  "cardid"
  "connector"
  "frontend"
  "ledger"
  "products"
  "products_ui"
  "publicapi"
  "publicauth"
  "selfservice"
} // end_to_end is different

local group_map = new Mapping {
  ["adminusers"] = new Listing<String> { "adminusers-e2e" }
  ["cardid"] = new Listing<String> { "cardid-e2e" }
  ["connector"] = new Listing<String> { "card-connector-e2e" }
  ["end_to_end"] = new Listing<String> { "endtoend-e2e" "pay-ci-endtoend-config" }
  ["frontend"] = new Listing<String> { "card-frontend-e2e" }
  ["ledger"] = new Listing<String> { "ledger-e2e" }
  ["products"] = new Listing<String> { "products-e2e" }
  ["products_ui"] = new Listing<String> { "products-ui-e2e" }
  ["publicapi"] = new Listing<String> { "publicapi-unit-test" "publicapi-integration-test" "publicapi-e2e" "publicapi-as-consumer-pact-test" }
  ["publicauth"] = new Listing<String> { "publicauth-e2e" }
  ["selfservice"] = new Listing<String> { "selfservice-e2e" }
  ["ci"] = new Listing<String> { "ci-pr-test" }
  ["update_pipeline"] = new Listing<String> { "update-pr-ci-pipeline" }
}

groups {
  for (_name, _jobs in group_map) { new Pipeline.Group { name = _name jobs = _jobs } }
}

jobs = new {
  e2eJob("cardid")
}

local function putStatus(stepName: String, context: String, status: String) = new PutStep {
  put = stepName 
  get_params = new { ["skip_download"] = true }
  params = new {
    ["context"] = context
    ["path"] = "src"
    ["status"] = status
  }
}

local function e2eJob(app: String) = new Job {
  name = "\(app)-e2e"
  max_in_flight = 3
  build_log_retention = new { builds = 500 }
  on_failure = putStatus("\(app)-pull-request", "e2e tests", "failure")
  plan {
    new GetStep {
      get = "src"
      params = new { ["integration_tool"] = "checkout" }
      resource = "\(app)-pull-request"
      trigger = true
      version = "every"
    }
    new InParallelStep {
      in_parallel = new Listing<Step> {
        new GetStep { get = "pay-ci" resource = "pay-ci" }
        putStatus("\(app)-pull-request", "e2e tests", "pending")
      }
    }
    new TaskStep {
      task = "update-submodule"
      config {
        image_resource { 
          // Sample output has a name property, but image_resource is anonymous according
          // to https://github.com/alphagov/pkl-concourse-pipeline/blob/pkl-concourse-pipeline%400.0.4/src/TaskConfig.pkl#L6
          type = "registry-image"
          source {
            ["repository"] = "governmentdigitalservice/pay-concourse-runner"
          }
        }
        inputs = new Listing { 
          new TaskConfig.Input { name = "src" }
        }
        outputs = new Listing { 
          new TaskConfig.Output { name = "src" }
        }
        params = new {
          ["GH_ACCESS_TOKEN"] = "((github-access-token))"
        }
        platform = "linux"
        // TODO extract to file
        run {
          path = "bash"
          dir = "src"
          args = new Listing {
            "-ec"
            """
        # rewrite the submodule url for https to add the token.
        # The risk of setting the token in the url is mitigated since these files are not committed,
        # the container is ephemeral and anyone with access to read the files could read the token from
        # environment variable. Furthermore we redact the token from the files after the update.
        sed -i "s/https://github.com/https://${GH_ACCESS_TOKEN}@github.com//" .gitmodules
        git submodule init -q data
        git submodule update data
        sed -i "s/${GH_ACCESS_TOKEN}/token_redacted/" .gitmodules
        sed -i "s/${GH_ACCESS_TOKEN}/token_redacted/" .git/config
        """
          }
        }
      }
    }
    shared_resources.generateDockerCredsConfigStep

    new TaskStep {
      task = "build-image"
      file = "pay-ci/ci/tasks/build-docker-image.yml"
      privileged = true
      params = new {
        ["app_name"] = "cardid"
      }
    }

    new InParallelStep {
      in_parallel = new Listing<Step> {
        new TaskStep {
          task = "get-docker-image-info"
          file = "pay-ci/ci/tasks/get-pr-build-docker-image-info.yml"
          params = new { ["app_name"] = "cardid" }
        }
        new TaskStep {
          task = "assume-role"
          file = "pay-ci/ci/tasks/assume-role.yml"
          params = new {
            ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12"
            ["AWS_ROLE_SESSION_NAME"] = "e2e-test-assume-role"
          }
        }
      }
    }
    new InParallelStep {
      in_parallel = new Listing<Step> {
        new LoadVarStep { load_var = "role" file = "assume-role/assume-role.json" }
        new LoadVarStep { load_var = "image_filename" file = "image_info/image_filename" }
        new LoadVarStep { load_var = "image_tag" file = "image_info/tag" }
      }
    }
    new InParallelStep {
      in_parallel = new Listing<Step> {
        new PutStep {
          put = "pull-request-builds-ecr"
          get_params = new { ["skip_download"] = true }
          params = new {
            ["additional_tags"] = "image_info/tag"
            ["image"] = "local_image/((.:image_filename))"
          }
        }
        prepareCodeBuild(app, "prepare-e2e-codebuild.yml", "((.:image_tag))") 
          |> withParam("PR_BUILD", "true")
      }
    }
    new InParallelStep {
      in_parallel = new Listing<Step> {
        runCodeBuild("run-card-e2e-tests", "card.json", 3)
        runCodeBuild("run-zap-tests", "zap.json", 3)
      }
    }
    putStatus("\(app)-pull-request", "e2e tests", "success")
  }
}

// TODO move this and mixin to common
local function prepareCodeBuild(project: String, taskFile: String, tag: String): TaskStep = new {
  task = "prepare-codebuild"
  file = "pay-ci/ci/tasks/\(taskFile)"
  params = new {
    ["PROJECT_UNDER_TEST"] = project
    ["RELEASE_TAG_UNDER_TEST"] = tag
    ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
    ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
    ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
  }
}

local function runCodeBuild(taskName: String, config: String, attemptCount: Int): TaskStep = new {
  task = taskName
  file = "pay-ci/ci/tasks/run-codebuild.yml"
  when (attemptCount != 1) {
    attempts = attemptCount
  }
  params = new {
    ["PATH_TO_CONFIG"] = "../../../../run-codebuild-configuration/\(config)"
    ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
    ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
    ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
  }
}

local function withParam(key: String, value: String) = new Mixin {
  params { [key] = value }
}
  /*
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-dev/pr-ci.pkl")

  new {
    name = "ci-pr-test"
    max_in_flight = 3
    build_log_retention = new { builds = 500 }
    plan {
      new GetStep {
        get = "src"
        params = new { ["integration_tool"] = "checkout" }
        resource = "ci-pull-request"
        trigger = true
        version = "every"
      }

      putStatus("ci-pull-request", "test", "pending")

      new TaskStep {
        task = "check-pipelines-and-tasks"
        config {
          platform = "linux"
          image_resource { 
            // Sample output has a name property, but image_resource is anonymous according
            // to https://github.com/alphagov/pkl-concourse-pipeline/blob/pkl-concourse-pipeline%400.0.4/src/TaskConfig.pkl#L6
            type = "registry-image"
            source {
              ["repository"] = "golang"
              ["tag"] = "1.20-alpine"
            }
          }
          inputs = new Listing { 
            new TaskConfig.Input { name = "src" }
          }
          // TODO extract to file
          run {
            path = "sh"
            dir = "src"
            args = new Listing {
              "-ec"
              """
          apk add git shellcheck
          go install github.com/alphagov/paas-cf/tools/pipecleaner@latest

          cd /tmp/

          echo "c7d331052a6bf552b017adf5288b8e162346157c  fly-7.6.0-linux-amd64.tgz" > fly-7.6.0-linux-amd64.tgz.sha1
          wget -c https://github.com/concourse/concourse/releases/download/v7.6.0/fly-7.6.0-linux-amd64.tgz -O fly-7.6.0-linux-amd64.tgz
          sha1sum -c fly-7.6.0-linux-amd64.tgz.sha1
          tar -O -zxf fly-7.6.0-linux-amd64.tgz > /usr/local/bin/fly
          chmod u+x /usr/local/bin/fly

          cd -

          pipecleaner --rubocop=false ci/tasks/*.yml

          find ci/pipelines -name '*.yml' | while read -r PIPELINE; do
            echo "Validating: $PIPELINE"
            fly validate-pipeline -c "$PIPELINE"
            echo
          done
          """
            }
          }
        }
        putStatus("ci-pull-request", "test", "failure")
      }

      putStatus("ci-pull-request", "test", "success")
    }
  }
}


resource_types {
  shared_resources.pullRequestResourceType // Concourse has v0.21, default is v0.23
}

local resource_apps = new {
  "adminusers"
  "cardid"
  "selfservice"
  "publicauth"
  "publicapi"
  "products"
  "products-ui"
  "ledger"
  "endtoend"
  "connector" // original calls it card-connector
  "frontend"  // original calls it card-fronted
}

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-dev/pr-ci.pkl", "master")
  githubRepo("card-connector-master", "pay-connector")
  githubRepo("ledger-master", "pay-ledger")
  shared_resources.payCiGitHubResource

  for (app in resource_apps) {
    new PayResources.PayGitHubPullRequestResource {
      name = "\(app)-pull-request" 
      repo = "pay-\(app)"
    }
  }
  new PayResources.PayGitHubPullRequestResource {
    name = "pay-ci-endtoend-config-pull-request" 
    repo = "pay-ci"
    source { ["paths"] = new Listing<String> { "ci/tasks/endtoend/" } }
  }
  new PayResources.PayGitHubPullRequestResource {
    name = "ci-pull-request" 
    repo = "pay-ci"
    source { ["paths"] = new Listing<String> { "ci/pipelines/*"  "ci/tasks/*"} }
  }

  new Pipeline.Resource {
    name = "pull-request-builds-ecr"
    icon = "docker"
    type = "registry-image"
    source = new {
      ["aws_access_key_id"] = "((readonly_access_key_id))"
      ["aws_ecr_registry_id"] = "((pay_aws_test_account_id))"
      ["aws_region"] = "eu-west-1"
      ["aws_role_arn"] = "arn:aws:iam::((pay_aws_test_account_id)):role/concourse"
      ["aws_secret_access_key"] = "((readonly_secret_access_key))"
      ["aws_session_token"] = "((readonly_session_token))"
      ["repository"] = "govukpay/pull-request-builds"
      ["tag"] = "latest"
    }
  }
}

local function githubRepo(_name: String, repo: String) = new Pipeline.Resource {
  type = "git"
  name = _name
  icon = "github"
  source = new {
    ["branch"] = "master"
    ["uri"] = "https://github.com/alphagov/\(repo)"
    }
}
*/
