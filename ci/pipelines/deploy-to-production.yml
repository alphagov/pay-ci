definitions:
  aws_assumed_role_creds: &aws_assumed_role_creds
    AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
    AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
    AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  wait_for_deploy_params: &wait_for_deploy_params
    <<: *aws_assumed_role_creds
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    ENVIRONMENT: production-2

  deploy_params: &deploy_params
    <<: *aws_assumed_role_creds
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    ACCOUNT: production
    ENVIRONMENT: production-2

  check_release_versions_params: &check_release_versions_params
    <<: *aws_assumed_role_creds
    AWS_REGION: "eu-west-1"
    CLUSTER_NAME: "production-2-fargate"
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))

  aws_prod_config: &aws_prod_config
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
    aws_ecr_registry_id: "((pay_aws_prod_account_id))"
    aws_region: eu-west-1

  aws_test_config: &aws_test_config
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse_deploy_worker_ecr_access
    aws_ecr_registry_id: "((pay_aws_test_account_id))"
    aws_region: eu-west-1

  put_start_slack_notification: &put_start_slack_notification
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: "((.:start_snippet)) \n\n
            <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_success_slack_notification_p1: &put_success_slack_notification_p1
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: "((.:success_snippet)) \n\n
              <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_success_slack_notification: &put_success_slack_notification
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: "((.:success_snippet)) \n\n
              Build: https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"

  put_failure_slack_notification: &put_failure_slack_notification
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":fargate:"
        username: pay-concourse
        text: "((.:failure_snippet)) \n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_slack_notification: &put_db_migration_slack_notification
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ":postgres:"
      username: pay-concourse
      text: ":postgres: starting $BUILD_JOB_NAME on production-2\n
            - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_success_slack_notification: &put_db_migration_success_slack_notification
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":postgres:"
        username: pay-concourse
        text: ":green-circle: $BUILD_JOB_NAME completed successfully on production-2\n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_failure_slack_notification: &put_db_migration_failure_slack_notification
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":postgres:"
        username: pay-concourse
        text: ":red-circle: $BUILD_JOB_NAME failed on production-2\n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  copy_to_eu_west_params: &copy_to_eu_west_params
    RELEASE_NUMBER:  ((.:release-number))
    SOURCE_ECR_REGISTRY: "((pay_aws_test_account_id)).dkr.ecr.eu-central-1.amazonaws.com"
    DESTINATION_ECR_REGISTRY: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    SOURCE_AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
    SOURCE_AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
    SOURCE_AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    SOURCE_REGION: eu-central-1
    DESTINATION_AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
    DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
    DESTINATION_AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    DESTINATION_REGION: eu-west-1

  retag_for_perf_test: &retag_for_perf_test
    DOCKER_LOGIN_ECR: 1
    AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
    AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
    AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
    AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))

  snippet_params_all_versions: &snippet_params_all_versions
    ENV: production-2
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))

  snippet_params_app_version: &snippet_params_app_version
    ENV: production-2
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))

  # Separate tasks for each combination of scenario/environment
  smoke-test-run-all-on-production: &smoke-test-run-all-on-production
    limit: 8
    steps:
      - task: run_create_card_payment_sandbox-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_sandbox_prod"
      - task: run_recurring_card_payment_sandbox-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "rec_card_sandbox_prod"
      - task: run_create_card_payment_worldpay_with_3ds2-production
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds2_prod"
      - task: run_create_card_payment_worldpay_with_3ds2_exemption-production
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds2ex_prod"
      - task: run_create_card_payment_worldpay_without_3ds-production
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_prod"
      - task: run_recurring_card_payment_worldpay-production
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "reccard_worldpay_prod"
      - task: run_cancel_card_payment_sandbox-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "cancel_sandbox_prod"
      - task: run_use_payment_link_sandbox-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "pymntlnk_sandbox_prod"
      - task: run_create_card_payment_stripe-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_stripe_prod"
      - task: run_create_card_payment_stripe_3ds-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_stripe_3ds_prod"
      - task: run_recurring_card_payment_stripe-production
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "rec_card_stripe_prod"
      - task: run_notifications_sandbox-prod
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "notifcatns_sndbx_prod"

resources:
  - name: deploy-to-prod-pipeline-definition
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/deploy-to-production.yml
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: pay-ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: pay-infra
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-infra
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: egress-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/egress
      variant: egress-release
      <<: *aws_prod_config      
  - name: adot-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adot
      variant: release
      <<: *aws_prod_config
  - name: alpine-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/alpine
      variant: release
      <<: *aws_prod_config
  - name: stream-s3-sqs-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stream-s3-sqs
      variant: release
      <<: *aws_prod_config
  - name: toolbox-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      variant: release
      <<: *aws_prod_config
  - name: frontend-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      variant: release
      <<: *aws_prod_config
  - name: adminusers-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: release
      <<: *aws_prod_config
  - name: products-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: release
      <<: *aws_prod_config
  - name: products-ui-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      variant: release
      <<: *aws_prod_config
  - name: publicauth-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: release
      <<: *aws_prod_config
  - name: cardid-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      variant: release
      <<: *aws_prod_config
  - name: connector-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: release
      <<: *aws_prod_config
  - name: selfservice-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      variant: release
      <<: *aws_prod_config
  - name: nginx-proxy-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/docker-nginx-proxy
      variant: release
      <<: *aws_prod_config
  - name: nginx-forward-proxy-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/nginx-forward-proxy
      variant: release
      <<: *aws_prod_config
  - name: ledger-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: release
      <<: *aws_prod_config
  - name: publicapi-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      variant: release
      <<: *aws_prod_config
  - name: notifications-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/notifications
      variant: release
      <<: *aws_prod_config
  - name: slack-notification
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-notification-secret))
  - name: webhooks-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks
      variant: release
      <<: *aws_prod_config
  - name: webhooks-egress-ecr-registry-prod
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks-egress
      variant: release
      <<: *aws_prod_config

resource_types:
  - name: registry-image
    type: registry-image
    source:
      repository: concourse/registry-image-resource
      tag: "1.4.1"
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

groups:
  - name: adminusers
    jobs:
      - deploy-adminusers-to-prod
      - smoke-test-adminusers-on-prod
      - retag-adminusers-image-for-test-perf
      - adminusers-pact-tag
      - adminusers-db-migration-prod
      - retag-adminusers-image-for-test-perf-db
  - name: cardid
    jobs:
      - deploy-cardid-to-prod
      - smoke-test-cardid-on-prod
      - cardid-pact-tag
      - retag-cardid-image-for-test-perf
  - name: connector
    jobs:
      - deploy-connector-to-prod
      - smoke-test-connector-on-prod
      - retag-connector-image-for-test-perf
      - connector-pact-tag
      - connector-db-migration-prod
      - retag-connector-image-for-test-perf-db
  - name: egress
    jobs:
      - deploy-egress-to-prod
      - smoke-test-egress-on-prod
      - retag-egress-image-for-test-perf
  - name: frontend
    jobs:
      - deploy-frontend-to-prod
      - smoke-test-frontend-on-prod
      - frontend-pact-tag
      - retag-frontend-image-for-test-perf
  - name: ledger
    jobs:
      - deploy-ledger-to-prod
      - smoke-test-ledger-on-prod
      - retag-ledger-image-for-test-perf
      - ledger-pact-tag
      - ledger-db-migration-prod
      - retag-ledger-image-for-test-perf-db
  - name: products
    jobs:
      - deploy-products-to-prod
      - smoke-test-products-on-prod
      - retag-products-image-for-test-perf
      - products-pact-tag
      - products-db-migration-prod
      - retag-products-image-for-test-perf-db
  - name: products-ui
    jobs:
      - deploy-products-ui-to-prod
      - smoke-test-products-ui-on-prod
      - products-ui-pact-tag
      - retag-products-ui-image-for-test-perf
  - name: publicapi
    jobs:
      - deploy-publicapi-to-prod
      - smoke-test-publicapi-on-prod
      - publicapi-pact-tag
      - retag-publicapi-image-for-test-perf
  - name: publicauth
    jobs:
      - deploy-publicauth-to-prod
      - smoke-test-publicauth-on-prod
      - retag-publicauth-image-for-test-perf
      - publicauth-db-migration-prod
      - retag-publicauth-image-for-test-perf-db
  - name: selfservice
    jobs:
      - deploy-selfservice-to-prod
      - smoke-test-selfservice-on-prod
      - selfservice-pact-tag
      - retag-selfservice-image-for-test-perf
  - name: toolbox
    jobs:
      - deploy-toolbox-to-prod
      - retag-toolbox-image-for-test-perf
  - name: webhooks
    jobs:
      - deploy-webhooks-to-prod
      - smoke-test-webhooks-on-prod
      - webhooks-pact-tag
      - webhooks-db-migration-prod
      - retag-webhooks-image-for-test-perf
      - retag-webhooks-image-for-test-perf-db
  - name: webhooks-egress
    jobs:
      - deploy-webhooks-egress-to-prod
      - smoke-test-webhooks-egress-on-prod
      - retag-webhooks-egress-image-for-test-perf
  - name: adot
    jobs:
      - retag-adot-image-for-test-perf
  - name: alpine
    jobs:
      - deploy-scheduled-tasks
      - retag-alpine-image-for-test-perf
  - name: nginx-forward-proxy
    jobs:
      - deploy-frontend-to-prod
      - retag-nginx-forward-proxy-image-for-test-perf
  - name: nginx-proxy
    jobs:
      - deploy-toolbox-to-prod
      - retag-nginx-proxy-image-for-test-perf
  - name: notifications
    jobs:
      - deploy-notifications-to-prod
      - smoke-test-notifications-on-prod
      - retag-notifications-for-test-perf
  - name: stream-s3-sqs
    jobs:
      - deploy-scheduled-tasks
      - retag-stream-s3-sqs-image-for-test-perf
  - name: update-deploy-to-prod-pipeline
    jobs:
      - update-deploy-to-prod-pipeline
  

jobs:
  - name: update-deploy-to-prod-pipeline
    plan:
      - get: deploy-to-prod-pipeline-definition
        trigger: true
      - set_pipeline: deploy-to-production
        file: deploy-to-prod-pipeline-definition/ci/pipelines/deploy-to-production.yml

  - name: deploy-egress-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: egress-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          APP_NAME: egress
          ACTION_NAME: Deployment
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: production-2
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success
      - load_var: start_snippet
        file: snippet/start    
      - <<: *put_start_slack_notification  
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "production-2-fargate"
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: production
          ENVIRONMENT: production-2
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: production-2
    <<: *put_success_slack_notification_p1      
    <<: *put_failure_slack_notification

  - name: smoke-test-egress-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: egress-ecr-registry-prod
        trigger: true
        passed: [deploy-egress-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          APP_NAME: egress
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-egress-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: egress-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-egress-on-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: egress-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: egress-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/egress"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/egress:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/egress:((.:release-number))-candidate"

  - name: deploy-selfservice-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: selfservice-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: selfservice
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: selfservice
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: selfservice
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: selfservice
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: selfservice
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-selfservice-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: selfservice-ecr-registry-prod
        trigger: true
        passed: [deploy-selfservice-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-selfservice-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: selfservice-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [selfservice-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: selfservice-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: selfservice-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/selfservice"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/selfservice:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/selfservice:((.:release-number))-candidate"

  - name: selfservice-pact-tag
    plan:
      - get: selfservice-ecr-registry-prod
        passed: [smoke-test-selfservice-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: selfservice-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: selfservice
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: selfservice
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: deploy-connector-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: connector-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: connector-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: connector
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: connector
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: connector
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: connector
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: connector
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-connector-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: connector-ecr-registry-prod
        trigger: true
        passed: [deploy-connector-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: connector-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-connector-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: connector-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [connector-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: connector-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: connector-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/connector"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:release-number))-candidate"
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:perf-tag))"

  - name: connector-pact-tag
    plan:
      - get: connector-ecr-registry-prod
        passed: [smoke-test-connector-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: connector-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: connector
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: connector
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: connector-db-migration-prod
    plan:
      - get: pay-ci
      - get: connector-ecr-registry-prod
        params:
          format: oci
        trigger: false
        passed: [deploy-connector-to-prod]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: connector-ecr-registry-prod/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "production-2-fargate"
            APP_NAME: "connector"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: retag-connector-image-for-test-perf-db
    plan:
      - in_parallel:
          steps:
          - get: connector-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [connector-db-migration-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: connector-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-db-release-tag.yml
            input_mapping:
              ecr-repo: connector-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-db-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/connector"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:release-number))-candidate"

  - name: deploy-toolbox-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: toolbox-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: toolbox-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: toolbox
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: toolbox
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: toolbox
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: toolbox
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: retag-toolbox-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: toolbox-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-toolbox-to-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: toolbox-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: toolbox-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/toolbox"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/toolbox:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/toolbox:((.:release-number))-candidate"

  - name: retag-nginx-proxy-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: nginx-proxy-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-toolbox-to-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: nginx-proxy-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: nginx-proxy-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/docker-nginx-proxy"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/docker-nginx-proxy:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/docker-nginx-proxy:((.:release-number))-candidate"

  - name: deploy-frontend-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: frontend-ecr-registry-prod
        trigger: true
      - get: nginx-forward-proxy-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: frontend-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: nginx_forward_proxy_image_tag
        file: nginx-forward-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: frontend
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: frontend
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-frontend-with-adot.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-frontend-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: frontend-ecr-registry-prod
        trigger: true
        passed: [deploy-frontend-to-prod]
      - get: nginx-forward-proxy-ecr-registry-prod
        trigger: true
        passed: [deploy-frontend-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: frontend-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-frontend-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: frontend-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [frontend-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: frontend-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: frontend-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/frontend"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/frontend:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/frontend:((.:release-number))-candidate"

  - name: retag-nginx-forward-proxy-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: nginx-forward-proxy-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-frontend-to-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: nginx-forward-proxy-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: nginx-forward-proxy-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/nginx-forward-proxy"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/nginx-forward-proxy:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/nginx-forward-proxy:((.:release-number))-candidate"

  - name: frontend-pact-tag
    plan:
      - get: frontend-ecr-registry-prod
        passed: [smoke-test-frontend-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: frontend-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: frontend
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: frontend
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: deploy-adminusers-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: adminusers-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: adminusers
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: adminusers
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: adminusers
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: adminusers
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: adminusers
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: adminusers-db-migration-prod
    plan:
      - get: pay-ci
      - get: adminusers-ecr-registry-prod
        params:
          format: oci
        trigger: false
        passed: [deploy-adminusers-to-prod]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: adminusers-ecr-registry-prod/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "production-2-fargate"
            APP_NAME: "adminusers"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: retag-adminusers-image-for-test-perf-db
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [adminusers-db-migration-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: adminusers-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-db-release-tag.yml
            input_mapping:
              ecr-repo: adminusers-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-db-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/adminusers"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:release-number))-candidate"
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:perf-tag))"
          
  - name: smoke-test-adminusers-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: adminusers-ecr-registry-prod
        trigger: true
        passed: [deploy-adminusers-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-adminusers-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [adminusers-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: adminusers-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: adminusers-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/adminusers"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:release-number))-candidate"
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:perf-tag))"

  - name: adminusers-pact-tag
    plan:
      - get: adminusers-ecr-registry-prod
        passed: [smoke-test-adminusers-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: adminusers-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: adminusers
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: adminusers
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: deploy-products-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: products-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: products
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: products
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-products-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: products-ecr-registry-prod
        trigger: true
        passed: [deploy-products-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-products-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: products-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [products-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: products-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: products-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/products"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:release-number))-candidate"

  - name: products-pact-tag
    plan:
      - get: products-ecr-registry-prod
        passed: [smoke-test-products-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: products-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: products-db-migration-prod
    plan:
      - get: pay-ci
      - get: products-ecr-registry-prod
        params:
          format: oci
        trigger: false
        passed: [deploy-products-to-prod]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: products-ecr-registry-prod/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "production-2-fargate"
            APP_NAME: "products"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: retag-products-image-for-test-perf-db
    plan:
      - in_parallel:
          steps:
          - get: products-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [products-db-migration-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: products-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-db-release-tag.yml
            input_mapping:
              ecr-repo: products-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-db-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/products"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:release-number))-candidate"

  - name: deploy-products-ui-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: products-ui-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products-ui
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products-ui
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: products-ui
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: products-ui
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products-ui
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-products-ui-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: products-ui-ecr-registry-prod
        trigger: true
        passed: [deploy-products-ui-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-products-ui-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: products-ui-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [products-ui-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: products-ui-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: products-ui-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/products-ui"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products-ui:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products-ui:((.:release-number))-candidate"

  - name: products-ui-pact-tag
    plan:
      - get: products-ui-ecr-registry-prod
        passed: [smoke-test-products-ui-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: products-ui-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products-ui
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products-ui
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: deploy-publicauth-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: publicauth-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicauth
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: publicauth
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: publicauth
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicauth
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: publicauth-db-migration-prod
    plan:
      - get: pay-ci
      - get: publicauth-ecr-registry-prod
        params:
          format: oci
        trigger: false
        passed: [deploy-publicauth-to-prod]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: publicauth-ecr-registry-prod/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "production-2-fargate"
            APP_NAME: "publicauth"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: retag-publicauth-image-for-test-perf-db
    plan:
      - in_parallel:
          steps:
          - get: publicauth-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [publicauth-db-migration-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: publicauth-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: publicauth-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/publicauth"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:release-number))-candidate"

  - name: smoke-test-publicauth-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: publicauth-ecr-registry-prod
        trigger: true
        passed: [deploy-publicauth-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicauth
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-publicauth-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: publicauth-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-publicauth-on-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: publicauth-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-db-release-tag.yml
            input_mapping:
              ecr-repo: publicauth-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-db-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/publicauth"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:release-number))-candidate"

  - name: deploy-cardid-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: cardid-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: cardid
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: cardid
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: cardid
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: cardid
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: cardid
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-cardid-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: cardid-ecr-registry-prod
        trigger: true
        passed: [deploy-cardid-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: cardid-pact-tag
    plan:
      - get: cardid-ecr-registry-prod
        passed: [smoke-test-cardid-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: cardid-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: cardid
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: cardid
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-cardid-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: cardid-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [cardid-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: cardid-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: cardid-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/cardid"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/cardid:((.:release-number))-candidate"
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/cardid:((.:perf-tag))"

  - name: deploy-publicapi-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: publicapi-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: publicapi
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: publicapi
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: publicapi
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: publicapi
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicapi
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-publicapi-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: publicapi-ecr-registry-prod
        trigger: true
        passed: [deploy-publicapi-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-publicapi-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: publicapi-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [publicapi-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: publicapi-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: publicapi-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/publicapi"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicapi:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicapi:((.:release-number))-candidate"

  - name: publicapi-pact-tag
    plan:
      - get: publicapi-ecr-registry-prod
        passed: [smoke-test-publicapi-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: publicapi-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: publicapi
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: publicapi
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: deploy-ledger-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: ledger-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: ledger
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: ledger
          PACT_TAG: production-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: ledger
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: ledger
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: ledger
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-ledger-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: ledger-ecr-registry-prod
        trigger: true
        passed: [deploy-ledger-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: retag-ledger-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [ledger-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: ledger-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: ledger-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/ledger"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:release-number))-candidate"

  - name: ledger-pact-tag
    plan:
      - get: ledger-ecr-registry-prod
        passed: [smoke-test-ledger-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: ledger-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: ledger
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: ledger
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: ledger-db-migration-prod
    plan:
      - get: pay-ci
      - get: ledger-ecr-registry-prod
        params:
          format: oci
        trigger: false
        passed: [deploy-ledger-to-prod]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: ledger-ecr-registry-prod/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "production-2-fargate"
            APP_NAME: "ledger"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: retag-ledger-image-for-test-perf-db
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [ledger-db-migration-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: ledger-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-db-release-tag.yml
            input_mapping:
              ecr-repo: ledger-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-db-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/ledger"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:release-number))-candidate"

  - name: deploy-notifications-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: notifications-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          ACTION_NAME: Deployment
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: production-2
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success 
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-production-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "production-2-fargate"
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-production
        params:
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: production
          ENVIRONMENT: production-2
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
        config:
          platform: linux
          inputs:
            - name: pay-infra
          image_resource:
            type: registry-image
            source:
              repository: hashicorp/terraform
              tag: 1.3.7
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                cd pay-infra/provisioning/terraform/deployments/${ACCOUNT}/${ENVIRONMENT}/microservices_v2/notifications
                terraform init
                terraform apply \
                  -var notifications_image_tag=${APPLICATION_IMAGE_TAG} \
                  -auto-approve
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENVIRONMENT: production-2
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-notifications-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: notifications-ecr-registry-prod
        trigger: true
        passed: [deploy-notifications-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          ACTION_NAME: Smoke test
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: production-2
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-notifications-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: notifications-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-notifications-on-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: notifications-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: notifications-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/notifications"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/notifications:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/notifications:((.:release-number))-candidate"

  - name: deploy-scheduled-tasks
    plan:
      - in_parallel:
        - get: alpine-ecr-registry-prod
          trigger: true
        - get: stream-s3-sqs-ecr-registry-prod
          trigger: true
        - get: pay-ci
        - get: pay-infra
      - in_parallel:
        - load_var: alpine_image_tag
          file: alpine-ecr-registry-prod/tag
        - load_var: stream_s3_sqs_image_tag
          file: stream-s3-sqs-ecr-registry-prod/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
            AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-scheduled-tasks.yml
        params:
          APP_NAME: adminusers
          ALPINE_IMAGE_TAG: ((.:alpine_image_tag))
          STREAM_S3_SQS_IMAGE_TAG: ((.:stream_s3_sqs_image_tag))
          ACCOUNT: production
          ENVIRONMENT: production-2
          <<: *aws_assumed_role_creds
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Scheduled tasks failed to deploy alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Scheduled tasks deployed alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: retag-alpine-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: alpine-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-scheduled-tasks]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: alpine-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: alpine-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/alpine"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/alpine:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/alpine:((.:release-number))-candidate"

  - name: retag-stream-s3-sqs-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: stream-s3-sqs-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-scheduled-tasks]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: stream-s3-sqs-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: stream-s3-sqs-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/stream-s3-sqs"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/stream-s3-sqs:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/stream-s3-sqs:((.:release-number))-candidate"

  - name: deploy-webhooks-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: webhooks-ecr-registry-prod
        trigger: true
      - get: nginx-proxy-ecr-registry-prod
        trigger: true
      - get: adot-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-ecr-registry-prod/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-prod/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: webhooks
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: webhooks
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: webhooks
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-webhooks-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: webhooks-ecr-registry-prod
        trigger: true
        passed: [deploy-webhooks-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: webhooks-pact-tag
    plan:
      - get: webhooks-ecr-registry-prod
        passed: [smoke-test-webhooks-on-prod]
        trigger: true
      - load_var: application_image_tag
        file: webhooks-ecr-registry-prod/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: webhooks
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: webhooks
          PACT_TAG: production-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-webhooks-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: webhooks-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [webhooks-pact-tag]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: webhooks-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: webhooks-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/webhooks"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:release-number))-candidate"

  - name: webhooks-db-migration-prod
    plan:
      - get: pay-ci
      - get: webhooks-ecr-registry-prod
        params:
          format: oci
        trigger: false
        passed: [deploy-webhooks-to-prod]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: webhooks-ecr-registry-prod/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "production-2-fargate"
            APP_NAME: "webhooks"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: retag-webhooks-image-for-test-perf-db
    plan:
      - in_parallel:
          steps:
          - get: webhooks-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [webhooks-db-migration-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: webhooks-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-db-release-tag.yml
            input_mapping:
              ecr-repo: webhooks-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-db-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/webhooks"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:release-number))-candidate"

  - name: deploy-webhooks-egress-to-prod
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: webhooks-egress-ecr-registry-prod
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-egress-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          APP_NAME: webhooks-egress
          ACTION_NAME: Deployment
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: production-2
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success
      - load_var: start_snippet
        file: snippet/start
      - <<: *put_start_slack_notification
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-prod-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "production-2-fargate"
          APP_NAME: webhooks-egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-prod
        file: pay-ci/ci/tasks/deploy-webhooks-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: production
          ENVIRONMENT: production-2
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks-egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: production-2
    <<: *put_success_slack_notification_p1
    <<: *put_failure_slack_notification

  - name: smoke-test-webhooks-egress-on-prod
    serial_groups: [smoke-test]
    plan:
      - get: webhooks-egress-ecr-registry-prod
        trigger: true
        passed: [deploy-webhooks-egress-to-prod]
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-egress-ecr-registry-prod/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks-egress
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-production
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: retag-webhooks-egress-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: webhooks-egress-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-webhooks-egress-on-prod]
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: webhooks-egress-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: webhooks-egress-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/webhooks-egress"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks-egress:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks-egress:((.:release-number))-candidate"

  - name: retag-adot-image-for-test-perf
    plan:
      - in_parallel:
          steps:
          - get: adot-ecr-registry-prod
            params:
              skip_download: true
              format: oci
            trigger: true
          - get: pay-ci
      - in_parallel:
          steps:
          - task: parse-ecr-release-tag
            file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
            input_mapping:
              ecr-image: adot-ecr-registry-prod
          - task: parse-perf-release-tag
            file: pay-ci/ci/tasks/parse-perf-release-tag.yml
            input_mapping:
              ecr-repo: adot-ecr-registry-prod
      - in_parallel:
          steps:
          - load_var: release-number
            file: ecr-release-info/release-number
          - load_var: perf-tag
            file: parse-perf-release-tag/tag
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-perf
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: copy-images-to-eu-west
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/adot"
          <<: *copy_to_eu_west_params
      - task: retag-candidate-as-perf-in-ecr
        file: pay-ci/ci/tasks/manifest-retag.yml
        params:
          <<: *retag_for_perf_test
          NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adot:((.:perf-tag))"
          SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adot:((.:release-number))-candidate"
