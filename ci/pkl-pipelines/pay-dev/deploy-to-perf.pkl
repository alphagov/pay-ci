amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/shared_resources_for_metrics.pkl"
import "../common/shared_resources_for_slack_notifications.pkl"
import "../common/shared_resources_for_deploy_pipelines.pkl"
import "../common/shared_resources_for_annotations.pkl"
import "../common/shared_resources_for_terraform.pkl"
import "../common/PayResources.pkl"

local typealias PayApp = shared_resources_for_deploy_pipelines.PayApplication
local typealias SlackNotificationConfig = shared_resources_for_slack_notifications.SlackNotificationConfig

local payScheduledTask = shared_resources_for_deploy_pipelines.payScheduledTask
local allPayApplications = shared_resources_for_deploy_pipelines.allPayApplications
local payApplicationsWithDB = shared_resources_for_deploy_pipelines.payApplicationsWithDB

local awsEnvVars = Map("account", "test",
  "environment", "test-perf-1")

resource_types {
  shared_resources_for_slack_notifications.slackNotificationResourceType
  shared_resources_for_metrics.prometheusPushgatewayResourceType
  shared_resources_for_annotations.grafanaAnnotationResourceType 
}

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-dev/deploy-to-perf.pkl", "master")
  shared_resources_for_metrics.prometheusPushgatewayResource
  shared_resources.payCiGitHubResource
  new PayResources.PayInfraGitHubResource {}
  shared_resources.payECRResourceWithVariant("adot-ecr-registry-perf", "govukpay/adot", "pay_aws_test_account_id", "perf")
  for (app in allPayApplications) {
    when (app.name != "adot") {
      shared_resources.payECRResourceWithVariant("\(app.name)-ecr-registry-perf", "govukpay/\(if (app.override_ecr_repo == null) app.name else app.override_ecr_repo)", "pay_aws_test_account_id", "perf")
      when (app.has_db) {
        shared_resources.payECRResourceWithVariant("\(app.name)-db-ecr-registry-perf", "govukpay/\(app.name)", "pay_aws_test_account_id", "perf-db")
      }
    }
  }
  shared_resources_for_slack_notifications.slackNotificationResource
  (shared_resources_for_annotations.grafanaAnnotationResource) {
    source { ["tags"] = new Listing<String> { "release" "test-perf-1" } }
  }
}

groups {
  for (app in allPayApplications) {
    when (app.name != "adot") {
      new {
        name = app.name
        jobs = new Listing {
          when (app.override_app_to_deploy != null) {
            when (app.override_app_to_deploy == "scheduled-tasks") {
              "deploy-\(app.override_app_to_deploy)"
            } else {
              "deploy-\(app.override_app_to_deploy)-to-perf"
            }
          } else {
            "deploy-\(app.name)-to-perf"
          }
          when (app.has_db) {
            "\(app.name)-db-migration-perf"
          }
        }
      }
    }
  }
  pipeline_self_update.payPipelineSelfUpdateGroup
}

jobs {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-dev/deploy-to-perf.pkl")
  for (app in allPayApplications) {
    when (app.override_app_to_deploy == null && app.name != "adot") {
      new {
        name = "deploy-\(app.name)-to-perf"
        serial = true
        plan {
          new InParallelStep { in_parallel = getResourcesToDeployApp(app) }
          new InParallelStep { in_parallel = parseReleaseTagsToDeployApp(app) }
          new InParallelStep { in_parallel = loadVariablesToDeployApp(app) }
          new PutStep {
            put = "slack-notification"
            params = new Mapping {
              ["channel"] = "#govuk-pay-activity"
              ["text"] = ":rocket: Starting \(app.name) deployment to perf - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
              ["icon_emoji"] = ":fargate:"
              ["username"] = "pay-concourse"
            }
          }
          assumeRole("terraform-test-assume-role")
          (loadVar("role", "assume-role/assume-role.json")) { format = "json" }
          ...shared_resources_for_terraform.LoadTerraformVersionForTFRootSteps(app.getTerraformRootPath("test-perf-1"))
          shared_resources_for_deploy_pipelines.deployApplicationTask(app,
            awsEnvVars, "deploy-to-perf")
          shared_resources_for_annotations.paySendAppReleaseAnnotation("deploy-to-perf")
          shared_resources_for_deploy_pipelines.waitForDeployTask(app, "test-perf-1")
        }
        on_success = sendSlackNoticationAndPutMetrics(app, true)
        on_failure = sendSlackNoticationAndPutMetrics(app, false)
      }
    }
  }
  for (app in payApplicationsWithDB) {
    new {
      name = "\(app.name)-db-migration-perf"
      plan {
        new InParallelStep { in_parallel = getResourcesToRunDbMigrations(app) }
        assumeRole("db-migration-perf-test-assume-role")
        new InParallelStep {
          in_parallel = new Listing {
            (loadVar("role", "assume-role/assume-role.json")) { format = "json" }
            loadVar("application_image_tag", "\(app.name)-db-ecr-registry-perf/tag")
          }
        }
        startDatabase(app)
        shared_resources_for_slack_notifications.paySlackNotificationForDBMigration("#govuk-pay-activity", "test-perf-1")
        shared_resources_for_deploy_pipelines.runDBMigrationsTask(app, "test-perf-1-fargate")
      }
      on_success = shared_resources_for_slack_notifications.paySlackNotificationForDBMigrationStatus("#govuk-pay-activity", true, "test-perf-1")
      on_failure = shared_resources_for_slack_notifications.paySlackNotificationForDBMigrationStatus("#govuk-pay-announce", false, "test-perf-1")
      ensure = stopDatabase(app)
    }
  }
  new {
    name = "deploy-scheduled-tasks"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          getStep("alpine-ecr-registry-perf", true)
          getStep("stream-s3-sqs-ecr-registry-perf", true)
          getStep("pay-ci", false)
          getStep("pay-infra", false)
        }
      }
      new InParallelStep {
        in_parallel = new Listing {
          loadVar("alpine_image_tag", "alpine-ecr-registry-perf/tag")
          loadVar("stream_s3_sqs_image_tag", "stream-s3-sqs-ecr-registry-perf/tag")
          assumeRole("terraform-test-assume-role")
        }
      }
      (loadVar("role", "assume-role/assume-role.json")) { format = "json" }
      ...shared_resources_for_terraform.LoadTerraformVersionForTFRootSteps("pay-infra/provisioning/terraform/deployments/test/test-perf-1/management/scheduled_http_v2")
      shared_resources_for_deploy_pipelines.deployApplicationTask(payScheduledTask,
        awsEnvVars, "deploy-to-perf")
    }
    on_failure = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig {
        message = "Scheduled tasks failed to deploy alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag))" })
    on_success = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig {
        is_a_success = true
        message = "Scheduled tasks deployed alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) successfully" })
  }
}

local function getResourcesToDeployApp(app: PayApp): Listing<Step> = new Listing<Step> {
  getStep("\(app.name)-ecr-registry-perf", true)

  when (app.has_db) {
    getStep("\(app.name)-db-ecr-registry-perf", true)
  }

  when (app.name == "frontend") {
    getStep("nginx-forward-proxy-ecr-registry-perf", true)
  }

  when (app.is_a_java_or_node_app) {
    getStep("nginx-proxy-ecr-registry-perf", true)
    getStep("adot-ecr-registry-perf", true)
  }

  getStep("pay-infra", false)
  getStep("pay-ci", false)
}

local function loadVariablesToDeployApp(app: PayApp): Listing<Step> = new Listing<Step> {
  loadVar("app_name", "ecr-release-info/app_name")
  loadVar("app_release_number", "ecr-release-info/release-number")
  loadVar("application_image_tag", "\(app.name)-ecr-registry-perf/tag")

  when (app.is_a_java_or_node_app == true) {
    loadVar("adot_image_tag", "adot-ecr-registry-perf/tag")
    loadVar("adot_release_number", "adot-release-info/release-number")
    loadVar("nginx_image_tag", "nginx-proxy-ecr-registry-perf/tag")
    loadVar("nginx_release_number", "nginx-release-info/release-number")
  }

  when (app.name == "frontend") {
    loadVar("nginx_forward_proxy_release_number", "nginx-forward-proxy-release-info/release-number")
    loadVar("nginx_forward_proxy_image_tag", "nginx-forward-proxy-ecr-registry-perf/tag")
  }
}

local function parseReleaseTag(appName: String, includeOutputMapping: Boolean) = new TaskStep {
  task = "parse-\(appName)-ecr-release-tag"
  file = "pay-ci/ci/tasks/parse-ecr-release-tag.yml"
  input_mapping = new {
    ["ecr-image"] = "\(appName)-ecr-registry-perf"
  }
  when (includeOutputMapping) {
    local releaseInfoPrefix = if (appName == "nginx-proxy") "nginx" else appName
    output_mapping = new {
      ["ecr-release-info"] = "\(releaseInfoPrefix)-release-info"
    }
  }
}

local function parseReleaseTagsToDeployApp(app: PayApp): Listing<Step> = new Listing<Step> {
  parseReleaseTag(app.name, false)

  when (app.is_a_java_or_node_app == true) {
    parseReleaseTag("adot", true)
    parseReleaseTag("nginx-proxy", true)
  }

  when (app.name == "frontend") {
    parseReleaseTag("nginx-forward-proxy", true)
  }
}

local function startDatabase(app: PayApp) = new TaskStep {
  task = "start-\(app.name)-db"
  file = "pay-ci/ci/tasks/start-rds-instance.yml"
  params {
    ["RDS_INSTANCE_NAME"] = "test-perf-1-\(app.name)-rds-\(app.rds_identifier_suffix)"
    ...getAWSAssumeRoleCreds()
  }
}

local function stopDatabase(app: PayApp) = new TaskStep {
  task = "stop-\(app.name)-db"
  file = "pay-ci/ci/tasks/stop-rds-instance.yml"
  params {
    ["RDS_INSTANCE_NAME"] = "test-perf-1-\(app.name)-rds-\(app.rds_identifier_suffix)"
    ...getAWSAssumeRoleCreds()
  }
}

local function sendSlackNoticationAndPutMetrics(app: PayApp, isASuccess: Boolean) = new InParallelStep {
  in_parallel = new InParallelConfig {
    steps = new Listing<Step> {
      when (isASuccess == true) {
        shared_resources_for_slack_notifications.paySlackNotification(new SlackNotificationConfig {
          is_a_success = true; message = "Deployment of ((.:app_name)) to perf success"; is_app_deploy_notification = true
        })
      }
      else {
        shared_resources_for_slack_notifications.paySlackNotification(new SlackNotificationConfig {
          message = "Deployment of ((.:app_name)) to perf failed"; is_app_deploy_notification = true
        })
      }
      shared_resources_for_metrics.paySendAppReleaseMetric(isASuccess, "test-perf-1")
      when (app.is_a_java_or_node_app == true) {
        shared_resources_for_metrics.paySendNginxReleaseMetric(isASuccess, "test-perf-1")
        shared_resources_for_metrics.paySendAdotReleaseMetric(isASuccess, "test-perf-1")
      }
      when (app.name == "frontend") {
        shared_resources_for_metrics.paySendNginxForwardProxyReleaseMetric(isASuccess, "test-perf-1")
      }
    }
  }
}

local function getResourcesToRunDbMigrations(app: PayApp): Listing<Step> = new Listing<Step> {
  getStep("pay-ci", false)
  (getStep("\(app.name)-db-ecr-registry-perf", true)) {
    passed = new Listing<Identifier> {
      "deploy-\(app.name)-to-perf"
    }
    params {
      ["format"] = "oci"
    }
  }
}

local function assumeRole(awsRoleSessionName: String) = new TaskStep {
  task = "assume-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  params {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_test_account_id)):role/concourse"
    ["AWS_ROLE_SESSION_NAME"] = awsRoleSessionName
  }
}

local function getAWSAssumeRoleCreds() = new Mapping<String, String> {
  ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
  ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
  ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
}

local function loadVar(variable: String, fileName: String): LoadVarStep = new LoadVarStep {
  load_var = variable
  file = fileName
}

local function getStep(name: String, shouldTrigger: Boolean): GetStep = new GetStep {
  get = name
  when (shouldTrigger == true) {
    trigger = shouldTrigger
  }
}
