definitions:
  - &job-definition
    name: updateThisValue
    max_in_flight: 3
    build_log_retention:
      builds: 500
  - &get-pull-request
    get: src
    resource: updateThisValue
    trigger: true
    version: every
    params:
      integration_tool: checkout
  - &get-ci
    get: ci
    resource: ci
    trigger: false
  - &put-unit-tests-pending-status
    put: updateThisValue
    params:
      path: src
      status: pending
      context: unit tests
  - &run-java-unit-test
    task: run-unit-tests
    file: ci/ci/tasks/java-tests.yml
    params:
      app_name: updateThisValue
    on_failure:
      &put-unit-test-failed-status
      put: updateThisValue
      params:
        path: src
        status: failure
        context: unit tests
  - &run-java-17-unit-test
    task: run-unit-tests
    file: ci/ci/tasks/java-17-tests.yml
    params:
      app_name: updateThisValue
    on_failure:
      &put-unit-test-failed-status
      put: updateThisValue
      params:
        path: src
        status: failure
        context: unit tests
  - &put-unit-test-success-status
    put: updateThisValue
    params:
      path: src
      status: success
      context: unit tests
  - &generate-docker-creds-config
    task: generate-docker-creds-config
    file: ci/ci/tasks/generate-docker-config-file.yml
    params:
      USERNAME: ((docker-username))
      PASSWORD: ((docker-access-token))
      EMAIL: ((docker-email))
  - &build-docker-image
    task: build-image
    privileged: true
    file: ci/ci/tasks/build-docker-image.yml
    params:
      app_name: updateThisValue
  - &put-integration-test-pending-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: pending
      context: integration tests
  - &run-java-integration-tests
    task: run-integration-tests
    privileged: true
    file: ci/ci/tasks/java-integration-tests.yml
    on_failure:
      &put-integration-test-failed-status
      put: updateThisValue
      get_params:
        skip_download: true
      params:
        path: src
        status: failure
        context: integration tests
  - &run-java-17-integration-tests
    task: run-integration-tests
    privileged: true
    file: ci/ci/tasks/java-17-integration-tests.yml
    on_failure:
      &put-integration-test-failed-status
      put: updateThisValue
      get_params:
        skip_download: true
      params:
        path: src
        status: failure
        context: integration tests
  - &put-integration-test-success-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: success
      context: integration tests
  - &put-test-failed-status
    put: card-connector-pull-request
    get_params:
      skip_download: true
    params:
      path: src
      status: failure
      context: test
  - &put-test-success-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: success
      context: test
  - &put-test-pending-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: pending
      context: test
  - &put-e2e-pending-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: pending
      context: e2e tests
  - &put-e2e-failed-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: failure
      context: e2e tests
  - &put-e2e-success-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: success
      context: e2e tests
  - &node-test
    task: test
    file: ci/ci/tasks/node-build-pr.yml
  - &node-build
    task: build
    file: ci/ci/tasks/node-build-pr.yml
    params:
      skip_tests: true
  - x-pact-credentials: &pact-credentials
      pact-broker-username: ((pact-broker-username))
      pact-broker-password: ((pact-broker-password))
  - &publish-pacts
    task: publish-pacts
    vars:
      <<: *pact-credentials
    params:
      consumer_name: updateThisValue
    file: ci/ci/tasks/publish-pacts.yml
  - &put-pact-provider-pending-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: pending
      context: pact provider verification
  - &put-pact-provider-success-status
    put: updateThisValue
    params:
      path: src
      status: success
      context: pact provider verification
  - &put-pact-provider-failed-status
    put: updateThisValue
    params:
      path: src
      status: failure
      context: pact provider verification
  - &pact-provider-verification
    task: pact-verification
    privileged: true
    file: ci/ci/tasks/pact-provider-verification.yml
    vars:
      <<: *pact-credentials
    params:
      consumer: updateThisValue
      provider: updateThisValue
  - &pact-provider-test-preflight-check
    task: check-is-valid
    file: ci/ci/tasks/pact-provider-test-preflight-check.yml
    vars:
      <<: *pact-credentials
    params:
      consumer:

groups:
  - name: adminusers
    jobs:
      - adminusers-e2e

  - name: cardid
    jobs:
      - cardid-unit-test
      - cardid-integration-test
      - cardid-as-provider-pact-test
      - cardid-e2e

  - name: connector
    jobs:
      - card-connector-unit-test
      - card-connector-integration-test
      - card-connector-as-provider-pact-test
      - card-connector-as-consumer-pact-test
      - card-connector-e2e

  - name: end_to_end
    jobs:
      - endtoend-e2e
      - pay-ci-endtoend-config

  - name: frontend
    jobs:
      - card-frontend-test
      - card-frontend-e2e
      - card-frontend-as-consumer-pact-test

  - name: ledger
    jobs:
      - ledger-e2e

  - name: products
    jobs:
      - products-unit-test
      - products-integration-test
      - products-as-provider-pact-test
      - products-e2e

  - name: products_ui
    jobs:
      - products-ui-test
      - products-ui-e2e
      - products-ui-as-consumer-pact-test

  - name: publicapi
    jobs:
      - publicapi-unit-test
      - publicapi-integration-test
      - publicapi-e2e
      - publicapi-as-consumer-pact-test

  - name: publicauth
    jobs:
      - publicauth-unit-test
      - publicauth-integration-test
      - publicauth-e2e

  - name: selfservice
    jobs:
      - selfservice-test
      - selfservice-e2e
      - selfservice-as-consumer-pact-test

  - name: toolbox
    jobs:
      - toolbox-test

  - name: webhooks
    jobs:
      - webhooks-unit-test
      - webhooks-integration-test
      - webhooks-as-consumer-pact-test

  - name: ci
    jobs:
      - ci-pr-test

  - name: update_pipeline
    jobs:
      - update-pr-ci-pipeline

resource_types:
  - name: pull-request
    type: registry-image
    source:
      repository: teliaoss/github-pr-resource
      tag: v0.21.0

resources:
  - name: pull-request-builds-ecr
    type: registry-image
    icon: docker
    source:
      repository: govukpay/pull-request-builds
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      # Hardcode the test account registry ID for now. Needs to be a string, not a number
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      tag: latest

  - name: card-connector-master
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-connector
      branch: master
  - name: ledger-master
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ledger
      branch: master
  - name: adminusers-master
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-adminusers
      branch: master
  - name: products-master
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-products
      branch: master
  - name: cardid-master
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-cardid
      branch: master
  - name: pr-ci-pipeline
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/pr.yml

  - name: ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - &pull-request
    name: card-connector-pull-request
    type: pull-request
    icon: github
    source: &pull-request-source
      disable_forks: true
      repository: alphagov/pay-connector
      access_token: ((github-access-token))

  - <<: *pull-request
    name: endtoend-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-endtoend

  - <<: *pull-request
    name: pay-ci-endtoend-config-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-ci
      paths:
        - "ci/tasks/endtoend/"

  - <<: *pull-request
    name: adminusers-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-adminusers

  - <<: *pull-request
    name: webhooks-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-webhooks

  - <<: *pull-request
    name: publicapi-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-publicapi

  - <<: *pull-request
    name: ledger-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-ledger

  - <<: *pull-request
    name: publicauth-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-publicauth

  - <<: *pull-request
    name: cardid-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-cardid

  - <<: *pull-request
    name: card-frontend-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-frontend

  - <<: *pull-request
    name: selfservice-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-selfservice

  - <<: *pull-request
    name: toolbox-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-toolbox

  - <<: *pull-request
    name: products-ui-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-products-ui

  - <<: *pull-request
    name: products-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-products

  - <<: *pull-request
    name: ci-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-ci
      paths:
        - "ci/pipelines/*"
        - "ci/tasks/*"

jobs:
  - <<: *job-definition
    name: webhooks-unit-test
    serial_groups: [unit-test]
    plan:
    - <<: *get-pull-request
      resource: webhooks-pull-request
    - <<: *get-ci
    - <<: *put-unit-tests-pending-status
      put: webhooks-pull-request
    - <<: *run-java-17-unit-test
      params:
        app_name: webhooks
      on_failure:
        <<: *put-unit-test-failed-status
        put: webhooks-pull-request
    - <<: *put-unit-test-success-status
      put: webhooks-pull-request

  - <<: *job-definition
    name: webhooks-integration-test
    serial_groups: [integration-test]
    plan:
    - <<: *get-pull-request
      resource: webhooks-pull-request
    - <<: *put-integration-test-pending-status
      put: webhooks-pull-request
    - <<: *get-ci
    - <<: *run-java-17-integration-tests
      on_failure:
        <<: *put-integration-test-failed-status
        put: webhooks-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: webhooks
    - <<: *put-integration-test-success-status
      put: webhooks-pull-request

  - name: webhooks-as-consumer-pact-test
    plan:
      - <<: *get-pull-request
        resource: webhooks-pull-request
        passed: [webhooks-unit-test, webhooks-integration-test]
      - <<: *put-pact-provider-pending-status
        put: webhooks-pull-request
      - <<: *get-ci
      - get: ledger-master
      - <<: *pact-provider-test-preflight-check
        params:
          consumer: webhooks
      - in_parallel:
        - <<: *pact-provider-verification
          task: ledger-provider-pact-verification
          input_mapping:
            test_target: ledger-master
          params:
            consumer: webhooks
            provider: ledger
        on_failure:
          <<: *put-pact-provider-failed-status
          put: webhooks-pull-request
      - <<: *put-pact-provider-success-status
        put: webhooks-pull-request

  - <<: *job-definition
    name: card-connector-unit-test
    serial_groups: [unit-test]
    plan:
    - <<: *get-pull-request
      resource: card-connector-pull-request
    - <<: *get-ci
    - <<: *put-unit-tests-pending-status
      put: card-connector-pull-request
    - <<: *run-java-unit-test
      params:
        app_name: connector
      on_failure:
        <<: *put-unit-test-failed-status
        put: card-connector-pull-request
    - <<: *put-unit-test-success-status
      put: card-connector-pull-request

  - <<: *job-definition
    name: card-connector-integration-test
    serial_groups: [integration-test]
    plan:
    - <<: *get-pull-request
      resource: card-connector-pull-request
    - <<: *put-integration-test-pending-status
      put: card-connector-pull-request
    - <<: *get-ci
    - <<: *run-java-integration-tests
      on_failure:
        <<: *put-integration-test-failed-status
        put: card-connector-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: connector
    - <<: *put-integration-test-success-status
      put: card-connector-pull-request

  - <<: *job-definition
    name: card-connector-as-provider-pact-test
    plan:
    - <<: *get-pull-request
      resource: card-connector-pull-request
    - <<: *put-pact-provider-pending-status
      put: card-connector-pull-request
    - <<: *get-ci
    - <<: *pact-provider-test-preflight-check
    - <<: *pact-provider-verification
      input_mapping:
        test_target: src
      params:
        provider: connector
      on_failure:
        <<: *put-pact-provider-failed-status
        put: card-connector-pull-request
    - <<: *put-pact-provider-success-status
      put: card-connector-pull-request

  - <<: *job-definition
    name: card-connector-as-consumer-pact-test
    plan:
      - <<: *get-ci
      - <<: *get-pull-request
        resource: card-connector-pull-request
        passed: [card-connector-unit-test, card-connector-integration-test]
      - put: card-connector-pull-request
        get_params:
          skip_download: true
        params:
          path: src
          status: pending
          context: app-as-consumer pact verification
      - get: adminusers-master
      - get: ledger-master
      - get: cardid-master
        params: { submodules: none }
      - <<: *pact-provider-test-preflight-check
        params:
          consumer: connector
      - in_parallel:
        - <<: *pact-provider-verification
          task: adminusers-provider-pact-verification
          input_mapping:
            test_target: adminusers-master
          params:
            consumer: connector
            provider: adminusers
        - <<: *pact-provider-verification
          task: ledger-provider-pact-verification
          input_mapping:
            test_target: ledger-master
          params:
            consumer: connector
            provider: ledger
        - <<: *pact-provider-verification
          task: cardid-provider-pact-verification
          input_mapping:
            test_target: cardid-master
          params:
            consumer: connector
            provider: cardid
        on_failure:
          put: card-connector-pull-request
          params:
            path: src
            status: failure
            context: app-as-consumer pact verification
      - put: card-connector-pull-request
        params:
          path: src
          status: success
          context: app-as-consumer pact verification

  - <<: *job-definition
    name: card-connector-e2e
    plan:
      - <<: *get-pull-request
        resource: card-connector-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: card-connector-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: connector
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: connector
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: connector
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: card-connector-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: card-connector-pull-request

  - <<: *job-definition
    name: endtoend-e2e
    plan:
      - <<: *get-pull-request
        resource: endtoend-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: endtoend-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: endtoend
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: endtoend
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: endtoend
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-products-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: endtoend-pull-request

    on_failure:
      <<: *put-e2e-failed-status
      put: endtoend-pull-request

  - <<: *job-definition
    name: pay-ci-endtoend-config
    plan:
      - in_parallel:
        - <<: *get-ci
        - <<: *get-pull-request
          resource: pay-ci-endtoend-config-pull-request
      - <<: *put-e2e-pending-status
        put: pay-ci-endtoend-config-pull-request
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: pay-ci-endtoend-config-pr-assume-role
      - load_var: role
        file: assume-role/assume-role.json
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: src
        params:
          PROJECT_UNDER_TEST: pay-ci
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-products-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: pay-ci-endtoend-config-pull-request

    on_failure:
      <<: *put-e2e-failed-status
      put: pay-ci-endtoend-config-pull-request

  - <<: *job-definition
    name: publicapi-unit-test
    serial_groups: [unit-test]
    plan:
    - <<: *get-pull-request
      resource: publicapi-pull-request
    - <<: *get-ci
    - <<: *put-unit-tests-pending-status
      put: publicapi-pull-request
    - <<: *run-java-unit-test
      params:
        app_name: publicapi
      on_failure:
        <<: *put-unit-test-failed-status
        put: publicapi-pull-request
    - <<: *put-unit-test-success-status
      put: publicapi-pull-request

  - <<: *job-definition
    name: publicapi-integration-test
    serial_groups: [integration-test]
    plan:
    - <<: *get-pull-request
      resource: publicapi-pull-request
    - <<: *put-integration-test-pending-status
      put: publicapi-pull-request
    - <<: *get-ci
    - <<: *run-java-integration-tests
      on_failure:
        <<: *put-integration-test-failed-status
        put: publicapi-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: publicapi
    - <<: *put-integration-test-success-status
      put: publicapi-pull-request

  - <<: *job-definition
    name: publicapi-e2e
    plan:
      - <<: *get-pull-request
        resource: publicapi-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: publicapi-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: publicapi
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: publicapi
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: publicapi
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-products-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: publicapi-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: publicapi-pull-request

  - name: publicapi-as-consumer-pact-test
    plan:
      - <<: *get-pull-request
        resource: publicapi-pull-request
        passed: [publicapi-unit-test, publicapi-integration-test]
      - <<: *put-pact-provider-pending-status
        put: publicapi-pull-request
      - <<: *get-ci
      - get: card-connector-master
      - get: ledger-master
      - <<: *pact-provider-test-preflight-check
        params:
          consumer: publicapi
      - in_parallel:
        - <<: *pact-provider-verification
          task: connector-provider-pact-verification
          input_mapping:
            test_target: card-connector-master
          params:
            consumer: publicapi
            provider: connector
        - <<: *pact-provider-verification
          task: ledger-provider-pact-verification
          input_mapping:
            test_target: ledger-master
          params:
            consumer: publicapi
            provider: ledger
        on_failure:
          <<: *put-pact-provider-failed-status
          put: publicapi-pull-request
      - <<: *put-pact-provider-success-status
        put: publicapi-pull-request

  - <<: *job-definition
    name: adminusers-e2e
    plan:
      - <<: *get-pull-request
        resource: adminusers-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: adminusers-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: adminusers
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: adminusers
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: adminusers
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: adminusers-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: adminusers-pull-request

  - <<: *job-definition
    name: cardid-unit-test
    serial_groups: [unit-test]
    plan:
    - <<: *get-pull-request
      resource: cardid-pull-request
    - <<: *get-ci
    - <<: *put-unit-tests-pending-status
      put: cardid-pull-request
    - <<: *run-java-unit-test
      params:
        app_name: cardid
      on_failure:
        <<: *put-unit-test-failed-status
        put: cardid-pull-request
    - <<: *put-unit-test-success-status
      put: cardid-pull-request

  - <<: *job-definition
    name: cardid-integration-test
    serial_groups: [integration-test]
    plan:
    - <<: *get-pull-request
      resource: cardid-pull-request
    - <<: *put-integration-test-pending-status
      put: cardid-pull-request
    - <<: *get-ci
    - <<: *run-java-integration-tests
      on_failure:
        <<: *put-integration-test-failed-status
        put: cardid-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: cardid
    - <<: *put-integration-test-success-status
      put: cardid-pull-request

  - <<: *job-definition
    name: cardid-as-provider-pact-test
    plan:
    - <<: *get-pull-request
      resource: cardid-pull-request
    - <<: *put-pact-provider-pending-status
      put: cardid-pull-request
    - <<: *get-ci
    - <<: *pact-provider-test-preflight-check
    - <<: *pact-provider-verification
      input_mapping:
        test_target: src
      params:
        provider: cardid
      on_failure:
        <<: *put-pact-provider-failed-status
        put: cardid-pull-request
    - <<: *put-pact-provider-success-status
      put: cardid-pull-request

  - <<: *job-definition
    name: cardid-e2e
    plan:
      - <<: *get-pull-request
        resource: cardid-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: cardid-pull-request
        - task: update-submodule
          config:
            container_limits: {}
            platform: linux
            image_resource:
              type: registry-image
              source:
                repository: governmentdigitalservice/pay-concourse-runner
            inputs:
              - name: src
            params:
              GH_ACCESS_TOKEN: ((github-access-token))
            outputs:
              - name: src
            run:
              path: bash
              dir: src
              args:
                - -ec
                - |
                  # rewrite the submodule url for https to add the token.
                  # The risk of setting the token in the url is mitigated since these files are not committed,
                  # the container is ephemeral and anyone with access to read the files could read the token from
                  # environment variable. Furthermore we redact the token from the files after the update.
                  sed -i "s/https:\/\/github.com/https:\/\/${GH_ACCESS_TOKEN}@github.com\//" .gitmodules
                  git submodule init -q data
                  git submodule update data
                  sed -i "s/${GH_ACCESS_TOKEN}/token_redacted/" .gitmodules
                  sed -i "s/${GH_ACCESS_TOKEN}/token_redacted/" .git/config
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: cardid
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: cardid
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: cardid
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: cardid-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: cardid-pull-request

  - <<: *job-definition
    name: ledger-e2e
    plan:
      - <<: *get-pull-request
        resource: ledger-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: ledger-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: ledger
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: ledger
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: ledger
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: ledger-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: ledger-pull-request

  - <<: *job-definition
    name: publicauth-unit-test
    serial_groups: [unit-test]
    plan:
    - <<: *get-pull-request
      resource: publicauth-pull-request
    - <<: *get-ci
    - <<: *put-unit-tests-pending-status
      put: publicauth-pull-request
    - <<: *run-java-unit-test
      params:
        app_name: publicauth
      on_failure:
        <<: *put-unit-test-failed-status
        put: publicauth-pull-request
    - <<: *put-unit-test-success-status
      put: publicauth-pull-request

  - <<: *job-definition
    name: publicauth-integration-test
    serial_groups: [integration-test]
    plan:
    - <<: *get-pull-request
      resource: publicauth-pull-request
    - <<: *put-integration-test-pending-status
      put: publicauth-pull-request
    - <<: *get-ci
    - <<: *run-java-integration-tests
      on_failure:
        <<: *put-integration-test-failed-status
        put: publicauth-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: publicauth
    - <<: *put-integration-test-success-status
      put: publicauth-pull-request

  - <<: *job-definition
    name: publicauth-e2e
    plan:
      - <<: *get-pull-request
        resource: publicauth-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: publicauth-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: publicauth
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: publicauth
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: publicauth
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: publicauth-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: publicauth-pull-request

  - <<: *job-definition
    name: products-unit-test
    serial_groups: [unit-test]
    plan:
    - <<: *get-pull-request
      resource: products-pull-request
    - <<: *get-ci
    - <<: *put-unit-tests-pending-status
      put: products-pull-request
    - <<: *run-java-unit-test
      params:
        app_name: products
      on_failure:
        <<: *put-unit-test-failed-status
        put: products-pull-request
    - <<: *put-unit-test-success-status
      put: products-pull-request

  - <<: *job-definition
    name: products-integration-test
    serial_groups: [integration-test]
    plan:
    - <<: *get-pull-request
      resource: products-pull-request
    - <<: *put-integration-test-pending-status
      put: products-pull-request
    - <<: *get-ci
    - <<: *run-java-integration-tests
      on_failure:
        <<: *put-integration-test-failed-status
        put: products-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: products
    - <<: *put-integration-test-success-status
      put: products-pull-request


  - <<: *job-definition
    name: products-as-provider-pact-test
    plan:
    - <<: *get-pull-request
      resource: products-pull-request
    - <<: *put-pact-provider-pending-status
      put: products-pull-request
    - <<: *get-ci
    - <<: *pact-provider-test-preflight-check
    - <<: *pact-provider-verification
      input_mapping:
        test_target: src
      params:
        provider: products
      on_failure:
        <<: *put-pact-provider-failed-status
        put: products-pull-request
    - <<: *put-pact-provider-success-status
      put: products-pull-request

  - <<: *job-definition
    name: products-e2e
    plan:
      - <<: *get-pull-request
        resource: products-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: products-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: products
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: products
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: products
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-products-e2e-tests
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: products-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: products-pull-request

  - <<: *job-definition
    name: card-frontend-test
    serial_groups: [node-test]
    plan:
    - <<: *get-pull-request
      resource: card-frontend-pull-request
    - <<: *get-ci
    - <<: *put-test-pending-status
      put: card-frontend-pull-request
    - <<: *node-test
      on_failure:
        <<: *put-test-failed-status
        put: card-frontend-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: frontend
    - <<: *put-test-success-status
      put: card-frontend-pull-request

  - <<: *job-definition
    name: card-frontend-e2e
    plan:
    - <<: *get-pull-request
      resource: card-frontend-pull-request
    - in_parallel:
      - <<: *get-ci
      - <<: *put-e2e-pending-status
        put: card-frontend-pull-request
    - <<: *node-build
    - <<: *generate-docker-creds-config
    - <<: *build-docker-image
      params:
        app_name: frontend
    - in_parallel:
      - task: get-docker-image-info
        file: ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: frontend
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: e2e-test-assume-role
    - in_parallel:
      - load_var: role
        file: assume-role/assume-role.json
      - load_var: image_filename
        file: image_info/image_filename
      - load_var: image_tag
        file: image_info/tag
    - in_parallel:
      - put: pull-request-builds-ecr
        params:
          image: local_image/((.:image_filename))
          additional_tags: image_info/tag
        get_params:
          skip_download: true
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PR_BUILD: true
          PROJECT_UNDER_TEST: frontend
          RELEASE_TAG_UNDER_TEST: ((.:image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - in_parallel:
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-products-e2e-tests
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-zap-tests
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - <<: *put-e2e-success-status
      put: card-frontend-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: card-frontend-pull-request

  - name: card-frontend-as-consumer-pact-test
    plan:
    - <<: *get-ci
    - <<: *get-pull-request
      resource: card-frontend-pull-request
      passed: [card-frontend-test]
    - <<: *put-pact-provider-pending-status
      put: card-frontend-pull-request
    - get: card-connector-master
    - <<: *pact-provider-test-preflight-check
      params:
        consumer: frontend
    - <<: *pact-provider-verification
      task: connector-provider-pact-verification
      input_mapping:
        test_target: card-connector-master
      params:
        consumer: frontend
        provider: connector
      on_failure:
        <<: *put-pact-provider-failed-status
        put: card-frontend-pull-request
    - <<: *put-pact-provider-success-status
      put: card-frontend-pull-request

  - <<: *job-definition
    name: selfservice-test
    serial_groups: [node-test]
    plan:
    - <<: *get-pull-request
      resource: selfservice-pull-request
    - <<: *get-ci
    - <<: *put-test-pending-status
      put: selfservice-pull-request
    - <<: *node-test
      on_failure:
        <<: *put-test-failed-status
        put: selfservice-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: selfservice
    - <<: *put-test-success-status
      put: selfservice-pull-request

  - <<: *job-definition
    name: selfservice-e2e
    plan:
    - <<: *get-pull-request
      resource: selfservice-pull-request
    - in_parallel:
      - <<: *get-ci
      - <<: *put-e2e-pending-status
        put: selfservice-pull-request
    - <<: *node-build
    - <<: *generate-docker-creds-config
    - <<: *build-docker-image
      params:
        app_name: selfservice
    - in_parallel:
      - task: get-docker-image-info
        file: ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: selfservice
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: e2e-test-assume-role
    - in_parallel:
      - load_var: role
        file: assume-role/assume-role.json
      - load_var: image_filename
        file: image_info/image_filename
      - load_var: image_tag
        file: image_info/tag
    - in_parallel:
      - put: pull-request-builds-ecr
        params:
          image: local_image/((.:image_filename))
          additional_tags: image_info/tag
        get_params:
          skip_download: true
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PR_BUILD: true
          PROJECT_UNDER_TEST: selfservice
          RELEASE_TAG_UNDER_TEST: ((.:image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - task: run-card-e2e-tests
      attempts: 3
      file: ci/ci/tasks/run-codebuild.yml
      input_mapping:
        pay-ci: ci
      params:
        PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - <<: *put-e2e-success-status
      put: selfservice-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: selfservice-pull-request


  - <<: *job-definition
    name: selfservice-as-consumer-pact-test
    plan:
    - <<: *get-pull-request
      resource: selfservice-pull-request
      passed: [selfservice-test]
    - <<: *put-pact-provider-pending-status
      put: selfservice-pull-request
    - get: card-connector-master
    - get: ledger-master
    - get: adminusers-master
    - get: products-master
    - <<: *get-ci
    - <<: *pact-provider-test-preflight-check
      params:
        consumer: selfservice
    - in_parallel:
      - <<: *pact-provider-verification
        task: connector-provider-pact-verification
        input_mapping:
          test_target: card-connector-master
        params:
          consumer: selfservice
          provider: connector
      - <<: *pact-provider-verification
        task: adminusers-provider-pact-verification
        input_mapping:
          test_target: adminusers-master
        params:
          consumer: selfservice
          provider: adminusers
      - <<: *pact-provider-verification
        task: ledger-provider-pact-verification
        input_mapping:
          test_target: ledger-master
        params:
          consumer: selfservice
          provider: ledger
      - <<: *pact-provider-verification
        task: products-provider-pact-verification
        input_mapping:
          test_target: products-master
        params:
          consumer: selfservice
          provider: products
      on_failure:
        <<: *put-pact-provider-failed-status
        put: selfservice-pull-request
    - <<: *put-pact-provider-success-status
      put: selfservice-pull-request

  - <<: *job-definition
    name: toolbox-test
    plan:
    - <<: *get-pull-request
      resource: toolbox-pull-request
    - <<: *get-ci
    - <<: *put-test-pending-status
      put: toolbox-pull-request
    - <<: *node-test
      on_failure:
        <<: *put-test-failed-status
        put: toolbox-pull-request
    - <<: *put-test-success-status
      put: toolbox-pull-request

  - <<: *job-definition
    name: products-ui-test
    serial_groups: [node-test]
    plan:
    - <<: *get-pull-request
      resource: products-ui-pull-request
    - <<: *get-ci
    - <<: *put-test-pending-status
      put: products-ui-pull-request
    - <<: *node-test
      on_failure:
        <<: *put-test-failed-status
        put: products-ui-pull-request
    - <<: *publish-pacts
      params:
        consumer_name: products-ui
    - <<: *put-test-success-status
      put: products-ui-pull-request

  - <<: *job-definition
    name: products-ui-e2e
    plan:
    - <<: *get-pull-request
      resource: products-ui-pull-request
    - in_parallel:
      - <<: *get-ci
      - <<: *put-e2e-pending-status
        put: products-ui-pull-request
    - <<: *node-build
    - <<: *generate-docker-creds-config
    - <<: *build-docker-image
      params:
        app_name: products-ui
    - in_parallel:
      - task: get-docker-image-info
        file: ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: products-ui
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: e2e-test-assume-role
    - in_parallel:
      - load_var: role
        file: assume-role/assume-role.json
      - load_var: image_filename
        file: image_info/image_filename
      - load_var: image_tag
        file: image_info/tag
    - in_parallel:
      - put: pull-request-builds-ecr
        params:
          image: local_image/((.:image_filename))
          additional_tags: image_info/tag
        get_params:
          skip_download: true
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PR_BUILD: true
          PROJECT_UNDER_TEST: products-ui
          RELEASE_TAG_UNDER_TEST: ((.:image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - task: run-products-e2e-tests
      file: ci/ci/tasks/run-codebuild.yml
      input_mapping:
        pay-ci: ci
      params:
        PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - <<: *put-e2e-success-status
      put: products-ui-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: products-ui-pull-request


  - <<: *job-definition
    name: products-ui-as-consumer-pact-test
    plan:
    - <<: *get-ci
    - <<: *get-pull-request
      resource: products-ui-pull-request
      passed: [products-ui-test]
    - <<: *put-pact-provider-pending-status
      put: products-ui-pull-request
    - get: products-master
    - get: adminusers-master
    - <<: *pact-provider-test-preflight-check
      params:
        consumer: products-ui
    - in_parallel:
      - <<: *pact-provider-verification
        task: products-provider-pact-verification
        input_mapping:
          test_target: products-master
        params:
          consumer: products-ui
          provider: products
      - <<: *pact-provider-verification
        task: adminusers-provider-pact-verification
        input_mapping:
          test_target: adminusers-master
        params:
          consumer: products-ui
          provider: adminusers
      on_failure:
        <<: *put-pact-provider-failed-status
        put: products-ui-pull-request
    - <<: *put-pact-provider-success-status
      put: products-ui-pull-request

  - <<: *job-definition
    name: ci-pr-test
    plan:
    - <<: *get-pull-request
      resource: ci-pull-request
    - <<: *put-test-pending-status
      put: ci-pull-request
    - task: check-pipelines-and-tasks
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: golang
            tag: 1.20-alpine
        inputs:
          - name: src
        run:
          path: sh
          dir: src
          args:
            - -ec
            - |
              apk add git shellcheck
              go install github.com/alphagov/paas-cf/tools/pipecleaner@latest

              cd /tmp/

              echo "c7d331052a6bf552b017adf5288b8e162346157c  fly-7.6.0-linux-amd64.tgz" > fly-7.6.0-linux-amd64.tgz.sha1
              wget -c https://github.com/concourse/concourse/releases/download/v7.6.0/fly-7.6.0-linux-amd64.tgz -O fly-7.6.0-linux-amd64.tgz
              sha1sum -c fly-7.6.0-linux-amd64.tgz.sha1
              tar -O -zxf fly-7.6.0-linux-amd64.tgz > /usr/local/bin/fly
              chmod u+x /usr/local/bin/fly

              cd -

              pipecleaner --rubocop=false ci/tasks/*.yml

              find ci/pipelines -name '*.yml' | while read -r PIPELINE; do
                echo "Validating: $PIPELINE"
                fly validate-pipeline -c "$PIPELINE"
                echo
              done
      on_failure:
        <<: *put-test-failed-status
        put: ci-pull-request
    - <<: *put-test-success-status
      put: ci-pull-request

  - name: update-pr-ci-pipeline
    plan:
      - get: pr-ci-pipeline
        trigger: true
      - set_pipeline: pr-ci
        file: pr-ci-pipeline/ci/pipelines/pr.yml
