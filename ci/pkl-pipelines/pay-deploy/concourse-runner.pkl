amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/PayResources.pkl"

resource_types {
  shared_resources.pullRequestResourceType
}

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/concourse-runner.pkl", "master")
  shared_resources.payCiGitHubResource
  new PayResources.PayGitHubPullRequestResource {
    name = "concourse-runner-pr"
    repo = "pay-ci"
    paths {
      "ci/docker/concourse-runner/**"
      "ci/docker/concourse-runner-with-java-21/**"
      "ci/pipelines/concourse-runner.yml"
    }
  }
  new PayResources.PayGitHubResource {
    name = "concourse-runner-src"
    repoName = "pay-ci"
    source {
      branch = "master"
      paths { "ci/docker/concourse-runner/*" }
    }
  }
  new PayResources.PayGitHubResource {
    name = "concourse-runner-with-java-21-src"
    repoName = "pay-ci"
    source {
      branch = "master"
      paths { "ci/docker/concourse-runner-with-java-21/*" }
    }
  }
  new PayResources.PayDockerHubResource {
    name = "concourse-runner"
    source {
      repository = "governmentdigitalservice/pay-concourse-runner"
      tag = "latest"
    }
  }
  new PayResources.PayDockerHubResource {
    name = "concourse-runner-with-java-21"
    source {
      repository = "governmentdigitalservice/pay-concourse-runner-with-java-21"
      tag = "latest"
    }
  }
}

jobs = new {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/concourse-runner.pkl")
  buildAndPushConcourseJob("")
  buildAndPushConcourseJob("-with-java-21")

  new {
    name = "concourse-runner-pr"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          getStepWithTrigger("concourse-runner-pr", true)
          getStep("pay-ci")
        }
      }
      putPRTestStatus("concourse-runner-pr", "concourse-runner-tests", "pending")
      shared_resources.generateDockerCredsConfigStep
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new TaskStep {
            task = "build-concourse-runner"
            privileged = true
            output_mapping {
              ["image"] = "concourse-runner-image"
            }
            params = new {
              ["CONTEXT"] = "concourse-runner-pr/ci/docker/concourse-runner"
              ["UNPACK_ROOTFS"] = "true"
              ["DOCKER_CONFIG"] = "docker_creds"
            }
            config {
              platform = "linux"
              image_resource = new {
                type = "registry-image"
                source = new {
                  ["repository"] = "concourse/oci-build-task"
                }
              }
              inputs {
                new {
                  name = "concourse-runner-pr"
                }
              }
              outputs {
                new {
                  name = "image"
                }
              }
              run {
                path = "build"
              }
            }
          }
          new TaskStep {
            task = "build-concourse-runner-with-java-21"
            privileged = true
            output_mapping {
              ["image"] = "concourse-runner-with-java-21-image"
            }
            params = new {
              ["CONTEXT"] = "concourse-runner-pr/ci/docker/concourse-runner-with-java-21"
              ["UNPACK_ROOTFS"] = "true"
              ["DOCKER_CONFIG"] = "docker_creds"
            }
            config {
              platform = "linux"
              image_resource = new {
                type = "registry-image"
                source = new {
                  ["repository"] = "concourse/oci-build-task"
                }
              }
              inputs {
                new {
                  name = "concourse-runner-pr"
                }
              }
              outputs {
                new {
                  name = "image"
                }
              }
              run {
                path = "build"
              }
            }
          }
        }
      }
      putPRTestStatus("concourse-runner-pr", "concourse-runner-tests", "success")
    }
    on_failure = putPRTestStatus("concourse-runner-pr", "concourse-runner-tests", "failure")
    on_error = putPRTestStatus("concourse-runner-pr", "concourse-runner-tests", "failure")
  }
}

local function getStep(resource: String): GetStep = new {
  get = resource
}

local function getStepWithTrigger(resource: String, _trigger: Boolean): GetStep = new {
  get = resource
  trigger = _trigger
}

local function putPRTestStatus(resourceName: String, testName: String, status: String): Pipeline.PutStep = new {
  put = resourceName
  params {
    ["path"] = resourceName
    ["status"] = status
    ["context"] = testName
  }
}

local function buildAndPushConcourseJob(javaVersionSuffix: String): Pipeline.Job = new {
  local baseName = "concourse-runner\(javaVersionSuffix)"

  name = "build-and-push-\(baseName)"
  plan {
    new InParallelStep {
      in_parallel = new Listing<Step> {
        getStepWithTrigger("\(baseName)-src", true)
        getStep("pay-ci")
      }
    }
    shared_resources.generateDockerCredsConfigStep
    new TaskStep {
      task = "build"
      privileged = true
      params = new {
        ["CONTEXT"] = "\(baseName)-src/ci/docker/\(baseName)"
        ["DOCKER_CONFIG"] = "docker_creds"
        ["UNPACK_ROOTFS"] = "true"
      }
      config {
        platform = "linux"
        image_resource = new {
          type = "registry-image"
          source = new {
            ["repository"] = "concourse/oci-build-task"
          }
        }
        inputs {
          new {
            name = "\(baseName)-src"
          }
        }
        outputs {
          new {
            name = "image"
          }
        }
        run {
          path = "build"
        }
      }
    }
    new PutStep{
      put = baseName
      params = new {
        ["image"] = "image/image.tar"
      }
    }
  }
}
