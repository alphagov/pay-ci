extends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../pipeline_self_update.pkl"
import "../shared_resources.pkl"
import "../shared_resources_for_lock_pools.pkl"

hidden pools_to_init = new Listing<String> {}

hidden concourseTeamName = "UPDATE_ME"

resource_types {
  shared_resources_for_lock_pools.payPoolResourceType
}

resources {
  new {
    name = "lock-pool-repo"
    type = "git"
    icon = "git"
    source {
      ["branch"] = "pool"
      ["uri"] = "((readonly_codecommit_pool_uri))"
      ["private_key"] = "((readonly_codecommit_private_key))"
    }
  }
  for (pool_name in pools_to_init) {
    (shared_resources_for_lock_pools.LockPoolResource) { pool = pool_name }
    new {
      name = "\(pool_name)-lock-config"
      type = "mock"
      source {
        ["create_files"] = new Mapping<String, String> {
          ["name"] = "\(pool_name)-lock"
          ["metadata"] = ""
        }
      }
    }
  }
  shared_resources.payCiGitHubResource
  pipeline_self_update.PayPipelineSelfUpdateResource("\(concourseTeamName)/init-lock-pools.pkl", "master")
}

jobs {
  new Job {
    name = "initialise-pools"
    plan {
      new GetStep { get = "pay-ci" }
      new TaskStep {
        task = "init-pools"
        file = "pay-ci/ci/tasks/init-lock-pools.yml"
        params {
          ["POOLS_TO_INIT"] = pools_to_init.toList().join(",")
        }
      }
      new PutStep {
        put = "lock-pool-repo"
        params {
          ["repository"] = "lock-pool-repo"
          ["force"] = "true"
        }
      }
      new InParallelStep {
        in_parallel = new Listing<Step> {
          for (pool in pools_to_init) {
            new GetStep {get = "\(pool)-lock-config" }
          }
        }
      }
      for (pool in pools_to_init) {
        new PutStep {
          put = "add-\(pool)-lock"
          resource = "lock-pool-\(pool)"
          params {
            ["add"] = "\(pool)-lock-config"
          }
        }
      }
    }
  }
  for (pool_name in pools_to_init) {
    new Job {
      name = "force-release-\(pool_name)-lock"
      plan {
        new shared_resources_for_lock_pools.GetLockStep { pool = pool_name }
        new shared_resources_for_lock_pools.ReleaseLockStep {
          pool = pool_name
          params {
            ["release"] = "get-already-claimed-\(pool_name)-lock"
          }
        }
      }
    }
  }
  pipeline_self_update.PayPipelineSelfUpdateJob("\(concourseTeamName)/init-lock-pools.pkl")
}