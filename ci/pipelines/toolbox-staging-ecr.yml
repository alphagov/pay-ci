resources:
  # ECR Test registry resource
  - name: ecr-registry-test
    type: dev-registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      # Need to create the role for the concourse user to assume in the test account
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      # Hardcode the test account registry ID for now. Needs to be a string, not a number
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      tag: ready-staging
  # ECR Staging registry resource
  - name: ecr-registry-staging
    type: dev-registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      # Need to create the role for the concourse user to assume in the staging account
      aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      # Hardcode the staging account registry ID for now. Needs to be a string, not a number
      aws_ecr_registry_id: "((pay_aws_staging_account_id))"
      aws_region: eu-west-1

resource_types:
  # Custom resource type - this has been merged to the
  # https://github.com/concourse/registry-image-resource repo,
  # however is not yet in a stable release. Using this custom
  # resource type allows us to support the ECR registry_id parameter
  # This can be removed once registry_id is in stable release of 'registry-image'.
  - name: dev-registry-image
    type: registry-image
    source:
      repository: concourse/registry-image-resource
      username: ((docker-username))
      password: ((docker-password))
      tag: dev

jobs:
  - name: toolbox-staging-approval
    plan:
      - get: ecr-registry-test
        trigger: true
        params:
          format: oci
      - task: pull-tags-from-ecr-registry-test
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: amazon/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((readonly_access_key_id))
            AWS_SECRET_ACCESS_KEY: ((readonly_secret_access_key))
            AWS_SESSION_TOKEN: ((readonly_session_token))
            AWS_ASSUME_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
            AWS_REGISTRY_ID: "((pay_aws_test_account_id))"
            AWS_REGION: eu-west-1
            AWS_PAGER: ""
            AWS_DEFAULT_OUTPUT: text
          inputs:
            - name: ecr-registry-test
          outputs:
            - name: docker_tags
          run:
            path: /bin/sh
            args:
            - -ec
            - | 
              DIGEST=$(cat ecr-registry-test/digest)
              assumed_role=($(aws sts assume-role \
              --role-arn $AWS_ASSUME_ROLE_ARN \
              --role-session-name ecr-test-session \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              ) )

              export AWS_ACCESS_KEY_ID=${assumed_role[0]}
              export AWS_SECRET_ACCESS_KEY=${assumed_role[1]}
              export AWS_SESSION_TOKEN=${assumed_role[2]}

              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile ecr-test-session
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile ecr-test-session
              aws configure set aws_session_token $AWS_SESSION_TOKEN --profile ecr-test-session

              aws ecr list-images \
              --profile ecr-test-session \
              --registry-id $AWS_REGISTRY_ID \
              --repository-name govukpay/toolbox \
              --query "imageIds[?imageDigest=='$DIGEST'][imageTag]" \
              | tr '\n' ' ' > docker_tags/tags.txt
      - put: ecr-registry-staging
        params:
          image: ecr-registry-test/image.tar
          additional_tags: docker_tags/tags.txt
      - task: deploy-to-staging
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/concourse-runner
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              echo "Imagine we just deployed to staging."
      - task: smoke-test-on-staging
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/concourse-runner
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              echo "Imagine we just smoked on staging."
      - task: set-ready-for-production-tags
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/concourse-runner
          inputs:
          - name: docker_tags
          outputs:
          - name: docker_tags
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              CONCAT_TAGS="$(cat docker_tags/tags.txt | sed 's/ready-staging/ready-production/g' )"
              echo $CONCAT_TAGS > docker_tags/tags.txt
      - put: ecr-registry-staging
        params:
          image: ecr-registry-test/image.tar
          additional_tags: docker_tags/tags.txt
      