import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"
import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/TaskConfig.pkl"

import ".../common/PayResources.pkl"

typealias AWSAccountName = "dev" | "test" | "staging" | "production" | "deploy"

anonymousConcourseRunnerResource = new TaskConfig.AnonymousResource {
  type = "registry-image"
  source = new {
    ["repository"] = "governmentdigitalservice/pay-concourse-runner"
    ["tag"] = "latest"
  }
}

payCiGitHubResource: PayResources.PayGitHubResource = new  {
  name = "pay-ci"
  repoName = "pay-ci"
  source {
    branch = "master"
  }
}

payInfraGitHubResource: PayResources.PayInfraGitHubResource = new  {}

function payDockerHubResource(resource_name: String, repo: String, tag: String): Pipeline.Resource = new {
  name = resource_name
  type = "registry-image"
  icon = "docker"
  source = new {
    ["repository"] = repo
    ["tag"] = tag
    ["username"] = "((docker-username))"
    ["password"] = "((docker-access-token))"
  }
}

function payDockerHubResourceAsPayResource(resource_name: String, repo: String, _tag: String): PayResources.PayDockerHubResource = new {
  name = resource_name
  source {
    repository = repo
    tag = _tag
  }
}

function payECRResource(resource_name: String, repo: String, aws_account_id: String): Pipeline.Resource = payECRResourceWithVariant(resource_name, repo, aws_account_id, "")

function payECRResourceWithVariant(resource_name: String, repo: String, aws_account_id: String, variant: String): Pipeline.Resource = new {
  name = resource_name
  type = "registry-image"
  icon = "docker"
  source = new {
    ["repository"] = repo
    when (variant != null && variant.length > 0) {
      ["variant"] = variant
    }
    ["aws_access_key_id"] = "((readonly_access_key_id))"
    ["aws_secret_access_key"] = "((readonly_secret_access_key))"
    ["aws_session_token"] = "((readonly_session_token))"
    ["aws_role_arn"] = "arn:aws:iam::((\(aws_account_id))):role/concourse"
    ["aws_ecr_registry_id"] = "((\(aws_account_id)))"
    ["aws_region"] = "eu-west-1"
  }
}

slackNotificationResource = new Pipeline.Resource{
  name = "slack-notification"
  type = "slack-notification"
  source = new {
    ["url"] = "https://hooks.slack.com/services/((slack-notification-secret))"
  }
}

slackNotificationResourceType = new Pipeline.ResourceType{
  name = "slack-notification"
  type = "docker-image"
  source = new {
    ["repository"] = "cfcommunity/slack-notification-resource"
    ["tag"] = "latest"
  }
}

generateDockerCredsConfigStep = new Pipeline.TaskStep {
    task = "generate-docker-creds-config"
    file = "pay-ci/ci/tasks/generate-docker-config-file.yml"
    params = new {
        ["USERNAME"] = "((docker-username))"
        ["PASSWORD"] = "((docker-access-token))"
        ["EMAIL"] = "((docker-email))"
    }
}

pullRequestResourceType = new Pipeline.ResourceType {
  name = "pull-request"
  type = "registry-image"
  source = new {
    ["repository"] = "teliaoss/github-pr-resource"
    ["tag"] = "v0.23.0"
  }
}

function payGithubPullRequestResource(_name: String, alphagovRepo: String): Pipeline.Resource = new {
  name = _name
  type = "pull-request"
  icon = "github"
  source = new {
    ["disable_forks"] = true
    ["repository"] = "alphagov/\(alphagovRepo)"
    ["access_token"] = "((github-access-token))"
  }
}

function putPRTestPendingStatus(resourceName: String, test_name: String): Pipeline.PutStep = new {
  put = resourceName
  params {
    ["path"] = resourceName
    ["status"] = "pending"
    ["context"] = test_name
  }
}

function putPRTestSuccessStatus(resourceName: String, test_name: String): Pipeline.PutStep = new {
  put = resourceName
  get_params {
    ["skip_download"] = true
  }
  params {
    ["path"] = resourceName
    ["status"] = "success"
    ["context"] = test_name
  }
}

function putPRTestFailedStatus(resourceName: String, test_name: String): Pipeline.PutStep = new {
  put = resourceName
  get_params {
    ["skip_download"] = true
  }
  params {
    ["path"] = resourceName
    ["status"] = "failure"
    ["context"] = test_name
  }
}

function loadVar(variable: String, fileName: String): Pipeline.LoadVarStep = new Pipeline.LoadVarStep {
  load_var = variable
  file = fileName
}

function loadVarJson(variable: String, fileName: String): Pipeline.LoadVarStep = new Pipeline.LoadVarStep {
  load_var = variable
  file = fileName
  format = "json"
}

class AssumeRunCodeBuildRoleStep extends Pipeline.TaskStep {
  hidden session_name: String = "concourse-assumed-role"

  task = "assume-run-codebuild-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping {
    ["assume-role"] = "run-codebuild-assume-role"
  }
  params {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12"
    ["AWS_ROLE_SESSION_NAME"] = session_name
  }
}

LoadRunCodeBuildAssumedRoleVar: Pipeline.LoadVarStep = loadVarJson("role", "run-codebuild-assume-role/assume-role.json")

class ParseGithubAlphaReleaseTagTask extends Pipeline.TaskStep {
  hidden gitRelease: String

  task = "parse-release-tag"
  file = "pay-ci/ci/tasks/parse-release-tag.yml"
  input_mapping {
    ["git-release"] = gitRelease
  }
}

class ParseECRCandidateTagTask extends Pipeline.TaskStep {
  hidden ecr_repo: String

  task = "parse-candidate-tag"
  file = "pay-ci/ci/tasks/parse-candidate-tag.yml"
  input_mapping {
    ["ecr-repo"] = ecr_repo
  }
}

class ParseECRReleaseTagTask extends Pipeline.TaskStep {
  hidden ecr_repo: String

  task = "parse-ecr-release-info"
  file = "pay-ci/ci/tasks/parse-ecr-release-tag.yml"
  input_mapping {
    ["ecr-image"] = ecr_repo
  }
}

class AssumeConcourseRoleTask extends Pipeline.TaskStep {
  hidden aws_account_name: AWSAccountName = "test"
  hidden role_name: String = "concourse"
  hidden output_name: Pipeline.Identifier = "assume-retag-role"
  hidden session_name: String = "retag-ecr-image"

  task = output_name
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping = new {
    ["assume-role"] = output_name
  }
  params = new {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_\(aws_account_name)_account_id)):role/\(role_name)"
    ["AWS_ROLE_SESSION_NAME"] = session_name
  }
}