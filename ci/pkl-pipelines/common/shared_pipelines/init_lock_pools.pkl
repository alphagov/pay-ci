extends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../pipeline_self_update.pkl"
import "../shared_resources.pkl"
import "../shared_resources_for_lock_pools.pkl"
import "../shared_resources_for_times.pkl"
import "../shared_resources_for_slack_notifications.pkl"

hidden pools_to_init = new Listing<String> {}

hidden concourseTeamName = "UPDATE_ME"

resource_types {
  shared_resources_for_slack_notifications.slackNotificationResourceType
}

resources {
  new {
    name = "lock-pool-repo"
    type = "git"
    icon = "git"
    source {
      ["branch"] = "pool"
      ["uri"] = "((readonly_codecommit_pool_uri))"
      ["private_key"] = "((readonly_codecommit_private_key))"
    }
  }
  for (pool_name in pools_to_init) {
    (shared_resources_for_lock_pools.LockPoolResource) { pool = pool_name }
    new {
      name = "\(pool_name)-lock-config"
      type = "mock"
      source {
        ["create_files"] = new Mapping<String, String> {
          ["name"] = "\(pool_name)-lock"
          ["metadata"] = ""
        }
      }
    }
  }
  shared_resources.payCiGitHubResource
  shared_resources_for_times.payIntervalResource("every-15-minutes", "15m")
  shared_resources_for_times.payIntervalResource("every-5-minutes", "5m")
  shared_resources_for_times.payDailyTimeResource("every-day-at-2-30", "2:30", "2:40")
  shared_resources_for_slack_notifications.slackNotificationResource
  pipeline_self_update.PayPipelineSelfUpdateResource("\(concourseTeamName)/init-lock-pools.pkl", "master")
}

groups {
  new {
    name = "report-lock-status"
    jobs {
      for (pool_name in pools_to_init) {
        "report-status-of-\(pool_name)-lock"
      }
    }
  }
  new {
    name = "force-release-locks"
    jobs {
      for (pool_name in pools_to_init) {
        "force-release-\(pool_name)-lock"
      }
    }
  }
  new {
    name = "initialise-pools"
    jobs {
      "initialise-pools"
    }
  }
  new {
    name = "report-potential-deadlock"
    jobs {
      for (pool_name in pools_to_init) {
        "report-potential-deadlock-of-\(pool_name)-lock"
      }
    }
  }
  new {
    name = "auto-deadlock-resolution"
    jobs {
      for (pool_name in pools_to_init) {
        "auto-resolve-deadlock-of-\(pool_name)-lock"
        "auto-resolve-failed-job-deadlock-of-\(pool_name)-lock"
      }
    }
  }
  pipeline_self_update.payPipelineSelfUpdateGroup
}

jobs {
  pipeline_self_update.PayPipelineSelfUpdateJob("\(concourseTeamName)/init-lock-pools.pkl")
  new Job {
    name = "initialise-pools"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new GetStep { get = "pay-ci" }
          new GetStep {
            get = "every-day-at-2-30"
            trigger = true
          }
        }
      }
      new TaskStep {
        task = "init-pools"
        file = "pay-ci/ci/tasks/lock-pools/init-lock-pools.yml"
        params {
          ["POOLS_TO_INIT"] = pools_to_init.toList().join(",")
        }
      }
      new PutStep {
        put = "lock-pool-repo"
        params {
          ["repository"] = "lock-pool-repo"
          ["force"] = "true"
        }
      }
      new InParallelStep {
        in_parallel = new Listing<Step> {
          for (pool in pools_to_init) {
            new GetStep {get = "\(pool)-lock-config" }
          }
        }
      }
      for (pool in pools_to_init) {
        new PutStep {
          put = "add-\(pool)-lock"
          resource = "lock-pool-\(pool)"
          params {
            ["add"] = "\(pool)-lock-config"
          }
        }
      }
    }
  }
  for (pool_name in pools_to_init) {
    new Job {
      name = "force-release-\(pool_name)-lock"
      plan {
        new shared_resources_for_lock_pools.GetLockStep { pool = pool_name }
        new shared_resources_for_lock_pools.ReleaseLockStep {
          pool = pool_name
          params {
            ["release"] = "get-already-claimed-\(pool_name)-lock"
          }
        }
      }
    }
    new Job {
      name = "report-status-of-\(pool_name)-lock"
      plan {
        new InParallelStep {
          in_parallel = new InParallelConfig {
            steps {
              new GetStep { get = "lock-pool-repo" }
              new GetStep { get = "pay-ci" }
            }
          }
        }
        new TaskStep {
          task = "report-status-of-\(pool_name)-lock"
          file = "pay-ci/ci/tasks/lock-pools/report-lock-status.yml"
          params {
            ["LOCK_NAME"] = pool_name
          }
        }
      }
    }
    new Job {
      name = "report-potential-deadlock-of-\(pool_name)-lock"
      plan {
        new InParallelStep {
          in_parallel = new InParallelConfig {
            steps {
              new GetStep {
                get = "every-15-minutes"
                trigger = true
              }
              new GetStep { get = "pay-ci" }
              new GetStep { get = "lock-pool-repo" }
            }
          }
        }
        new TaskStep {
          task = "get-status-of-\(pool_name)-lock"
          file = "pay-ci/ci/tasks/lock-pools/report-lock-status.yml"
          params {
            ["LOCK_NAME"] = pool_name
          }
        }
        new TryStep {
          try = new TaskStep {
            task = "detect-potential-deadlock-of-\(pool_name)-lock"
            file = "pay-ci/ci/tasks/lock-pools/detect-potential-deadlock.yml"
            params {
              ["LOCK_NAME"] = pool_name
            }
            on_failure = new DoStep {
              do {
                new InParallelStep {
                  in_parallel = new Listing<Step> {
                    shared_resources.loadVar("concourse-team", "lock-status/team")
                    shared_resources.loadVar("concourse-pipeline", "lock-status/pipeline")
                    shared_resources.loadVar("concourse-job", "lock-status/job")
                    shared_resources.loadVar("build-number", "lock-status/build-number")
                    shared_resources.loadVar("date", "lock-status/date")
                  }
                }
                new PutStep {
                  put = "slack-notification"
                  attempts = 10
                  params = new Mapping {
                    ["channel"] = "#govuk-pay-starling"
                    ["silent"] = true
                    ["icon_emoji"] = ":concourse:"
                    ["username"] = "pay-concourse"
                    ["text"] = """
                      :concourse-yellow: :lock: Potential deadlock detected in ((.:concourse-team)) for lock \(pool_name)-lock.

                      Claimant: <https://pay-cd.deploy.payments.service.gov.uk/teams/((.:concourse-team))/pipelines/((.:concourse-pipeline))/jobs/((.:concourse-job))/builds/((.:build-number))|((.:concourse-team))/((.:concourse-pipeline))/((.:concourse-job)) build number ((.:build-number))>.
                      Lock was claimed at ((.:date)) UTC.

                      In 15 minutes if the deadlock is still detected it will be force-unlocked.
                      In order to prevent this you should pause the <https://pay-cd.deploy.payments.service.gov.uk/teams/((.:concourse-team))/pipelines/init-lock-pools|((.:concourse-team)) init-lock-pools pipeline>

                      <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
                      """
                  }
                }
              }
            }
          }
        }
      }
    }
    new Job {
      name = "auto-resolve-deadlock-of-\(pool_name)-lock"
      plan {
        new InParallelStep {
          in_parallel = new InParallelConfig {
            steps {
              new GetStep {
                get = "every-15-minutes"
                trigger = true
              }
              new GetStep { get = "pay-ci" }
              new GetStep { get = "lock-pool-repo" }
              new shared_resources_for_lock_pools.GetLockStep { pool = pool_name }
            }
          }
        }
        new TaskStep {
          task = "get-status-of-\(pool_name)-lock"
          file = "pay-ci/ci/tasks/lock-pools/report-lock-status.yml"
          params {
            ["LOCK_NAME"] = pool_name
          }
        }
        new TryStep {
          try = new TaskStep {
            task = "detect-deadlock-of-\(pool_name)-lock"
            file = "pay-ci/ci/tasks/lock-pools/detect-deadlock.yml"
            params {
              ["LOCK_NAME"] = pool_name
            }
            on_failure = new DoStep {
              do {
                new InParallelStep {
                  in_parallel = new Listing<Step> {
                    shared_resources.loadVar("concourse-team", "lock-status/team")
                    shared_resources.loadVar("concourse-pipeline", "lock-status/pipeline")
                    shared_resources.loadVar("concourse-job", "lock-status/job")
                    shared_resources.loadVar("build-number", "lock-status/build-number")
                    shared_resources.loadVar("date", "lock-status/date")
                  }
                }
                new InParallelStep {
                  in_parallel = new Listing<Step> {
                    new PutStep {
                      put = "slack-notification"
                      attempts = 10
                      params = new Mapping {
                        ["channel"] = "#govuk-pay-starling"
                        ["silent"] = true
                        ["icon_emoji"] = ":concourse:"
                        ["username"] = "pay-concourse"
                        ["text"] = """
                          :concourse-red: :lock: Deadlock detected in ((.:concourse-team)) for lock \(pool_name)-lock.

                          Claimant: <https://pay-cd.deploy.payments.service.gov.uk/teams/((.:concourse-team))/pipelines/((.:concourse-pipeline))/jobs/((.:concourse-job))/builds/((.:build-number))|((.:concourse-team))/((.:concourse-pipeline))/((.:concourse-job)) build number ((.:build-number))>.
                          Lock was claimed at ((.:date)) UTC.

                          Force unlocking!

                          <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
                          """
                      }
                    }
                    new shared_resources_for_lock_pools.ReleaseLockStep {
                      pool = pool_name
                      params {
                        ["release"] = "get-already-claimed-\(pool_name)-lock"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    new Job {
      name = "auto-resolve-failed-job-deadlock-of-\(pool_name)-lock"
      plan {
        new InParallelStep {
          in_parallel = new InParallelConfig {
            steps {
              new GetStep {
                get = "every-5-minutes"
                trigger = true
              }
              new GetStep { get = "pay-ci" }
              new GetStep { get = "lock-pool-repo" }
              new shared_resources_for_lock_pools.GetLockStep { pool = pool_name }
            }
          }
        }
        new TaskStep {
          task = "get-status-of-\(pool_name)-lock"
          file = "pay-ci/ci/tasks/lock-pools/report-lock-status.yml"
          params {
            ["LOCK_NAME"] = pool_name
          }
        }
        new TryStep {
          try = new TaskStep {
            task = "detect-failed-job-deadlock-of-\(pool_name)-lock"
            file = "pay-ci/ci/tasks/lock-pools/detect-deadlock-from-failed-job.yml"
            params {
              ["FLY_PASSWORD"] = "((readonly_local_user_password))"
            }
            on_failure = new DoStep {
              do {
                new InParallelStep {
                  in_parallel = new Listing<Step> {
                    shared_resources.loadVar("concourse-team", "lock-status/team")
                    shared_resources.loadVar("concourse-pipeline", "lock-status/pipeline")
                    shared_resources.loadVar("concourse-job", "lock-status/job")
                    shared_resources.loadVar("build-number", "lock-status/build-number")
                    shared_resources.loadVar("date", "lock-status/date")
                  }
                }
                new InParallelStep {
                  in_parallel = new Listing<Step> {
                    new PutStep {
                      put = "slack-notification"
                      attempts = 10
                      params = new Mapping {
                        ["channel"] = "#govuk-pay-starling"
                        ["silent"] = true
                        ["icon_emoji"] = ":concourse:"
                        ["username"] = "pay-concourse"
                        ["text"] = """
                          :concourse-red: :lock: Deadlock due to failed job detected in ((.:concourse-team)) for lock \(pool_name)-lock.

                          Claimant: <https://pay-cd.deploy.payments.service.gov.uk/teams/((.:concourse-team))/pipelines/((.:concourse-pipeline))/jobs/((.:concourse-job))/builds/((.:build-number))|((.:concourse-team))/((.:concourse-pipeline))/((.:concourse-job)) build number ((.:build-number))>.
                          Lock was claimed at ((.:date)) UTC.
                          The claimant job is in a failure state meaning the lock will never be released.

                          Force unlocking!

                          <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
                          """
                      }
                    }
                    new shared_resources_for_lock_pools.ReleaseLockStep {
                      pool = pool_name
                      params {
                        ["release"] = "get-already-claimed-\(pool_name)-lock"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}