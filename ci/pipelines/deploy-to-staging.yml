jobs:
- name: update-pipeline
  plan:
  - get: pipeline-source
    trigger: true
  - task: generate-yaml-from-pkl
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-concourse-runner
          tag: latest
      inputs:
      - name: pipeline-source
      outputs:
      - name: pipeline-source
      run:
        path: ash
        args:
        - -c
        - mkdir -p 'pay-deploy' && pkl eval 'pay-deploy/deploy-to-staging.pkl' > 'pay-deploy/deploy-to-staging.yaml'
        dir: pipeline-source/ci/pkl-pipelines/
  - set_pipeline: deploy-to-staging
    file: pipeline-source/ci/pkl-pipelines/pay-deploy/deploy-to-staging.yaml
- name: deploy-adminusers-to-staging
  plan:
  - in_parallel:
    - get: adminusers-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-adminusers-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: adminusers-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: adminusers-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: adminusers
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: adminusers
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: adminusers
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: adminusers
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: adminusers
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: adminusers
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: adminusers-db-migration-staging
  plan:
  - in_parallel:
    - get: pay-ci
    - get: adminusers-ecr-registry-staging
      passed:
      - deploy-adminusers-to-staging
      params:
        format: oci
      trigger: false
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - in_parallel:
    - load_var: role
      file: assume-role/assume-role.json
      format: json
    - load_var: application_image_tag
      file: adminusers-ecr-registry-staging/tag
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':postgres: starting $BUILD_JOB_NAME on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  - task: run-db-migration
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-node-runner
          tag: node16
      inputs:
      - name: pay-ci
      params:
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        AWS_PAGER: ''
        AWS_REGION: eu-west-1
        CLUSTER_NAME: staging-2-fargate
        APP_NAME: adminusers
        APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      run:
        path: node
        args:
        - pay-ci/ci/scripts/run-ecs-db-migration.js
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':green-circle: $BUILD_JOB_NAME completed successfully on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':red-circle: $BUILD_JOB_NAME failed on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
- name: smoke-test-adminusers-on-staging
  plan:
  - in_parallel:
      steps:
      - get: adminusers-ecr-registry-staging
        passed:
        - deploy-adminusers-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: adminusers-ecr-registry-staging
  - load_var: application_image_tag
    file: adminusers-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: adminusers
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: adminusers-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: adminusers-ecr-registry-staging
        passed:
        - smoke-test-adminusers-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: adminusers-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: adminusers-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: adminusers
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: adminusers
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: adminusers
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-adminusers-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: adminusers-ecr-registry-staging
        passed:
        - adminusers-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-adminusers-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: adminusers-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/adminusers
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-cardid-to-staging
  plan:
  - in_parallel:
    - get: cardid-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-cardid-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: cardid-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: cardid-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: cardid
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: cardid
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: cardid
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: cardid
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: cardid
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: cardid
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: smoke-test-cardid-on-staging
  plan:
  - in_parallel:
      steps:
      - get: cardid-ecr-registry-staging
        passed:
        - deploy-cardid-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: cardid-ecr-registry-staging
  - load_var: application_image_tag
    file: cardid-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: cardid
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: cardid-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: cardid-ecr-registry-staging
        passed:
        - smoke-test-cardid-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: cardid-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: cardid-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: cardid
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: cardid
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: cardid
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-cardid-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: cardid-ecr-registry-staging
        passed:
        - cardid-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-cardid-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: cardid-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/cardid
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-connector-to-staging
  plan:
  - in_parallel:
    - get: connector-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-connector-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: connector-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: connector-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: connector
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: connector
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: connector
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: connector
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: connector
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: connector
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: connector-db-migration-staging
  plan:
  - in_parallel:
    - get: pay-ci
    - get: connector-ecr-registry-staging
      passed:
      - deploy-connector-to-staging
      params:
        format: oci
      trigger: false
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - in_parallel:
    - load_var: role
      file: assume-role/assume-role.json
      format: json
    - load_var: application_image_tag
      file: connector-ecr-registry-staging/tag
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':postgres: starting $BUILD_JOB_NAME on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  - task: run-db-migration
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-node-runner
          tag: node16
      inputs:
      - name: pay-ci
      params:
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        AWS_PAGER: ''
        AWS_REGION: eu-west-1
        CLUSTER_NAME: staging-2-fargate
        APP_NAME: connector
        APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      run:
        path: node
        args:
        - pay-ci/ci/scripts/run-ecs-db-migration.js
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':green-circle: $BUILD_JOB_NAME completed successfully on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':red-circle: $BUILD_JOB_NAME failed on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
- name: smoke-test-connector-on-staging
  plan:
  - in_parallel:
      steps:
      - get: connector-ecr-registry-staging
        passed:
        - deploy-connector-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: connector-ecr-registry-staging
  - load_var: application_image_tag
    file: connector-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: connector
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: connector-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: connector-ecr-registry-staging
        passed:
        - smoke-test-connector-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: connector-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: connector-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: connector
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: connector
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: connector
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-connector-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: connector-ecr-registry-staging
        passed:
        - connector-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-connector-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: connector-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/connector
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-egress-to-staging
  plan:
  - in_parallel:
    - get: egress-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-egress-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: egress-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: egress-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
    params:
      APP_NAME: egress
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      APP_NAME: egress
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-egress.yml
    params:
      APP_NAME: egress
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: egress
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: smoke-test-egress-on-staging
  plan:
  - in_parallel:
      steps:
      - get: egress-ecr-registry-staging
        passed:
        - deploy-egress-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: egress-ecr-registry-staging
  - load_var: application_image_tag
    file: egress-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
    params:
      APP_NAME: egress
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-egress-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: egress-ecr-registry-staging
        passed:
        - smoke-test-egress-on-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-egress-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: egress-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/egress
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-frontend-to-staging
  plan:
  - in_parallel:
    - get: frontend-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: nginx-forward-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-frontend-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: frontend-ecr-registry-staging
    - task: parse-nginx-forward-proxy-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: nginx-forward-proxy-ecr-registry-staging
      output_mapping:
        ecr-release-info: nginx-forward-proxy-release-info
  - in_parallel:
    - load_var: application_image_tag
      file: frontend-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
    - load_var: nginx_forward_proxy_image_tag
      file: nginx-forward-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: frontend
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: nginx_forward_proxy_release_number
      file: snippet/nginx_forward_proxy_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: frontend
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: frontend
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
      APP_NAME: frontend
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-frontend-with-adot.yml
    params:
      APP_NAME: frontend
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: frontend
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-nginx-forward-proxy-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_forward_proxy_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx-forward-proxy/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx-forward-proxy
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-nginx-forward-proxy-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_forward_proxy_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx-forward-proxy/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx-forward-proxy
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: smoke-test-frontend-on-staging
  plan:
  - in_parallel:
      steps:
      - get: frontend-ecr-registry-staging
        passed:
        - deploy-frontend-to-staging
        trigger: true
      - get: nginx-forward-proxy-ecr-registry-staging
        passed:
        - deploy-frontend-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: frontend-ecr-registry-staging
  - load_var: application_image_tag
    file: frontend-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: frontend
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: frontend-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: frontend-ecr-registry-staging
        passed:
        - smoke-test-frontend-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: frontend-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: frontend-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: frontend
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: frontend
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: frontend
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-frontend-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: frontend-ecr-registry-staging
        passed:
        - frontend-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-frontend-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: frontend-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/frontend
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-ledger-to-staging
  plan:
  - in_parallel:
    - get: ledger-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-ledger-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: ledger-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: ledger-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: ledger
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: ledger
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: ledger
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: ledger
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: ledger
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: ledger
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: ledger-db-migration-staging
  plan:
  - in_parallel:
    - get: pay-ci
    - get: ledger-ecr-registry-staging
      passed:
      - deploy-ledger-to-staging
      params:
        format: oci
      trigger: false
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - in_parallel:
    - load_var: role
      file: assume-role/assume-role.json
      format: json
    - load_var: application_image_tag
      file: ledger-ecr-registry-staging/tag
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':postgres: starting $BUILD_JOB_NAME on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  - task: run-db-migration
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-node-runner
          tag: node16
      inputs:
      - name: pay-ci
      params:
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        AWS_PAGER: ''
        AWS_REGION: eu-west-1
        CLUSTER_NAME: staging-2-fargate
        APP_NAME: ledger
        APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      run:
        path: node
        args:
        - pay-ci/ci/scripts/run-ecs-db-migration.js
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':green-circle: $BUILD_JOB_NAME completed successfully on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':red-circle: $BUILD_JOB_NAME failed on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
- name: smoke-test-ledger-on-staging
  plan:
  - in_parallel:
      steps:
      - get: ledger-ecr-registry-staging
        passed:
        - deploy-ledger-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: ledger-ecr-registry-staging
  - load_var: application_image_tag
    file: ledger-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: ledger
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: ledger-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: ledger-ecr-registry-staging
        passed:
        - smoke-test-ledger-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: ledger-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: ledger-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: ledger
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: ledger
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: ledger
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-ledger-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: ledger-ecr-registry-staging
        passed:
        - ledger-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-ledger-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: ledger-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/ledger
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-notifications-to-staging
  plan:
  - in_parallel:
    - get: notifications-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-notifications-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: notifications-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: notifications-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: notifications
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      APP_NAME: notifications
  - task: deploy-to-staging
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: hashicorp/terraform
          tag: 1.3.7
      inputs:
      - name: pay-infra
      - name: pay-ci
      run:
        path: /bin/sh
        args:
        - pay-ci/ci/scripts/deploy-notifications.sh
    params:
      APP_NAME: notifications
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: notifications
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: smoke-test-notifications-on-staging
  plan:
  - in_parallel:
      steps:
      - get: notifications-ecr-registry-staging
        passed:
        - deploy-notifications-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: notifications-ecr-registry-staging
  - load_var: application_image_tag
    file: notifications-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: notifications
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-notifications-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: notifications-ecr-registry-staging
        passed:
        - smoke-test-notifications-on-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-notifications-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: notifications-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/notifications
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-products-to-staging
  plan:
  - in_parallel:
    - get: products-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-products-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: products-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: products-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: products
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: products
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: products
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: products
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: products
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: products
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: products-db-migration-staging
  plan:
  - in_parallel:
    - get: pay-ci
    - get: products-ecr-registry-staging
      passed:
      - deploy-products-to-staging
      params:
        format: oci
      trigger: false
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - in_parallel:
    - load_var: role
      file: assume-role/assume-role.json
      format: json
    - load_var: application_image_tag
      file: products-ecr-registry-staging/tag
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':postgres: starting $BUILD_JOB_NAME on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  - task: run-db-migration
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-node-runner
          tag: node16
      inputs:
      - name: pay-ci
      params:
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        AWS_PAGER: ''
        AWS_REGION: eu-west-1
        CLUSTER_NAME: staging-2-fargate
        APP_NAME: products
        APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      run:
        path: node
        args:
        - pay-ci/ci/scripts/run-ecs-db-migration.js
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':green-circle: $BUILD_JOB_NAME completed successfully on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':red-circle: $BUILD_JOB_NAME failed on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
- name: smoke-test-products-on-staging
  plan:
  - in_parallel:
      steps:
      - get: products-ecr-registry-staging
        passed:
        - deploy-products-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: products-ecr-registry-staging
  - load_var: application_image_tag
    file: products-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: products
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: products-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: products-ecr-registry-staging
        passed:
        - smoke-test-products-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: products-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: products-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: products
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: products
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: products
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-products-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: products-ecr-registry-staging
        passed:
        - products-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-products-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: products-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/products
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-products-ui-to-staging
  plan:
  - in_parallel:
    - get: products-ui-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-products-ui-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: products-ui-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: products-ui-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: products-ui
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: products-ui
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: products-ui
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: products-ui
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: products-ui
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: products-ui
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: smoke-test-products-ui-on-staging
  plan:
  - in_parallel:
      steps:
      - get: products-ui-ecr-registry-staging
        passed:
        - deploy-products-ui-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: products-ui-ecr-registry-staging
  - load_var: application_image_tag
    file: products-ui-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: products-ui
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: products-ui-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: products-ui-ecr-registry-staging
        passed:
        - smoke-test-products-ui-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: products-ui-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: products-ui-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: products-ui
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: products-ui
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: products-ui
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-products-ui-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: products-ui-ecr-registry-staging
        passed:
        - products-ui-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-products-ui-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: products-ui-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/products-ui
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-publicapi-to-staging
  plan:
  - in_parallel:
    - get: publicapi-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-publicapi-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: publicapi-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: publicapi-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: publicapi
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: publicapi
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: publicapi
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: publicapi
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: publicapi
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: publicapi
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: smoke-test-publicapi-on-staging
  plan:
  - in_parallel:
      steps:
      - get: publicapi-ecr-registry-staging
        passed:
        - deploy-publicapi-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: publicapi-ecr-registry-staging
  - load_var: application_image_tag
    file: publicapi-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: publicapi
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: publicapi-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: publicapi-ecr-registry-staging
        passed:
        - smoke-test-publicapi-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: publicapi-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: publicapi-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: publicapi
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: publicapi
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: publicapi
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-publicapi-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: publicapi-ecr-registry-staging
        passed:
        - publicapi-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-publicapi-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: publicapi-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/publicapi
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-publicauth-to-staging
  plan:
  - in_parallel:
    - get: publicauth-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-publicauth-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: publicauth-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: publicauth-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: publicauth
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: publicauth
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: publicauth
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: publicauth
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: publicauth-db-migration-staging
  plan:
  - in_parallel:
    - get: pay-ci
    - get: publicauth-ecr-registry-staging
      passed:
      - deploy-publicauth-to-staging
      params:
        format: oci
      trigger: false
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - in_parallel:
    - load_var: role
      file: assume-role/assume-role.json
      format: json
    - load_var: application_image_tag
      file: publicauth-ecr-registry-staging/tag
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':postgres: starting $BUILD_JOB_NAME on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  - task: run-db-migration
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-node-runner
          tag: node16
      inputs:
      - name: pay-ci
      params:
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        AWS_PAGER: ''
        AWS_REGION: eu-west-1
        CLUSTER_NAME: staging-2-fargate
        APP_NAME: publicauth
        APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      run:
        path: node
        args:
        - pay-ci/ci/scripts/run-ecs-db-migration.js
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':green-circle: $BUILD_JOB_NAME completed successfully on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':red-circle: $BUILD_JOB_NAME failed on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
- name: smoke-test-publicauth-on-staging
  plan:
  - in_parallel:
      steps:
      - get: publicauth-ecr-registry-staging
        passed:
        - deploy-publicauth-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: publicauth-ecr-registry-staging
  - load_var: application_image_tag
    file: publicauth-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: publicauth
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-publicauth-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: publicauth-ecr-registry-staging
        passed:
        - smoke-test-publicauth-on-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-publicauth-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: publicauth-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/publicauth
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-selfservice-to-staging
  plan:
  - in_parallel:
    - get: selfservice-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-selfservice-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: selfservice-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: selfservice-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: selfservice
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: selfservice
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: selfservice
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: selfservice
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: selfservice
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: selfservice
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: smoke-test-selfservice-on-staging
  plan:
  - in_parallel:
      steps:
      - get: selfservice-ecr-registry-staging
        passed:
        - deploy-selfservice-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: selfservice-ecr-registry-staging
  - load_var: application_image_tag
    file: selfservice-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: selfservice
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: selfservice-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: selfservice-ecr-registry-staging
        passed:
        - smoke-test-selfservice-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: selfservice-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: selfservice-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: selfservice
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: selfservice
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: selfservice
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-selfservice-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: selfservice-ecr-registry-staging
        passed:
        - selfservice-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-selfservice-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: selfservice-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/selfservice
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-toolbox-to-staging
  plan:
  - in_parallel:
    - get: toolbox-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-toolbox-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: toolbox-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: toolbox-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: toolbox
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: toolbox
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: toolbox
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: toolbox
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: push-toolbox-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: toolbox-ecr-registry-staging
        passed:
        - deploy-toolbox-to-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-toolbox-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: toolbox-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/toolbox
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-webhooks-to-staging
  plan:
  - in_parallel:
    - get: webhooks-ecr-registry-staging
      trigger: true
    - get: adot-ecr-registry-staging
      trigger: true
    - get: nginx-proxy-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-webhooks-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: webhooks-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: webhooks-ecr-registry-staging/tag
    - load_var: adot_image_tag
      file: adot-ecr-registry-staging/tag
    - load_var: nginx_image_tag
      file: nginx-proxy-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: webhooks
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: adot_release_number
      file: snippet/adot_release_number
    - load_var: nginx_release_number
      file: snippet/nginx_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: webhooks
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: check-pact-compatibility
    file: pay-ci/ci/tasks/check-pact-compatibility.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: webhooks
      PACT_TAG: staging-fargate
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      APP_NAME: webhooks
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-app-with-adot.yml
    params:
      APP_NAME: webhooks
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: webhooks
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      NGINX_IMAGE_TAG: ((.:nginx_image_tag))
      ADOT_IMAGE_TAG: ((.:adot_image_tag))
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
            sidecar: adot
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
      - put: send-nginx-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:nginx_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: nginx
      - put: send-adot-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_sidecar_release_number
          value: ((.:adot_release_number))
          job: deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
            sidecar: adot
- name: webhooks-db-migration-staging
  plan:
  - in_parallel:
    - get: pay-ci
    - get: webhooks-ecr-registry-staging
      passed:
      - deploy-webhooks-to-staging
      params:
        format: oci
      trigger: false
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - in_parallel:
    - load_var: role
      file: assume-role/assume-role.json
      format: json
    - load_var: application_image_tag
      file: webhooks-ecr-registry-staging/tag
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':postgres: starting $BUILD_JOB_NAME on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  - task: run-db-migration
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentdigitalservice/pay-node-runner
          tag: node16
      inputs:
      - name: pay-ci
      params:
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        AWS_PAGER: ''
        AWS_REGION: eu-west-1
        CLUSTER_NAME: staging-2-fargate
        APP_NAME: webhooks
        APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      run:
        path: node
        args:
        - pay-ci/ci/scripts/run-ecs-db-migration.js
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':green-circle: $BUILD_JOB_NAME completed successfully on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ':postgres:'
      username: pay-concourse
      text: ':red-circle: $BUILD_JOB_NAME failed on staging-2 - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
- name: smoke-test-webhooks-on-staging
  plan:
  - in_parallel:
      steps:
      - get: webhooks-ecr-registry-staging
        passed:
        - deploy-webhooks-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: webhooks-ecr-registry-staging
  - load_var: application_image_tag
    file: webhooks-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: webhooks
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: webhooks-pact-tag
  plan:
  - in_parallel:
      steps:
      - get: webhooks-ecr-registry-staging
        passed:
        - smoke-test-webhooks-on-staging
        trigger: true
      - get: pay-ci
  - load_var: application_image_tag
    file: webhooks-ecr-registry-staging/tag
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: webhooks-ecr-registry-staging
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-notification-snippets.yml
    params:
      APP_NAME: webhooks
      ACTION_NAME: Pact tag
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: get-git-sha-for-release-tag
    file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
    params:
      APP_NAME: webhooks
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      GITHUB_TOKEN: ((github-access-token))
  - load_var: git-sha
    file: git-sha/git-sha
  - task: tag-pact
    file: pay-ci/ci/tasks/pact-tag.yml
    params:
      GIT_SHA: ((.:git-sha))
      APP_NAME: webhooks
      PACT_TAG: staging-fargate
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-webhooks-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: webhooks-ecr-registry-staging
        passed:
        - webhooks-pact-tag
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-webhooks-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: webhooks-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/webhooks
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-webhooks-egress-to-staging
  plan:
  - in_parallel:
    - get: webhooks-egress-ecr-registry-staging
      trigger: true
    - get: pay-infra
    - get: pay-ci
  - in_parallel:
    - task: parse-webhooks-egress-ecr-release-tag
      file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
      input_mapping:
        ecr-image: webhooks-egress-ecr-registry-staging
  - in_parallel:
    - load_var: application_image_tag
      file: webhooks-egress-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
    params:
      APP_NAME: webhooks-egress
      ACTION_NAME: Deployment
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      text: |-
        ((.:start_snippet)) 

         <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
      icon_emoji: ':fargate:'
      username: pay-concourse
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
      AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: check-release-versions
    file: pay-ci/ci/tasks/check-release-versions.yml
    params:
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      AWS_REGION: eu-west-1
      CLUSTER_NAME: staging-2-fargate
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      APP_NAME: webhooks-egress
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-webhooks-egress.yml
    params:
      APP_NAME: webhooks-egress
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  - task: wait-for-deploy
    file: pay-ci/ci/tasks/wait-for-deploy.yml
    params:
      APP_NAME: webhooks-egress
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  serial: true
  serial_groups:
  - deploy-application
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: smoke-test-webhooks-egress-on-staging
  plan:
  - in_parallel:
      steps:
      - get: webhooks-egress-ecr-registry-staging
        passed:
        - deploy-webhooks-egress-to-staging
        trigger: true
      - get: pay-ci
  - task: parse-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: webhooks-egress-ecr-registry-staging
  - load_var: application_image_tag
    file: webhooks-egress-ecr-registry-staging/tag
  - task: create-notification-snippets
    file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
    params:
      APP_NAME: webhooks-egress
      ACTION_NAME: Smoke test
      ENV: staging-2
      APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  - in_parallel:
    - load_var: app_name
      file: snippet/app_name
    - load_var: app_release_number
      file: snippet/app_release_number
    - load_var: success_snippet
      file: snippet/success
    - load_var: failure_snippet
      file: snippet/failure
    - load_var: start_snippet
      file: snippet/start
  - task: assume-role
    file: pay-ci/ci/tasks/assume-role.yml
    params:
      AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
      AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
    output_mapping:
      assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - in_parallel:
      steps:
      - task: run_create_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_sandbox_stag
      - task: run_recurring_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_sandbox_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_with_3ds2_exemption-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_3ds2ex_stag
      - attempts: 10
        task: run_create_card_payment_worldpay_without_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_wpay_stag
      - attempts: 10
        task: run_recurring_card_payment_worldpay-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: reccard_worldpay_stag
      - task: run_cancel_card_payment_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: cancel_sandbox_stag
      - task: run_use_payment_link_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: pymntlnk_sandbox_stag
      - task: run_create_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_stag
      - task: run_create_card_payment_stripe_3ds-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: card_stripe_3ds_stag
      - task: run_recurring_card_payment_stripe-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: rec_card_stripe_stag
      - task: run_notifications_sandbox-staging
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
          SMOKE_TEST_NAME: notifcatns_sndbx_stag
      limit: 8
  serial_groups:
  - smoke-test
  on_success:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-activity'
          text: |-
            ((.:success_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: success
  on_failure:
    in_parallel:
      steps:
      - put: slack-notification
        params:
          channel: '#govuk-pay-announce'
          text: |-
            ((.:failure_snippet)) 
             - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>
          icon_emoji: ':fargate:'
          username: pay-concourse
      - put: send-app-release-number-metric
        resource: prometheus-pushgateway
        params:
          metric: deployment_pipeline_app_release_number
          value: ((.:app_release_number))
          job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
          labels:
            pipeline: $BUILD_PIPELINE_NAME
            concourse_job: $BUILD_JOB_NAME
            app: ((.:app_name))
            environment: staging-2
            instance: concourse
            outcome: failure
- name: push-webhooks-egress-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: webhooks-egress-ecr-registry-staging
        passed:
        - smoke-test-webhooks-egress-on-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-webhooks-egress-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: webhooks-egress-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/webhooks-egress
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: push-adot-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: adot-ecr-registry-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-adot-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: adot-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/adot
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: push-alpine-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: alpine-ecr-registry-staging
        passed:
        - deploy-scheduled-tasks
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-alpine-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: alpine-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/alpine
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: push-nginx-forward-proxy-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: nginx-forward-proxy-ecr-registry-staging
        passed:
        - deploy-frontend-to-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-nginx-forward-proxy-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: nginx-forward-proxy-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/nginx-forward-proxy
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: push-nginx-proxy-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: nginx-proxy-ecr-registry-staging
        passed:
        - deploy-toolbox-to-staging
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-nginx-proxy-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: nginx-proxy-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/docker-nginx-proxy
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: push-stream-s3-sqs-to-production-ecr
  plan:
  - in_parallel:
      steps:
      - get: stream-s3-sqs-ecr-registry-staging
        passed:
        - deploy-scheduled-tasks
        params:
          skip_download: true
          format: oci
        trigger: true
      - get: pay-ci
  - task: parse-stream-s3-sqs-ecr-release-tag
    file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
    input_mapping:
      ecr-image: stream-s3-sqs-ecr-registry-staging
  - in_parallel:
      steps:
      - load_var: app_name
        file: ecr-release-info/app_name
      - load_var: app_release_number
        file: ecr-release-info/release-number
      - load_var: release_number
        file: ecr-release-info/release-number
  - in_parallel:
      steps:
      - task: assume-copy-from-ecr-staging-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-from-ecr-in-staging
        output_mapping:
          assume-role: assume-copy-from-ecr-staging-role
      - task: assume-write-to-ecr-prod-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_prod_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: copy-to-ecr-in-prod
        output_mapping:
          assume-role: assume-write-to-ecr-prod-role
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
  - in_parallel:
      steps:
      - load_var: copy-from-staging-ecr-role
        file: assume-copy-from-ecr-staging-role/assume-role.json
        format: json
      - load_var: write-to-prod-ecr-role
        file: assume-write-to-ecr-prod-role/assume-role.json
        format: json
  - task: copy-images-to-prod
    file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
    privileged: true
    params:
      ECR_REPO_NAME: govukpay/stream-s3-sqs
      RELEASE_NUMBER: ((.:release_number))
      SOURCE_ECR_REGISTRY: ((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      DESTINATION_ECR_REGISTRY: ((pay_aws_prod_account_id)).dkr.ecr.eu-west-1.amazonaws.com
      SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-staging-ecr-role.AWS_ACCESS_KEY_ID))
      SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
      SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-staging-ecr-role.AWS_SESSION_TOKEN))
      DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-prod-ecr-role.AWS_ACCESS_KEY_ID))
      DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-prod-ecr-role.AWS_SECRET_ACCESS_KEY))
      DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-prod-ecr-role.AWS_SESSION_TOKEN))
  on_success:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: success
  on_failure:
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: ((.:app_release_number))
      job: deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure
      labels:
        pipeline: $BUILD_PIPELINE_NAME
        concourse_job: $BUILD_JOB_NAME
        app: ((.:app_name))
        environment: staging-2
        instance: concourse
        outcome: failure
- name: deploy-scheduled-tasks
  plan:
  - in_parallel:
    - get: alpine-ecr-registry-staging
      trigger: true
    - get: stream-s3-sqs-ecr-registry-staging
      trigger: true
    - get: pay-ci
    - get: pay-infra
  - in_parallel:
    - load_var: alpine_image_tag
      file: alpine-ecr-registry-staging/tag
    - load_var: stream_s3_sqs_image_tag
      file: stream-s3-sqs-ecr-registry-staging/tag
    - task: assume-role
      file: pay-ci/ci/tasks/assume-role.yml
      params:
        AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
        AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      output_mapping:
        assume-role: assume-role
  - load_var: role
    file: assume-role/assume-role.json
    format: json
  - task: deploy-to-staging
    file: pay-ci/ci/tasks/deploy-scheduled-tasks.yml
    params:
      APP_NAME: scheduled-tasks
      ALPINE_IMAGE_TAG: ((.:alpine_image_tag))
      STREAM_S3_SQS_IMAGE_TAG: ((.:stream_s3_sqs_image_tag))
      ACCOUNT: staging
      ENVIRONMENT: staging-2
      AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
      AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
      AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
  on_success:
    attempts: 10
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      silent: true
      text: ':green-circle: Scheduled tasks deployed alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      icon_emoji: ':concourse:'
      username: pay-concourse
  on_failure:
    attempts: 10
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      silent: true
      text: ':red-circle: Scheduled tasks failed to deploy alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
      icon_emoji: ':concourse:'
      username: pay-concourse
resources:
- name: pipeline-source
  type: git
  source:
    uri: https://github.com/alphagov/pay-ci
    branch: master
    username: alphagov-pay-ci-concourse
    password: ((github-access-token))
    paths:
    - ci/pkl-pipelines/pay-deploy/deploy-to-staging.pkl
    - ci/pkl-pipelines/common/**
  icon: github
- name: prometheus-pushgateway
  type: prometheus-pushgateway
  source:
    url: https://prometheus-pushgateway.deploy.payments.service.gov.uk
    job: deployment_pipeline_release_number
- name: pay-ci
  type: git
  source:
    uri: https://github.com/alphagov/pay-ci
    branch: master
    username: alphagov-pay-ci-concourse
    password: ((github-access-token))
  icon: github
- name: pay-infra
  type: git
  source:
    uri: https://github.com/alphagov/pay-infra
    branch: master
    username: alphagov-pay-ci-concourse
    password: ((github-access-token))
  icon: github
- name: adminusers-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/adminusers
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: cardid-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/cardid
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: connector-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/connector
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: egress-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/egress
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: frontend-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/frontend
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: ledger-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/ledger
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: notifications-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/notifications
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: products-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/products
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: products-ui-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/products-ui
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: publicapi-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/publicapi
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: publicauth-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/publicauth
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: selfservice-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/selfservice
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: toolbox-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/toolbox
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: webhooks-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/webhooks
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: webhooks-egress-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/webhooks-egress
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: adot-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/adot
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: alpine-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/alpine
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: nginx-forward-proxy-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/nginx-forward-proxy
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: nginx-proxy-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/docker-nginx-proxy
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: stream-s3-sqs-ecr-registry-staging
  type: registry-image
  source:
    repository: govukpay/stream-s3-sqs
    variant: release
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: ((pay_aws_staging_account_id))
    aws_region: eu-west-1
  icon: docker
- name: slack-notification
  type: slack-notification
  source:
    url: https://hooks.slack.com/services/((slack-notification-secret))
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
- name: prometheus-pushgateway
  type: registry-image
  source:
    repository: governmentdigitalservice/pay-prometheus-pushgateway-resource
    tag: latest-master
groups:
- name: adminusers
  jobs:
  - deploy-adminusers-to-staging
  - smoke-test-adminusers-on-staging
  - adminusers-pact-tag
  - push-adminusers-to-production-ecr
  - adminusers-db-migration-staging
- name: cardid
  jobs:
  - deploy-cardid-to-staging
  - smoke-test-cardid-on-staging
  - cardid-pact-tag
  - push-cardid-to-production-ecr
- name: connector
  jobs:
  - deploy-connector-to-staging
  - smoke-test-connector-on-staging
  - connector-pact-tag
  - push-connector-to-production-ecr
  - connector-db-migration-staging
- name: egress
  jobs:
  - deploy-egress-to-staging
  - smoke-test-egress-on-staging
  - push-egress-to-production-ecr
- name: frontend
  jobs:
  - deploy-frontend-to-staging
  - smoke-test-frontend-on-staging
  - frontend-pact-tag
  - push-frontend-to-production-ecr
- name: ledger
  jobs:
  - deploy-ledger-to-staging
  - smoke-test-ledger-on-staging
  - ledger-pact-tag
  - push-ledger-to-production-ecr
  - ledger-db-migration-staging
- name: notifications
  jobs:
  - deploy-notifications-to-staging
  - smoke-test-notifications-on-staging
  - push-notifications-to-production-ecr
- name: products
  jobs:
  - deploy-products-to-staging
  - smoke-test-products-on-staging
  - products-pact-tag
  - push-products-to-production-ecr
  - products-db-migration-staging
- name: products-ui
  jobs:
  - deploy-products-ui-to-staging
  - smoke-test-products-ui-on-staging
  - products-ui-pact-tag
  - push-products-ui-to-production-ecr
- name: publicapi
  jobs:
  - deploy-publicapi-to-staging
  - smoke-test-publicapi-on-staging
  - publicapi-pact-tag
  - push-publicapi-to-production-ecr
- name: publicauth
  jobs:
  - deploy-publicauth-to-staging
  - smoke-test-publicauth-on-staging
  - push-publicauth-to-production-ecr
  - publicauth-db-migration-staging
- name: selfservice
  jobs:
  - deploy-selfservice-to-staging
  - smoke-test-selfservice-on-staging
  - selfservice-pact-tag
  - push-selfservice-to-production-ecr
- name: toolbox
  jobs:
  - deploy-toolbox-to-staging
  - push-toolbox-to-production-ecr
- name: webhooks
  jobs:
  - deploy-webhooks-to-staging
  - smoke-test-webhooks-on-staging
  - webhooks-pact-tag
  - push-webhooks-to-production-ecr
  - webhooks-db-migration-staging
- name: webhooks-egress
  jobs:
  - deploy-webhooks-egress-to-staging
  - smoke-test-webhooks-egress-on-staging
  - push-webhooks-egress-to-production-ecr
- name: adot
  jobs:
  - push-adot-to-production-ecr
- name: alpine
  jobs:
  - deploy-scheduled-tasks
  - push-alpine-to-production-ecr
- name: nginx-forward-proxy
  jobs:
  - deploy-frontend-to-staging
  - push-nginx-forward-proxy-to-production-ecr
- name: nginx-proxy
  jobs:
  - deploy-toolbox-to-staging
  - push-nginx-proxy-to-production-ecr
- name: stream-s3-sqs
  jobs:
  - deploy-scheduled-tasks
  - push-stream-s3-sqs-to-production-ecr
- name: update-pipeline
  jobs:
  - update-pipeline
