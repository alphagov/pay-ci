definitions:
  array_anchors:
    - &load_app_name
      load_var: app_name
      file: snippet/app_name
    - &load_app_name_from_parse_release_tag
      load_var: app_name
      file: tags/app_name
    - &load_app_name_from_parse_ecr_release_tag
      load_var: app_name
      file: ecr-release-info/app_name
    - &load_app_name_from_parse_candidate_tag
      load_var: app_name
      file: parse-candidate-tag/app_name
    - &load_app_release_number
      load_var: app_release_number
      file: snippet/app_release_number
    - &load_app_release_number_from_parse_release_tag
      load_var: app_release_number
      file: tags/release-number
    - &load_app_release_number_from_parse_ecr_release_tag
      load_var: app_release_number
      file: ecr-release-info/release-number
    - &load_app_release_number_from_parse_candidate_tag
      load_var: app_release_number
      file: parse-candidate-tag/release-number
    - &load_adot_release_number
      load_var: adot_release_number
      file: snippet/adot_release_number
    - &load_nginx_release_number
      load_var: nginx_release_number
      file: snippet/nginx_release_number
    - &load_nginx_forward_proxy_release_number
      load_var: nginx_forward_proxy_release_number
      file: snippet/nginx_forward_proxy_release_number
    - &assume_copy_from_test_ecr_role
      task: assume-copy-from-ecr-test-role
      file: pay-ci/ci/tasks/assume-role.yml
      output_mapping:
        assume-role: assume-copy-from-ecr-test-role
      params:
        AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
        AWS_ROLE_SESSION_NAME: copy-from-ecr-in-test
    - &assume_write_to_staging_ecr_role
      task: assume-write-to-ecr-staging-role
      file: pay-ci/ci/tasks/assume-role.yml
      output_mapping:
        assume-role: assume-write-to-ecr-staging-role
      params:
        AWS_ROLE_ARN: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
        AWS_ROLE_SESSION_NAME: copy-to-ecr-in-staging
    - &load_copy_from_test_ecr_role
      load_var: copy-from-test-ecr-role
      file: assume-copy-from-ecr-test-role/assume-role.json
      format: json
    - &load_write_to_staging_ecr_role
      load_var: write-to-staging-ecr-role
      file: assume-write-to-ecr-staging-role/assume-role.json
      format: json

  copy_ecr_from_test_to_staging_params: &copy_ecr_from_test_to_staging_params
    RELEASE_NUMBER:  ((.:release_number))
    SOURCE_ECR_REGISTRY: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    DESTINATION_ECR_REGISTRY: "((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    SOURCE_AWS_ACCESS_KEY_ID: ((.:copy-from-test-ecr-role.AWS_ACCESS_KEY_ID))
    SOURCE_AWS_SECRET_ACCESS_KEY: ((.:copy-from-test-ecr-role.AWS_SECRET_ACCESS_KEY))
    SOURCE_AWS_SESSION_TOKEN: ((.:copy-from-test-ecr-role.AWS_SESSION_TOKEN))
    DESTINATION_AWS_ACCESS_KEY_ID: ((.:write-to-staging-ecr-role.AWS_ACCESS_KEY_ID))
    DESTINATION_AWS_SECRET_ACCESS_KEY: ((.:write-to-staging-ecr-role.AWS_SECRET_ACCESS_KEY))
    DESTINATION_AWS_SESSION_TOKEN: ((.:write-to-staging-ecr-role.AWS_SESSION_TOKEN))

  aws_test_config: &aws_test_config
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    # Need to create the role for the concourse user to assume in the test account
    aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
    # Hardcode the test account registry ID for now. Needs to be a string, not a number
    aws_ecr_registry_id: "((pay_aws_test_account_id))"
    aws_region: eu-west-1

  aws_staging_config: &aws_staging_config
    aws_access_key_id: ((readonly_access_key_id))
    aws_secret_access_key: ((readonly_secret_access_key))
    aws_session_token: ((readonly_session_token))
    aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
    aws_ecr_registry_id: "((pay_aws_staging_account_id))"
    aws_region: eu-west-1

  aws_assumed_role_creds: &aws_assumed_role_creds
    AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
    AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
    AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

  slack-notification-success: &slack_notification_success
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: "((.:success_snippet)) |
            <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_success_slack_notification: &put_success_slack_notification
    on_success:
      *slack_notification_success

  slack-notification-failure: &slack_notification_failure
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: "((.:failure_snippet)) \n
            - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_failure_slack_notification: &put_failure_slack_notification
    on_failure:
      *slack_notification_failure

  send_app_release_annotation: &send_app_release_annotation
    put: grafana-annotation
    params:
      tags:
        - ((.:app_name))
      template:  "released ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME} release ((.:app_release_number)) (build ${BUILD_ID})"

  pushgateway_default_labels: &pushgateway_default_labels
    pipeline: "$BUILD_PIPELINE_NAME"
    conocurse_job: "$BUILD_JOB_NAME"
    app: "((.:app_name))"
    environment: test-12
    instance: "concourse"

  send_app_release_metric_success: &send_app_release_metric_success
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: "((.:app_release_number))"
      job: "deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success

  send_nginx_release_metric_success: &send_nginx_release_metric_success
    put: send-nginx-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success
        sidecar: nginx

  send_nginx_forward_proxy_release_metric_success: &send_nginx_forward_proxy_release_metric_success
    put: send-nginx-forward-proxy-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_forward_proxy_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx-forward-proxy/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success
        sidecar: nginx-forward-proxy

  send_adot_release_metric_success: &send_adot_release_metric_success
    put: send-adot-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:adot_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/success"
      labels:
        <<: *pushgateway_default_labels
        outcome: success
        sidecar: adot

  send_app_release_metric_failure: &send_app_release_metric_failure
    put: send-app-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_app_release_number
      value: "((.:app_release_number))"
      job: "deployment_pipeline_app_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure

  send_nginx_release_metric_failure: &send_nginx_release_metric_failure
    put: send-nginx-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure
        sidecar: nginx

  send_nginx_forward_proxy_release_metric_failure: &send_nginx_forward_proxy_release_metric_failure
    put: send-nginx-forward-proxy-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:nginx_forward_proxy_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/nginx-forward-proxy/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure
        sidecar: nginx-forward-proxy

  send_adot_release_metric_failure: &send_adot_release_metric_failure
    put: send-adot-release-number-metric
    resource: prometheus-pushgateway
    params:
      metric: deployment_pipeline_sidecar_release_number
      value: "((.:adot_release_number))"
      job: "deployment_pipeline_sidecar_release_number/pipeline/$BUILD_PIPELINE_NAME/concourse_job/$BUILD_JOB_NAME/app/((.:app_name))/sidecar/adot/outcome/failure"
      labels:
        <<: *pushgateway_default_labels
        outcome: failure
        sidecar: adot

  put_success_metric: &put_success_metric
    on_success:
      *send_app_release_metric_success

  put_failure_metric: &put_failure_metric
    on_failure:
      *send_app_release_metric_failure

  put_success_slack_and_metric_notification: &put_success_slack_and_metric_notification
    on_success:
      in_parallel:
          steps:
          - *slack_notification_success
          - *send_app_release_metric_success

  put_failure_slack_and_metric_notification: &put_failure_slack_and_metric_notification
    on_failure:
      in_parallel:
          steps:
          - *slack_notification_failure
          - *send_app_release_metric_failure

  put_success_slack_and_metric_notification_with_nginx_and_adot: &put_success_slack_and_metric_notification_with_nginx_and_adot
    on_success:
      in_parallel:
          steps:
          - *slack_notification_success
          - *send_app_release_metric_success
          - *send_nginx_release_metric_success
          - *send_adot_release_metric_success
          - *send_app_release_annotation


  put_failure_slack_and_metric_notification_with_nginx_and_adot: &put_failure_slack_and_metric_notification_with_nginx_and_adot
    on_failure:
      in_parallel:
          steps:
          - *slack_notification_failure
          - *send_app_release_metric_failure
          - *send_nginx_release_metric_failure
          - *send_adot_release_metric_failure

  put_success_slack_and_metric_notification_with_nginx_forward_proxy_and_adot: &put_success_slack_and_metric_notification_with_nginx_forward_proxy_and_adot
    on_success:
      in_parallel:
          steps:
          - *slack_notification_success
          - *send_app_release_metric_success
          - *send_nginx_release_metric_success
          - *send_nginx_forward_proxy_release_metric_success
          - *send_adot_release_metric_success
          - *send_app_release_annotation

  put_failure_slack_and_metric_notification_with_nginx_forward_proxy_and_adot: &put_failure_slack_and_metric_notification_with_nginx_forward_proxy_and_adot
    on_failure:
      in_parallel:
          steps:
          - *slack_notification_failure
          - *send_app_release_metric_failure
          - *send_nginx_release_metric_failure
          - *send_nginx_forward_proxy_release_metric_failure
          - *send_adot_release_metric_failure

  put_db_migration_slack_notification: &put_db_migration_slack_notification
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ":postgres:"
      username: pay-concourse
      text: ":postgres: starting $BUILD_JOB_NAME on test-12\n
            - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_success_slack_notification: &put_db_migration_success_slack_notification
    on_success:
      put: slack-notification
      params:
        channel: '#govuk-pay-activity'
        icon_emoji: ":postgres:"
        username: pay-concourse
        text: ":green-circle: $BUILD_JOB_NAME completed successfully on test-12\n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  put_db_migration_failure_slack_notification: &put_db_migration_failure_slack_notification
    on_failure:
      put: slack-notification
      params:
        channel: '#govuk-pay-announce'
        icon_emoji: ":postgres:"
        username: pay-concourse
        text: ":red-circle: $BUILD_JOB_NAME failed on test-12\n
              - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

  wait_for_deploy_params: &wait_for_deploy_params
    <<: *aws_assumed_role_creds
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    ENVIRONMENT: test-12

  deploy_params: &deploy_params
    <<: *aws_assumed_role_creds
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    ACCOUNT: test
    ENVIRONMENT: test-12

  check_release_versions_params: &check_release_versions_params
    <<: *aws_assumed_role_creds
    AWS_REGION: "eu-west-1"
    CLUSTER_NAME: "test-12-fargate"
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))

  snippet_params_all_versions: &snippet_params_all_versions
    ENV: test-12
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))
    ADOT_IMAGE_TAG: ((.:adot_image_tag))
    NGINX_IMAGE_TAG: ((.:nginx_image_tag))

  snippet_params_app_version: &snippet_params_app_version
    ENV: test-12
    APPLICATION_IMAGE_TAG: ((.:application_image_tag))

  # Separate tasks for each combination of scenario/environment
  smoke-test-run-all-on-test: &smoke-test-run-all-on-test
    limit: 8
    steps:
      - task: run_create_card_payment_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_sandbox_test"
      - task: run_recurring_card_payment_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "rec_card_sandbox_test"
      - task: run_create_card_payment_worldpay_with_3ds2-test
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds2_test"
      - task: run_create_card_payment_worldpay_with_3ds2_exemption-test
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds2ex_test"
      - task: run_create_card_payment_worldpay_without_3ds-test
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_test"
      - task: run_recurring_card_payment_worldpay-test
        attempts: 10
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "reccard_worldpay_test"
      - task: run_cancel_card_payment_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "cancel_sandbox_test"
      - task: run_use_payment_link_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "pymntlnk_sandbox_test"
      - task: run_create_card_payment_stripe-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_stripe_test"
      - task: run_create_card_payment_stripe_3ds-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_stripe_3ds_test"
      - task: run_recurring_card_payment_stripe-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "rec_card_stripe_test"
      - task: run_notifications_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "notifcatns_sndbx_test"

resources:
  - name: prometheus-pushgateway
    type: prometheus-pushgateway
    source:
      url: https://prometheus-pushgateway.deploy.payments.service.gov.uk
      job: deployment_pipeline_release_number
  - name: deploy-to-test-pipeline-definition
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/deploy-to-test.yml
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: pay-ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: adot-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-adot
      branch: main
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: nginx-forward-proxy-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-nginx-forward-proxy
      branch: main
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: grafana-annotation
    type: grafana-annotation
    source:
      url: "https://grafana.monitoring.pay-cd.deploy.payments.service.gov.uk"
      username: pay_cd
      password: ((grafana-annotations-password))
      tags:
        - test-12
        - release

  # Github Releases
  - name: stream-s3-sqs-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-stream-s3-sqs
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: toolbox-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-toolbox
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: egress-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-egress
      branch: main
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: frontend-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-frontend
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: adminusers-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-adminusers
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: cardid-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-cardid
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: connector-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-connector
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: ledger-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ledger
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: products-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-products
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: products-ui-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-products-ui
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: publicauth-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-publicauth
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: publicapi-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-publicapi
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: selfservice-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-selfservice
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: webhooks-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-webhooks
      branch: main
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: nginx-proxy-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-nginx-proxy
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: webhooks-egress-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-webhooks-egress
      branch: main
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: notifications-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-notifications
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))
  - name: pay-infra
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-infra
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: pay-alpine-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-infra
      branch: master
      tag_regex: "alpine_alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  # ECR registry resources
  - name: alpine-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/alpine
      variant: release
      <<: *aws_test_config
  - name: stream-s3-sqs-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stream-s3-sqs
      variant: release
      <<: *aws_test_config
  - name: toolbox-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      variant: release
      <<: *aws_test_config
  - name: egress-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/egress
      variant: release
      <<: *aws_test_config
  - name: frontend-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      variant: release
      <<: *aws_test_config
  - name: frontend-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      variant: candidate
      <<: *aws_test_config
  - name: adminusers-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: release
      <<: *aws_test_config
  - name: adminusers-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: candidate
      <<: *aws_test_config
  - name: cardid-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      variant: release
      <<: *aws_test_config
  - name: cardid-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      variant: candidate
      <<: *aws_test_config
  - name: connector-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: release
      <<: *aws_test_config
  - name: connector-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: candidate
      <<: *aws_test_config
  - name: ledger-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: release
      <<: *aws_test_config
  - name: ledger-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: candidate
      <<: *aws_test_config
  - name: webhooks-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks
      variant: release
      <<: *aws_test_config
  - name: products-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: release
      <<: *aws_test_config
  - name: products-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: candidate
      <<: *aws_test_config
  - name: products-ui-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      variant: release
      <<: *aws_test_config
  - name: products-ui-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      variant: candidate
      <<: *aws_test_config
  - name: publicapi-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      variant: release
      <<: *aws_test_config
  - name: publicapi-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      variant: candidate
      <<: *aws_test_config
  - name: publicauth-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: release
      <<: *aws_test_config
  - name: publicauth-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: candidate
      <<: *aws_test_config
  - name: selfservice-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      variant: release
      <<: *aws_test_config
  - name: selfservice-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      variant: candidate
      <<: *aws_test_config
  - name: nginx-proxy-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      variant: release
      repository: govukpay/docker-nginx-proxy
      <<: *aws_test_config
  - name: webhooks-egress-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      variant: release
      repository: govukpay/webhooks-egress
      <<: *aws_test_config
  - name: nginx-forward-proxy-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/nginx-forward-proxy
      variant: release
      <<: *aws_test_config
  - name: adot-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: governmentdigitalservice/pay-adot
      tag: latest-master
      username: ((docker-username))
      password: ((docker-access-token))
  - name: adot-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adot
      variant: release
      <<: *aws_test_config
  - name: adot-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adot
      variant: candidate
      <<: *aws_test_config
  - name: adot-latest
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adot
      tag: latest
      <<: *aws_test_config
  - name: notifications-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/notifications
      variant: release
      <<: *aws_test_config
  - name: slack-notification
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-notification-secret))

resource_types:
  - name: registry-image
    type: registry-image
    source:
      repository: concourse/registry-image-resource
      tag: "1.4.1"
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest
  - name: prometheus-pushgateway
    type: docker-image
    source:
      repository: governmentdigitalservice/pay-prometheus-pushgateway-resource
      tag: latest-master
  - name: grafana-annotation
    type: docker-image
    source:
      repository: governmentdigitalservice/pay-grafana-annotation-resource
      tag: latest

groups:
  - name: adminusers
    jobs:
      - build-and-push-adminusers-candidate
      - run-adminusers-e2e
      - deploy-adminusers
      - smoke-test-adminusers
      - adminusers-pact-tag
      - push-adminusers-to-staging-ecr
      - adminusers-db-migration
  - name: cardid
    jobs:
      - build-and-push-cardid-candidate
      - run-cardid-e2e
      - deploy-cardid
      - smoke-test-cardid
      - cardid-pact-tag
      - push-cardid-to-staging-ecr
  - name: connector
    jobs:
      - build-and-push-connector-candidate
      - run-connector-e2e
      - deploy-connector
      - smoke-test-connector
      - connector-pact-tag
      - push-connector-to-staging-ecr
      - connector-db-migration
  - name: egress
    jobs:
      - build-and-push-egress-candidate
      - deploy-egress
      - smoke-test-egress
      - push-egress-to-staging-ecr
  - name: frontend
    jobs:
      - build-and-push-frontend-candidate
      - run-frontend-e2e
      - deploy-frontend
      - smoke-test-frontend
      - frontend-pact-tag
      - push-frontend-to-staging-ecr
  - name: ledger
    jobs:
      - build-and-push-ledger-candidate
      - run-ledger-e2e
      - deploy-ledger
      - smoke-test-ledger
      - ledger-pact-tag
      - push-ledger-to-staging-ecr
      - ledger-db-migration
  - name: products
    jobs:
      - build-and-push-products-candidate
      - run-products-e2e
      - deploy-products
      - smoke-test-products
      - products-pact-tag
      - push-products-to-staging-ecr
      - products-db-migration
  - name: products-ui
    jobs:
      - build-and-push-products-ui-candidate
      - run-products-ui-e2e
      - deploy-products-ui
      - smoke-test-products-ui
      - products-ui-pact-tag
      - push-products-ui-to-staging-ecr
  - name: publicapi
    jobs:
      - build-and-push-publicapi-candidate
      - run-publicapi-e2e
      - deploy-publicapi
      - smoke-test-publicapi
      - publicapi-pact-tag
      - push-publicapi-to-staging-ecr
  - name: publicauth
    jobs:
      - build-and-push-publicauth-candidate
      - run-publicauth-e2e
      - deploy-publicauth
      - smoke-test-publicauth
      - push-publicauth-to-staging-ecr
      - publicauth-db-migration
  - name: selfservice
    jobs:
      - build-and-push-selfservice-candidate
      - run-selfservice-e2e
      - deploy-selfservice
      - smoke-test-selfservice
      - selfservice-pact-tag
      - push-selfservice-to-staging-ecr
  - name: toolbox
    jobs:
      - build-and-push-toolbox-to-test-ecr
      - deploy-toolbox
      - push-toolbox-to-staging-ecr
  - name: webhooks
    jobs:
      - build-webhooks
      - deploy-webhooks
      - smoke-test-webhooks
      - webhooks-pact-tag
      - webhooks-db-migration
      - push-webhooks-to-staging-ecr
  - name: webhooks-egress
    jobs:
      - build-and-push-webhooks-egress-to-test-ecr
      - deploy-webhooks-egress
      - smoke-test-webhooks-egress
      - push-webhooks-egress-to-staging-ecr
  - name: adot
    jobs:
      - build-and-push-adot-candidate
      - run-adot-integration-test
      - push-adot-to-staging-ecr
      - deploy-toolbox
  - name: alpine
    jobs:
      - build-and-push-alpine-to-ecr
      - deploy-scheduled-tasks
      - push-alpine-to-staging-ecr
  - name: nginx-proxy
    jobs:
      - build-and-push-nginx-proxy-to-test-ecr
      - deploy-frontend
      - deploy-products-ui
      - smoke-test-frontend
      - smoke-test-products-ui
      - push-nginx-proxy-to-staging-ecr
  - name: nginx-forward-proxy
    jobs:
      - deploy-frontend
      - smoke-test-frontend
      - build-and-push-nginx-forward-proxy-to-test-ecr
      - push-nginx-forward-proxy-to-staging-ecr
  - name: notifications
    jobs:
      - build-and-push-notifications-to-test-ecr
      - deploy-notifications
      - smoke-test-notifications
      - push-notifications-to-staging-ecr
  - name: stream-s3-sqs
    jobs:
      - build-and-push-stream-s3-sqs-to-test-ecr
      - deploy-scheduled-tasks
      - push-stream-s3-sqs-to-staging-ecr
  - name: update-deploy-to-test-pipeline
    jobs:
      - update-deploy-to-test-pipeline


docker_credentials: &docker_credentials
  DOCKER_USERNAME: ((docker-username))
  DOCKER_AUTH_TOKEN: ((docker-access-token))

jobs:
  - name: build-and-push-alpine-to-ecr
    plan:
      - in_parallel:
        - get: pay-ci
        - get: pay-alpine-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: pay-alpine-git-release
      - in_parallel:
          - load_var: release-name
            file: pay-alpine-git-release/.git/ref
          - load_var: release-tag
            file: tags/tags
          - load_var: release-number
            file: tags/release-number
          - load_var: release-sha
            file: tags/release-sha
          - load_var: date
            file: tags/date
          - load_var: candidate_image_tag
            file: tags/candidate-tag
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
                AWS_ROLE_SESSION_NAME: codebuild-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: alpine
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          - task: run-codebuild-alpine-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/alpine-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-alpine-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/alpine-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-alpine-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/alpine-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/alpine:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/alpine:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/alpine:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/alpine:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: pay-alpine image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: pay-alpine image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-scheduled-tasks
    plan:
      - in_parallel:
        - get: alpine-ecr-registry-test
          trigger: true
        - get: stream-s3-sqs-ecr-registry-test
          trigger: true
        - get: pay-ci
        - get: pay-infra
      - in_parallel:
        - load_var: alpine_image_tag
          file: alpine-ecr-registry-test/tag
        - load_var: stream_s3_sqs_image_tag
          file: stream-s3-sqs-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
            AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-scheduled-tasks.yml
        params:
          APP_NAME: adminusers
          ALPINE_IMAGE_TAG: ((.:alpine_image_tag))
          STREAM_S3_SQS_IMAGE_TAG: ((.:stream_s3_sqs_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
          <<: *aws_assumed_role_creds
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: Scheduled tasks failed to deploy alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Scheduled tasks deployed alpine image ((.:alpine_image_tag)) and stream-s3-sqs image ((.:stream_s3_sqs_image_tag)) successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: push-alpine-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: alpine-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-scheduled-tasks]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: alpine-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/alpine"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-stream-s3-sqs-to-test-ecr
    plan:
      - get: pay-ci
      - get: stream-s3-sqs-git-release
        trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: stream-s3-sqs-git-release
      - in_parallel:
          - load_var: release-number
            file: tags/release-number
          - load_var: release-name
            file: stream-s3-sqs-git-release/.git/ref
          - load_var: release-sha
            file: tags/release-sha
          - load_var: release-tag
            file: tags/tags
          - load_var: date
            file: tags/date
          - load_var: candidate_image_tag
            file: tags/candidate-tag
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
                AWS_ROLE_SESSION_NAME: codebuild-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: stream-s3-sqs
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          - task: run-codebuild-stream-s3-sqs-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/stream-s3-sqs-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-stream-s3-sqs-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/stream-s3-sqs-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-stream-s3-sqs-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/stream-s3-sqs-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/stream-s3-sqs:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/stream-s3-sqs:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/stream-s3-sqs:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/stream-s3-sqs:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: stream-s3-sqs image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: stream-s3-sqs image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: push-stream-s3-sqs-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: stream-s3-sqs-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-scheduled-tasks]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: stream-s3-sqs-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/stream-s3-sqs"
          <<: *copy_ecr_from_test_to_staging_params

  - name: update-deploy-to-test-pipeline
    plan:
      - get: deploy-to-test-pipeline-definition
        trigger: true
      - set_pipeline: deploy-to-test
        file: deploy-to-test-pipeline-definition/ci/pipelines/deploy-to-test.yml

  - name: build-and-push-toolbox-to-test-ecr
    plan:
      - in_parallel:
        - get: pay-ci
        - get: toolbox-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: toolbox-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: toolbox-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: release-tag
          file: tags/tags
        - load_var: date
          file: tags/date
        - load_var: candidate_image_tag
          file: tags/candidate-tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
        - task: assume-retag-role
          file: pay-ci/ci/tasks/assume-role.yml
          output_mapping:
            assume-role: assume-retag-role
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
            AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: toolbox
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-toolbox-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/toolbox-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-toolbox-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/toolbox-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-toolbox-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/toolbox-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/toolbox:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/toolbox:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/toolbox:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/toolbox:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-toolbox:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-toolbox:latest-master"
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: toolbox image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: toolbox image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-toolbox
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: toolbox-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: adot-candidate
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: toolbox-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-candidate/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: toolbox
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: toolbox
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: toolbox
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: toolbox
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-toolbox-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: toolbox-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [deploy-toolbox]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: toolbox-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/toolbox"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-egress-candidate
    plan:
      - in_parallel:
          - get: pay-ci
          - get: egress-git-release
            trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: egress-git-release
        params:
          APP_NAME: egress
      - in_parallel:
          - *load_app_name_from_parse_release_tag
          - *load_app_release_number_from_parse_release_tag
          - load_var: release-number
            file: tags/release-number
          - load_var: release-name
            file: egress-git-release/.git/ref
          - load_var: release-sha
            file: tags/release-sha
          - load_var: date
            file: tags/date
          - load_var: release-tag
            file: tags/tags
          - task: assume-role
            file: pay-ci/ci/tasks/assume-role.yml
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
              AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: egress
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          steps:
            - task: run-codebuild-egress-amd64
              attempts: 3
              file: pay-ci/ci/tasks/run-codebuild.yml
              params:
                PATH_TO_CONFIG: "../../../../run-codebuild-configuration/egress-amd64.json"
                AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            - task: run-codebuild-egress-armv8
              attempts: 3
              file: pay-ci/ci/tasks/run-codebuild.yml
              params:
                PATH_TO_CONFIG: "../../../../run-codebuild-configuration/egress-armv8.json"
                AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-egress-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/egress-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: assume-retag-role
        file: pay-ci/ci/tasks/assume-role.yml
        output_mapping:
          assume-role: assume-retag-role
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
          - load_var: retag-role
            file: assume-retag-role/assume-role.json
            format: json
          - load_var: candidate-image-tag
            file: tags/candidate-tag
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/egress:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/egress:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/egress:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/egress:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
          - put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: egress candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
          - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
          - put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-activity'
              silent: true
              text: ':hammer: egress candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
          - *send_app_release_metric_success

  - name: deploy-egress
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
            - get: egress-ecr-registry-test
              trigger: true
            - get: pay-infra
            - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          APP_NAME: egress
          ACTION_NAME: Deployment
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "test-12-fargate"
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: test-12
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: smoke-test-egress
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
            - get: egress-ecr-registry-test
              trigger: true
              passed: [deploy-egress]
            - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          APP_NAME: egress
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-egress-to-staging-ecr
    plan:
      - in_parallel:
          steps:
            - get: egress-ecr-registry-test
              params:
                skip_download: true
                format: oci
              trigger: true
              passed: [smoke-test-egress]
            - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: egress-ecr-registry-test
      - in_parallel:
          steps:
            - *load_app_name_from_parse_ecr_release_tag
            - *load_app_release_number_from_parse_ecr_release_tag
            - load_var: release_number
              file: ecr-release-info/release-number
      - in_parallel:
          steps:
            - *assume_copy_from_test_ecr_role
            - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
            - *load_copy_from_test_ecr_role
            - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/egress"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-frontend-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: frontend-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: frontend-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: frontend-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: frontend
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-frontend-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/frontend-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-frontend-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/frontend-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-frontend-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/frontend-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: frontend candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: frontend candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-frontend-e2e
    plan:
      - in_parallel:
        - get: frontend-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: frontend-candidate
            - load_var: candidate_image_tag
              file: frontend-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: frontend
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-product
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/frontend:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/frontend:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/frontend:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/frontend:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-frontend:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-frontend:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: frontend candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: frontend candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-frontend
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: frontend-ecr-registry-test
        trigger: true
      - get: nginx-forward-proxy-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: adot-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: frontend-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: nginx_forward_proxy_image_tag
        file: nginx-forward-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Deployment
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - *load_adot_release_number
            - *load_nginx_release_number
            - *load_nginx_forward_proxy_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: frontend
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: frontend
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-frontend-with-adot.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_forward_proxy_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_forward_proxy_and_adot

  - name: smoke-test-frontend
    serial_groups: [smoke-test]
    plan:
      - get: frontend-ecr-registry-test
        trigger: true
        passed: [deploy-frontend]
      - get: nginx-forward-proxy-ecr-registry-test
        trigger: true
        passed: [deploy-frontend]
      - get: nginx-proxy-ecr-registry-test
        trigger: true
        passed: [deploy-frontend]
      - get: pay-ci
      - load_var: application_image_tag
        file: frontend-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: frontend-pact-tag
    plan:
      - get: frontend-ecr-registry-test
        passed: [smoke-test-frontend]
        trigger: true
      - load_var: application_image_tag
        file: frontend-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: frontend
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: frontend
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-frontend-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: frontend-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [frontend-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: frontend-ecr-registry-test
      - in_parallel:
          steps:
            - *load_app_name_from_parse_ecr_release_tag
            - *load_app_release_number_from_parse_ecr_release_tag
            - load_var: release_number
              file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/frontend"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-adminusers-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: adminusers-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: adminusers-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: adminusers-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: adminusers
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
        - task: run-codebuild-adminusers-amd64
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/adminusers-amd64.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-adminusers-armv8
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/adminusers-armv8.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-adminusers-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/adminusers-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: adminusers candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: adminusers candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-adminusers-e2e
    plan:
      - in_parallel:
        - get: adminusers-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
          - task: parse-candidate-tag
            file: pay-ci/ci/tasks/parse-candidate-tag.yml
            input_mapping:
              ecr-repo: adminusers-candidate
          - load_var: candidate_image_tag
            file: adminusers-candidate/tag
          - task: assume-role
            file: pay-ci/ci/tasks/assume-role.yml
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
              AWS_ROLE_SESSION_NAME: e2e-test-assume-role
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: adminusers
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-card
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adminusers:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-adminusers:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-adminusers:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: adminusers candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: adminusers candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-adminusers
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-test
            trigger: true
          - get: nginx-proxy-ecr-registry-test
            trigger: true
          - get: adot-ecr-registry-test
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - *load_adot_release_number
          - *load_nginx_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: adminusers
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: adminusers
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: adminusers
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: adminusers
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: adminusers
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: adminusers-db-migration
    plan:
      - get: pay-ci
      - get: adminusers-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-adminusers]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "adminusers"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: smoke-test-adminusers
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-test
            trigger: true
            passed: [deploy-adminusers]
          - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: adminusers-pact-tag
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-test
            passed: [smoke-test-adminusers]
            trigger: true
          - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: adminusers
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: adminusers
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-adminusers-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: adminusers-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [adminusers-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: adminusers-ecr-registry-test
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - load_var: release_number
            file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/adminusers"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-connector-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: connector-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: connector-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: connector-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: connector
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-connector-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/connector-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-connector-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/connector-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-connector-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/connector-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: connector candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: connector candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-connector-e2e
    plan:
      - in_parallel:
        - get: connector-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: connector-candidate
            - load_var: candidate_image_tag
              file: connector-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: connector
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-card
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/connector:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-connector:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-connector:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: connector candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: connector candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-connector
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: connector-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: adot-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - *load_adot_release_number
            - *load_nginx_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: connector
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: connector
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: connector
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: connector
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: connector
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: connector-db-migration
    plan:
      - get: pay-ci
      - get: connector-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-connector]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "connector"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: smoke-test-connector
    serial_groups: [smoke-test]
    plan:
      - get: connector-ecr-registry-test
        trigger: true
        passed: [deploy-connector]
      - get: pay-ci
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: connector-pact-tag
    plan:
      - get: connector-ecr-registry-test
        passed: [smoke-test-connector]
        trigger: true
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
            - *load_app_name
            - *load_app_release_number
            - load_var: success_snippet
              file: snippet/success
            - load_var: failure_snippet
              file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: connector
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: connector
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-connector-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: connector-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [connector-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: connector-ecr-registry-test
      - in_parallel:
          steps:
            - *load_app_name_from_parse_ecr_release_tag
            - *load_app_release_number_from_parse_ecr_release_tag
            - load_var: release_number
              file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/connector"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-ledger-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: ledger-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: ledger-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: ledger-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: ledger
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-ledger-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/ledger-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-ledger-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/ledger-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-ledger-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/ledger-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: ledger candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: ledger candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-ledger-e2e
    plan:
      - in_parallel:
        - get: ledger-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: ledger-candidate
            - load_var: candidate_image_tag
              file: ledger-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: ledger
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-card
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/ledger:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-ledger:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-ledger:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: ledger candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: ledger candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-ledger
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-test
            trigger: true
          - get: nginx-proxy-ecr-registry-test
            trigger: true
          - get: adot-ecr-registry-test
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - *load_adot_release_number
          - *load_nginx_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: ledger
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: ledger
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: ledger
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: ledger
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: ledger
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: smoke-test-ledger
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-test
            trigger: true
            passed: [deploy-ledger]
          - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: ledger-pact-tag
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-test
            passed: [smoke-test-ledger]
            trigger: true
          - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: ledger
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: ledger
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-ledger-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: ledger-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [ledger-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: ledger-ecr-registry-test
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - load_var: release_number
            file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/ledger"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: ledger-db-migration
    plan:
      - get: pay-ci
      - get: ledger-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-ledger]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "ledger"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: build-and-push-products-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: products-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: products-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: products-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: products
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-products-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-products-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-products-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: products candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: products candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-products-e2e
    plan:
      - in_parallel:
        - get: products-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: products-candidate
            - load_var: candidate_image_tag
              file: products-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: products
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-product
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-products:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-products:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: products candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: products candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-products
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
          - get: products-ecr-registry-test
            trigger: true
          - get: nginx-proxy-ecr-registry-test
            trigger: true
          - get: adot-ecr-registry-test
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - *load_adot_release_number
          - *load_nginx_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: products
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: products
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: products-db-migration
    plan:
      - get: pay-ci
      - get: products-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-products]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "products"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: smoke-test-products
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
          - get: products-ecr-registry-test
            trigger: true
            passed: [deploy-products]
          - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: products-pact-tag
    plan:
      - in_parallel:
          steps:
          - get: products-ecr-registry-test
            passed: [smoke-test-products]
            trigger: true
          - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-products-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: products-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [products-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: products-ecr-registry-test
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - load_var: release_number
            file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/products"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-products-ui-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: products-ui-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: products-ui-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: products-ui-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: products-ui
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-products-ui-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products-ui-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-products-ui-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products-ui-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-products-ui-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products-ui-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: products-ui candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: products-ui candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-products-ui-e2e
    plan:
      - in_parallel:
        - get: products-ui-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: products-ui-candidate
            - load_var: candidate_image_tag
              file: products-ui-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: products-ui
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-product
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products-ui:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products-ui:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products-ui:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/products-ui:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-products-ui:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-products-ui:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: products-ui candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: products-ui candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-products-ui
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
          - get: products-ui-ecr-registry-test
            trigger: true
          - get: nginx-proxy-ecr-registry-test
            trigger: true
          - get: adot-ecr-registry-test
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - *load_adot_release_number
          - *load_nginx_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products-ui
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products-ui
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: products-ui
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: products-ui
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products-ui
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: smoke-test-products-ui
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
          - get: products-ui-ecr-registry-test
            trigger: true
            passed: [deploy-products-ui]
          - get: nginx-proxy-ecr-registry-test
            trigger: true
            passed: [deploy-products-ui]
          - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: products-ui-pact-tag
    plan:
      - in_parallel:
          steps:
          - get: products-ui-ecr-registry-test
            passed: [smoke-test-products-ui]
            trigger: true
          - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products-ui
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products-ui
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-products-ui-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: products-ui-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [products-ui-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: products-ui-ecr-registry-test
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - load_var: release_number
            file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/products-ui"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-publicapi-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: publicapi-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: publicapi-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: publicapi-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: publicapi
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-publicapi-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/publicapi-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-publicapi-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/publicapi-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-publicapi-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/publicapi-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: publicapi candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: publicapi candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-publicapi-e2e
    plan:
      - in_parallel:
        - get: publicapi-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: publicapi-candidate
            - load_var: candidate_image_tag
              file: publicapi-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
            - *load_app_name_from_parse_candidate_tag
            - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: publicapi
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-product
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicapi:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicapi:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicapi:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicapi:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-publicapi:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-publicapi:latest-master"
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: publicapi candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':green-circle: publicapi candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: deploy-publicapi
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
          - get: publicapi-ecr-registry-test
            trigger: true
          - get: nginx-proxy-ecr-registry-test
            trigger: true
          - get: adot-ecr-registry-test
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - *load_adot_release_number
          - *load_nginx_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: publicapi
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: publicapi
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: publicapi
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: publicapi
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicapi
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: smoke-test-publicapi
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
          - get: publicapi-ecr-registry-test
            trigger: true
            passed: [deploy-publicapi]
          - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: publicapi-pact-tag
    plan:
      - in_parallel:
          steps:
          - get: publicapi-ecr-registry-test
            passed: [smoke-test-publicapi]
            trigger: true
          - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: publicapi
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: publicapi
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-publicapi-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: publicapi-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [publicapi-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: publicapi-ecr-registry-test
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - load_var: release_number
            file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/publicapi"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-and-push-publicauth-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: publicauth-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: publicauth-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: publicauth-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: publicauth
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-publicauth-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/publicauth-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-publicauth-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/publicauth-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-publicauth-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/publicauth-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: publicauth candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: publicauth candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: run-publicauth-e2e
    plan:
      - in_parallel:
        - get: publicauth-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: publicauth-candidate
            - load_var: candidate_image_tag
              file: publicauth-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: publicauth
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/publicauth:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-publicauth:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-publicauth:latest-master"
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: publicauth candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: publicauth candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-publicauth
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: publicauth-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: adot-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicauth
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: publicauth
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: publicauth
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicauth
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: publicauth-db-migration
    plan:
      - get: pay-ci
      - get: publicauth-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-publicauth]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: publicauth-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "publicauth"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: smoke-test-publicauth
    serial_groups: [smoke-test]
    plan:
      - get: publicauth-ecr-registry-test
        trigger: true
        passed: [deploy-publicauth]
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicauth
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-publicauth-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: publicauth-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-publicauth]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: publicauth-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/publicauth"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-selfservice-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: selfservice-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: selfservice-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: selfservice-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: selfservice
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-selfservice-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/selfservice-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-selfservice-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/selfservice-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-selfservice-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/selfservice-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: selfservice candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: selfservice candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: run-selfservice-e2e
    plan:
      - in_parallel:
        - get: selfservice-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: parse-candidate-tag
              file: pay-ci/ci/tasks/parse-candidate-tag.yml
              input_mapping:
                ecr-repo: selfservice-candidate
            - load_var: candidate_image_tag
              file: selfservice-candidate/tag
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
                AWS_ROLE_SESSION_NAME: e2e-test-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
            - load_var: release_image_tag
              file: parse-candidate-tag/release-tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: selfservice
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-product
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/selfservice:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/selfservice:((.:release_image_tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/selfservice:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/selfservice:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-selfservice:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-selfservice:latest-master"
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: selfservice candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: selfservice candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-selfservice
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: selfservice-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: adot-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: selfservice
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: selfservice
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: selfservice
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: selfservice
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: selfservice
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification


  - name: smoke-test-selfservice
    serial_groups: [smoke-test]
    plan:
      - get: selfservice-ecr-registry-test
        trigger: true
        passed: [deploy-selfservice]
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification


  - name: selfservice-pact-tag
    plan:
      - get: selfservice-ecr-registry-test
        passed: [smoke-test-selfservice]
        trigger: true
      - load_var: application_image_tag
        file: selfservice-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: selfservice
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: selfservice
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-selfservice-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: selfservice-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [selfservice-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: selfservice-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/selfservice"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-cardid-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: cardid-git-release
          trigger: true
          params:
            submodules: none
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: cardid-git-release
      - in_parallel:
        - *load_app_name_from_parse_release_tag
        - *load_app_release_number_from_parse_release_tag
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: cardid-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: cardid
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
        - task: run-codebuild-cardid-amd64
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/cardid-amd64.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-cardid-armv8
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/cardid-armv8.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-cardid-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/cardid-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    on_failure:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-announce'
            silent: true
            text: ':red-circle: cardid candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
        - put: slack-notification
          attempts: 10
          params:
            channel: '#govuk-pay-activity'
            silent: true
            text: ':hammer: cardid candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
            icon_emoji: ":concourse:"
            username: pay-concourse
        - *send_app_release_metric_success

  - name: run-cardid-e2e
    plan:
      - in_parallel:
        - get: cardid-candidate
          params:
            format: oci
          trigger: true
        - get: pay-ci
      - in_parallel:
          steps:
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
          - task: parse-candidate-tag
            file: pay-ci/ci/tasks/parse-candidate-tag.yml
            input_mapping:
              ecr-repo: cardid-candidate
          - load_var: candidate_image_tag
            file: cardid-candidate/tag
          - task: assume-role
            file: pay-ci/ci/tasks/assume-role.yml
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
              AWS_ROLE_SESSION_NAME: e2e-test-assume-role
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
          - load_var: role
            file: assume-role/assume-role.json
            format: json
          - load_var: retag-role
            file: assume-retag-role/assume-role.json
            format: json
          - load_var: release_image_tag
            file: parse-candidate-tag/release-tag
          - *load_app_name_from_parse_candidate_tag
          - *load_app_release_number_from_parse_candidate_tag
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: cardid
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
          - task: retag-candidate-as-release-in-ecr
            file: pay-ci/ci/tasks/manifest-retag.yml
            params:
              DOCKER_LOGIN_ECR: 1
              AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
              SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/cardid:((.:candidate_image_tag))"
              NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/cardid:((.:release_image_tag))"
              AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
          - task: retag-candidate-as-latest-in-ecr
            file: pay-ci/ci/tasks/manifest-retag.yml
            params:
              DOCKER_LOGIN_ECR: 1
              AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
              SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/cardid:((.:candidate_image_tag))"
              NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/cardid:latest"
              AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
          - task: retag-candidate-as-release-in-dockerhub
            file: pay-ci/ci/tasks/manifest-retag.yml
            params:
              SOURCE_MANIFEST: "governmentdigitalservice/pay-cardid:((.:candidate_image_tag))"
              NEW_MANIFEST: "governmentdigitalservice/pay-cardid:latest-master"
    on_failure:
      in_parallel:
        steps:
          - put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-announce'
              silent: true
              text: ':red-circle: cardid candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
          - *send_app_release_metric_failure
    on_success:
      in_parallel:
        steps:
          - put: slack-notification
            attempts: 10
            params:
              channel: '#govuk-pay-activity'
              silent: true
              text: ':green-circle: cardid candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
              icon_emoji: ":concourse:"
              username: pay-concourse
          - *send_app_release_metric_success

  - name: deploy-cardid
    serial: true
    serial_groups: [deploy-application]
    plan:
      - in_parallel:
          steps:
          - get: cardid-ecr-registry-test
            trigger: true
          - get: nginx-proxy-ecr-registry-test
            trigger: true
          - get: adot-ecr-registry-test
            trigger: true
          - get: pay-infra
          - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - *load_adot_release_number
          - *load_nginx_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: cardid
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: cardid
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: cardid
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: cardid
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: cardid
          <<: *wait_for_deploy_params
    <<: *put_success_slack_and_metric_notification_with_nginx_and_adot
    <<: *put_failure_slack_and_metric_notification_with_nginx_and_adot

  - name: smoke-test-cardid
    serial_groups: [smoke-test]
    plan:
      - in_parallel:
          steps:
          - get: cardid-ecr-registry-test
            trigger: true
            passed: [deploy-cardid]
          - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: cardid-pact-tag
    plan:
      - in_parallel:
          steps:
          - get: cardid-ecr-registry-test
            passed: [smoke-test-cardid]
            trigger: true
          - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - in_parallel:
          steps:
          - *load_app_name
          - *load_app_release_number
          - load_var: success_snippet
            file: snippet/success
          - load_var: failure_snippet
            file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: cardid
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: cardid
          PACT_TAG: test-fargate
    <<: *put_success_slack_and_metric_notification
    <<: *put_failure_slack_and_metric_notification

  - name: push-cardid-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: cardid-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [cardid-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: cardid-ecr-registry-test
      - in_parallel:
          steps:
          - *load_app_name_from_parse_ecr_release_tag
          - *load_app_release_number_from_parse_ecr_release_tag
          - load_var: release_number
            file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/cardid"
          <<: *copy_ecr_from_test_to_staging_params
    <<: *put_success_metric
    <<: *put_failure_metric

  - name: build-webhooks
    plan:
      - in_parallel:
        - get: webhooks-git-release
          trigger: true
        - get: pay-ci
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: webhooks-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: webhooks-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: release-tag
          file: tags/tags
        - load_var: date
          file: tags/date
        - load_var: candidate_image_tag
          file: tags/candidate-tag
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
                AWS_ROLE_SESSION_NAME: codebuild-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: webhooks
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          - task: run-codebuild-webhooks-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/webhooks-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-webhooks-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/webhooks-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-webhooks-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/webhooks-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-webhooks:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-webhooks:latest-master"
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: webhooks image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: webhooks image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-webhooks
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: webhooks-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: adot-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: adot_image_tag
        file: adot-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: webhooks
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app-with-adot.yml
        params:
          APP_NAME: webhooks
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-webhooks
    serial_groups: [smoke-test]
    plan:
      - get: webhooks-ecr-registry-test
        trigger: true
        passed: [deploy-webhooks]
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification


  - name: webhooks-pact-tag
    plan:
      - get: webhooks-ecr-registry-test
        passed: [smoke-test-webhooks]
        trigger: true
      - load_var: application_image_tag
        file: webhooks-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: webhooks
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          GITHUB_TOKEN: ((github-access-token))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: webhooks
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: webhooks-db-migration
    plan:
      - get: pay-ci
      - get: webhooks-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-webhooks]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: webhooks-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "webhooks"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
    <<: *put_db_migration_success_slack_notification
    <<: *put_db_migration_failure_slack_notification

  - name: push-webhooks-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: webhooks-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [webhooks-pact-tag]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: webhooks-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/webhooks"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-nginx-proxy-to-test-ecr
    plan:
      - get: pay-ci
      - get: nginx-proxy-git-release
        trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: nginx-proxy-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: nginx-proxy-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: release-tag
          file: tags/tags
        - load_var: date
          file: tags/date
        - load_var: candidate_image_tag
          file: tags/candidate-tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
            AWS_ROLE_SESSION_NAME: codebuild-assume-role
        - task: assume-retag-role
          file: pay-ci/ci/tasks/assume-role.yml
          output_mapping:
            assume-role: assume-retag-role
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
            AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: retag-role
        file: assume-retag-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: nginx-proxy
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
          - task: run-codebuild-nginx-proxy-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/nginx-proxy-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-nginx-proxy-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/nginx-proxy-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-nginx-proxy-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/nginx-proxy-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/docker-nginx-proxy:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/docker-nginx-proxy:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/docker-nginx-proxy:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/docker-nginx-proxy:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-docker-nginx-proxy:((.:candidate_image_tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-docker-nginx-proxy:latest-master"
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: nginx-proxy image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: nginx-proxy image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: build-and-push-webhooks-egress-to-test-ecr
    plan:
      - get: pay-ci
      - get: webhooks-egress-git-release
        trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: webhooks-egress-git-release
      - in_parallel:
          - load_var: release-number
            file: tags/release-number
          - load_var: release-name
            file: webhooks-egress-git-release/.git/ref
          - load_var: release-sha
            file: tags/release-sha
          - load_var: candidate-image-tag
            file: tags/candidate-tag
          - load_var: date
            file: tags/date
          - load_var: release-tag
            file: tags/tags
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
                AWS_ROLE_SESSION_NAME: codebuild-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: webhooks-egress
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          - task: run-codebuild-webhooks-egress-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/webhooks-egress-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-webhooks-egress-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/webhooks-egress-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-webhooks-egress-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/webhooks-egress-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks-egress:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks-egress:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks-egress:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/webhooks-egress:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: webhooks-egress image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: webhooks-egress image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-webhooks-egress
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: webhooks-egress-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-egress-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          APP_NAME: webhooks-egress
          ACTION_NAME: Deployment
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: test-12
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "test-12-fargate"
          APP_NAME: webhooks-egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-webhooks-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks-egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: test-12
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-webhooks-egress
    serial_groups: [smoke-test]
    plan:
      - get: webhooks-egress-ecr-registry-test
        trigger: true
        passed: [deploy-webhooks-egress]
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-egress-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks-egress
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-webhooks-egress-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: webhooks-egress-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-webhooks-egress]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: webhooks-egress-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/webhooks-egress"
          <<: *copy_ecr_from_test_to_staging_params

  - name: push-nginx-proxy-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: nginx-proxy-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-frontend, smoke-test-products-ui]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: nginx-proxy-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/docker-nginx-proxy"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-nginx-forward-proxy-to-test-ecr
    plan:
      - get: pay-ci
      - get: nginx-forward-proxy-git-release
        trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: nginx-forward-proxy-git-release
      - in_parallel:
          - load_var: release-number
            file: tags/release-number
          - load_var: release-name
            file: nginx-forward-proxy-git-release/.git/ref
          - load_var: release-sha
            file: tags/release-sha
          - load_var: candidate-image-tag
            file: tags/candidate-tag
          - load_var: date
            file: tags/date
          - load_var: release-tag
            file: tags/tags
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
                AWS_ROLE_SESSION_NAME: codebuild-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: nginx-forward-proxy
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          - task: run-codebuild-nginx-forward-proxy-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/nginx-forward-proxy-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-nginx-forward-proxy-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/nginx-forward-proxy-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-nginx-forward-proxy-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/nginx-forward-proxy-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/nginx-forward-proxy:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/nginx-forward-proxy:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/nginx-forward-proxy:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/nginx-forward-proxy:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: nginx-forward-proxy image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: nginx-forward-proxy image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: push-nginx-forward-proxy-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: nginx-forward-proxy-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-frontend]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: nginx-forward-proxy-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/nginx-forward-proxy"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-notifications-to-test-ecr
    plan:
      - get: pay-ci
      - get: notifications-git-release
        trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: notifications-git-release
      - in_parallel:
          steps:
          - load_var: release-name
            file: notifications-git-release/.git/ref
          - load_var: release-tag
            file: tags/tags
          - load_var: release-number
            file: tags/release-number
          - load_var: release-sha
            file: tags/release-sha
          - load_var: candidate_image_tag
            file: tags/candidate-tag
          - load_var: date
            file: tags/date
          - task: assume-role
            file: pay-ci/ci/tasks/assume-role.yml
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
              AWS_ROLE_SESSION_NAME: codebuild-assume-role
          - task: assume-retag-role
            file: pay-ci/ci/tasks/assume-role.yml
            output_mapping:
              assume-role: assume-retag-role
            params:
              AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
              AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
      - in_parallel:
          steps:
          - load_var: role
            file: assume-role/assume-role.json
            format: json
          - load_var: retag-role
            file: assume-retag-role/assume-role.json
            format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: notifications
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          steps:
          - task: run-codebuild-nginx-proxy-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/notifications-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-nginx-proxy-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/notifications-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-nginx-proxy-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/notifications-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/notifications:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/notifications:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/notifications:((.:candidate_image_tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/notifications:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: notifications image ((.:release-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: notifications image ((.:release-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-notifications
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: notifications-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          ACTION_NAME: Deployment
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: test-12
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "test-12-fargate"
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-test
        params:
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
        config:
          platform: linux
          inputs:
            - name: pay-infra
          image_resource:
            type: registry-image
            source:
              repository: hashicorp/terraform
              tag: 1.3.7
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                cd pay-infra/provisioning/terraform/deployments/${ACCOUNT}/${ENVIRONMENT}/microservices_v2/notifications
                terraform init
                terraform apply \
                  -var notifications_image_tag=${APPLICATION_IMAGE_TAG} \
                  -auto-approve
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENVIRONMENT: test-12
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-notifications
    serial_groups: [smoke-test]
    plan:
      - get: notifications-ecr-registry-test
        trigger: true
        passed: [deploy-notifications]
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          ACTION_NAME: Smoke test
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: test-12
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-notifications-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: notifications-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [smoke-test-notifications]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: notifications-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/notifications"
          <<: *copy_ecr_from_test_to_staging_params

  - name: build-and-push-adot-candidate
    plan:
      - in_parallel:
        - get: pay-ci
        - get: adot-git-release
          trigger: true
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: adot-git-release
      - in_parallel:
        - load_var: release-number
          file: tags/release-number
        - load_var: release-name
          file: adot-git-release/.git/ref
        - load_var: release-sha
          file: tags/release-sha
        - load_var: candidate-image-tag
          file: tags/candidate-tag
        - load_var: date
          file: tags/date
        - load_var: release-tag
          file: tags/tags
      - in_parallel:
          steps:
            - task: generate-docker-creds-config
              file: pay-ci/ci/tasks/generate-docker-config-file.yml
              params:
                USERNAME: ((docker-username))
                PASSWORD: ((docker-access-token))
                EMAIL: ((docker-email))
            - task: assume-role
              file: pay-ci/ci/tasks/assume-role.yml
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-builder-test-12
                AWS_ROLE_SESSION_NAME: codebuild-assume-role
            - task: assume-retag-role
              file: pay-ci/ci/tasks/assume-role.yml
              output_mapping:
                assume-role: assume-retag-role
              params:
                AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
                AWS_ROLE_SESSION_NAME: retag-ecr-image-as-release
      - in_parallel:
          steps:
            - load_var: role
              file: assume-role/assume-role.json
              format: json
            - load_var: retag-role
              file: assume-retag-role/assume-role.json
              format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-codebuild-multiarch.yml
        params:
          PROJECT_TO_BUILD: adot
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          RELEASE_NUMBER: ((.:release-number))
          RELEASE_NAME: ((.:release-name))
          RELEASE_SHA: ((.:release-sha))
          BUILD_DATE: ((.:date))
      - in_parallel:
          - task: run-codebuild-adot-amd64
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/adot-amd64.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          - task: run-codebuild-adot-armv8
            attempts: 3
            file: pay-ci/ci/tasks/run-codebuild.yml
            params:
              PATH_TO_CONFIG: "../../../../run-codebuild-configuration/adot-armv8.json"
              AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
              AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
              AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-adot-manifest
        attempts: 3
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/adot-manifest.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
          steps:
            - task: retag-candidate-as-release-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adot:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adot:((.:release-tag))"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-latest-in-ecr
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                DOCKER_LOGIN_ECR: 1
                AWS_ACCOUNT_ID: "((pay_aws_test_account_id))"
                SOURCE_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adot:((.:candidate-image-tag))"
                NEW_MANIFEST: "((pay_aws_test_account_id)).dkr.ecr.eu-west-1.amazonaws.com/govukpay/adot:latest"
                AWS_ACCESS_KEY_ID: ((.:retag-role.AWS_ACCESS_KEY_ID))
                AWS_SECRET_ACCESS_KEY: ((.:retag-role.AWS_SECRET_ACCESS_KEY))
                AWS_SESSION_TOKEN: ((.:retag-role.AWS_SESSION_TOKEN))
            - task: retag-candidate-as-release-in-dockerhub
              file: pay-ci/ci/tasks/manifest-retag.yml
              params:
                SOURCE_MANIFEST: "governmentdigitalservice/pay-adot:((.:candidate-image-tag))"
                NEW_MANIFEST: "governmentdigitalservice/pay-adot:latest-master"
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: adot candidate image ((.:candidate-image-tag)) failed to build - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':hammer: adot candidate image ((.:candidate-image-tag)) built successfully - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: run-adot-integration-test
    plan:
      - in_parallel:
        - get: adot-candidate
          params:
            format: oci
          trigger: true
          passed: [deploy-toolbox]
        - get: pay-ci
      - in_parallel:
        - task: parse-candidate-tag
          file: pay-ci/ci/tasks/parse-candidate-tag.yml
          input_mapping:
            ecr-repo: adot-candidate
        - load_var: candidate_image_tag
          file: adot-candidate/tag
      - task: run-toolbox-metric-tests
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: governmentdigitalservice/pay-node-runner
              tag: node16
          inputs:
            - name: pay-ci
          params:
            <<: *aws_test_config
            AWS_ACCESS_KEY_ID: ((readonly_access_key_id))
            AWS_SECRET_ACCESS_KEY: ((readonly_secret_access_key))
            AWS_SESSION_TOKEN: ((readonly_session_token))
            TEST_METRIC_ECS_SERVICE: toolbox
          run:
            path: node
            args:
              - pay-ci/ci/scripts/test-metrics.js
      - in_parallel:
        - do:
          - put: adot-ecr-registry-test
            params:
              image: adot-candidate/image.tar
              additional_tags: parse-candidate-tag/release-tag
            get_params:
              skip_download: true
          - put: adot-latest
            params:
              image: adot-candidate/image.tar
            get_params:
              skip_download: true
        - put: adot-dockerhub
          params:
              image: adot-candidate/image.tar
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: adot candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: adot candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: push-adot-to-staging-ecr
    plan:
      - in_parallel:
          steps:
          - get: adot-ecr-registry-test
            params:
              skip_download: true
              format: oci
            trigger: true
            passed: [run-adot-integration-test]
          - get: pay-ci
      - task: parse-ecr-release-tag
        file: pay-ci/ci/tasks/parse-ecr-release-tag.yml
        input_mapping:
          ecr-image: adot-ecr-registry-test
      - load_var: release_number
        file: ecr-release-info/release-number
      - in_parallel:
          steps:
          - *assume_copy_from_test_ecr_role
          - *assume_write_to_staging_ecr_role
      - in_parallel:
          steps:
          - *load_copy_from_test_ecr_role
          - *load_write_to_staging_ecr_role
      - task: copy-images-to-staging
        file: pay-ci/ci/tasks/copy-multiarch-image-to-other-account.yml
        privileged: true
        params:
          ECR_REPO_NAME: "govukpay/adot"
          <<: *copy_ecr_from_test_to_staging_params
