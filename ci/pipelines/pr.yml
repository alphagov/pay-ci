definitions:
  - &job-definition
    name: updateThisValue
    max_in_flight: 3
    build_log_retention:
      builds: 500
  - &get-pull-request
    get: src
    resource: updateThisValue
    trigger: true
    version: every
    params:
      integration_tool: checkout
  - &get-ci
    get: ci
    resource: ci
    trigger: false
  - &generate-docker-creds-config
    task: generate-docker-creds-config
    file: ci/ci/tasks/generate-docker-config-file.yml
    params:
      USERNAME: ((docker-username))
      PASSWORD: ((docker-access-token))
      EMAIL: ((docker-email))
  - &build-docker-image
    task: build-image
    privileged: true
    file: ci/ci/tasks/build-docker-image.yml
    params:
      app_name: updateThisValue
  - &put-test-failed-status
    put: card-connector-pull-request
    get_params:
      skip_download: true
    params:
      path: src
      status: failure
      context: test
  - &put-test-success-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: success
      context: test
  - &put-test-pending-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: pending
      context: test
  - &put-e2e-pending-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: pending
      context: e2e tests
  - &put-e2e-failed-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: failure
      context: e2e tests
  - &put-e2e-success-status
    put: updateThisValue
    get_params:
      skip_download: true
    params:
      path: src
      status: success
      context: e2e tests
  - &node-build
    task: build
    file: ci/ci/tasks/node-build-pr.yml
    params:
      skip_tests: true

groups:
  - name: adminusers
    jobs:
      - adminusers-e2e

  - name: cardid
    jobs:
      - cardid-e2e

  - name: connector
    jobs:
      - card-connector-e2e

  - name: end_to_end
    jobs:
      - endtoend-e2e
      - pay-ci-endtoend-config

  - name: frontend
    jobs:
      - card-frontend-e2e

  - name: ledger
    jobs:
      - ledger-e2e

  - name: products
    jobs:
      - products-e2e

  - name: products_ui
    jobs:
      - products-ui-e2e

  - name: publicapi
    jobs:
      - publicapi-e2e

  - name: publicauth
    jobs:
      - publicauth-e2e

  - name: selfservice
    jobs:
      - selfservice-e2e

  - name: ci
    jobs:
      - ci-pr-test

  - name: update_pipeline
    jobs:
      - update-pr-ci-pipeline

resource_types:
  - name: pull-request
    type: registry-image
    source:
      repository: teliaoss/github-pr-resource
      tag: v0.21.0

resources:
  - name: pull-request-builds-ecr
    type: registry-image
    icon: docker
    source:
      repository: govukpay/pull-request-builds
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      # Hardcode the test account registry ID for now. Needs to be a string, not a number
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      tag: latest

  - name: pr-ci-pipeline
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/pr.yml

  - name: ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - &pull-request
    name: card-connector-pull-request
    type: pull-request
    icon: github
    source: &pull-request-source
      disable_forks: true
      repository: alphagov/pay-connector
      access_token: ((github-access-token))

  - <<: *pull-request
    name: endtoend-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-endtoend

  - <<: *pull-request
    name: pay-ci-endtoend-config-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-ci
      paths:
        - "ci/tasks/endtoend/"

  - <<: *pull-request
    name: adminusers-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-adminusers

  - <<: *pull-request
    name: publicapi-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-publicapi

  - <<: *pull-request
    name: ledger-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-ledger

  - <<: *pull-request
    name: publicauth-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-publicauth

  - <<: *pull-request
    name: cardid-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-cardid

  - <<: *pull-request
    name: card-frontend-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-frontend

  - <<: *pull-request
    name: selfservice-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-selfservice

  - <<: *pull-request
    name: products-ui-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-products-ui

  - <<: *pull-request
    name: products-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-products

  - <<: *pull-request
    name: ci-pull-request
    source:
      <<: *pull-request-source
      repository: alphagov/pay-ci
      paths:
        - "ci/pipelines/*"
        - "ci/tasks/*"

jobs:
  - <<: *job-definition
    name: card-connector-e2e
    plan:
      - <<: *get-pull-request
        resource: card-connector-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: card-connector-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: connector
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: connector
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: connector
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: card-connector-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: card-connector-pull-request

  - <<: *job-definition
    name: endtoend-e2e
    plan:
      - <<: *get-pull-request
        resource: endtoend-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: endtoend-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: endtoend
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: endtoend
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: endtoend
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-products-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: endtoend-pull-request

    on_failure:
      <<: *put-e2e-failed-status
      put: endtoend-pull-request

  - <<: *job-definition
    name: pay-ci-endtoend-config
    plan:
      - in_parallel:
        - <<: *get-ci
        - <<: *get-pull-request
          resource: pay-ci-endtoend-config-pull-request
      - <<: *put-e2e-pending-status
        put: pay-ci-endtoend-config-pull-request
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: pay-ci-endtoend-config-pr-assume-role
      - load_var: role
        file: assume-role/assume-role.json
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: src
        params:
          PROJECT_UNDER_TEST: pay-ci
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-products-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: pay-ci-endtoend-config-pull-request

    on_failure:
      <<: *put-e2e-failed-status
      put: pay-ci-endtoend-config-pull-request

  - <<: *job-definition
    name: publicapi-e2e
    plan:
      - <<: *get-pull-request
        resource: publicapi-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: publicapi-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: publicapi
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: publicapi
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: publicapi
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-products-e2e-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: publicapi-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: publicapi-pull-request

  - <<: *job-definition
    name: adminusers-e2e
    plan:
      - <<: *get-pull-request
        resource: adminusers-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: adminusers-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: adminusers
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: adminusers
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: adminusers
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: adminusers-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: adminusers-pull-request

  - <<: *job-definition
    name: cardid-e2e
    plan:
      - <<: *get-pull-request
        resource: cardid-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: cardid-pull-request
        - task: update-submodule
          file: tasks/update-cardid-submodule.yml
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: cardid
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: cardid
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: cardid
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: cardid-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: cardid-pull-request

  - <<: *job-definition
    name: ledger-e2e
    plan:
      - <<: *get-pull-request
        resource: ledger-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: ledger-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: ledger
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: ledger
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: ledger
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: ledger-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: ledger-pull-request

  - <<: *job-definition
    name: publicauth-e2e
    plan:
      - <<: *get-pull-request
        resource: publicauth-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: publicauth-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: publicauth
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: publicauth
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: publicauth
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-card-e2e-tests
          attempts: 3
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-zap-tests
          file: ci/ci/tasks/run-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: publicauth-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: publicauth-pull-request

  - <<: *job-definition
    name: products-e2e
    plan:
      - <<: *get-pull-request
        resource: products-pull-request
      - in_parallel:
        - <<: *get-ci
        - <<: *put-e2e-pending-status
          put: products-pull-request
      - <<: *generate-docker-creds-config
      - <<: *build-docker-image
        params:
          app_name: products
      - in_parallel:
        - task: get-docker-image-info
          file: ci/ci/tasks/get-pr-build-docker-image-info.yml
          params:
            app_name: products
        - task: assume-role
          file: ci/ci/tasks/assume-role.yml
          input_mapping:
            pay-ci: ci
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: role
          file: assume-role/assume-role.json
        - load_var: image_filename
          file: image_info/image_filename
        - load_var: image_tag
          file: image_info/tag
      - in_parallel:
        - put: pull-request-builds-ecr
          params:
            image: local_image/((.:image_filename))
            additional_tags: image_info/tag
          get_params:
            skip_download: true
        - task: prepare-codebuild
          file: ci/ci/tasks/prepare-e2e-codebuild.yml
          input_mapping:
            pay-ci: ci
          params:
            PR_BUILD: true
            PROJECT_UNDER_TEST: products
            RELEASE_TAG_UNDER_TEST: ((.:image_tag))
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-products-e2e-tests
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - <<: *put-e2e-success-status
        put: products-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: products-pull-request

  - <<: *job-definition
    name: card-frontend-e2e
    plan:
    - <<: *get-pull-request
      resource: card-frontend-pull-request
    - in_parallel:
      - <<: *get-ci
      - <<: *put-e2e-pending-status
        put: card-frontend-pull-request
    - <<: *node-build
    - <<: *generate-docker-creds-config
    - <<: *build-docker-image
      params:
        app_name: frontend
    - in_parallel:
      - task: get-docker-image-info
        file: ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: frontend
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: e2e-test-assume-role
    - in_parallel:
      - load_var: role
        file: assume-role/assume-role.json
      - load_var: image_filename
        file: image_info/image_filename
      - load_var: image_tag
        file: image_info/tag
    - in_parallel:
      - put: pull-request-builds-ecr
        params:
          image: local_image/((.:image_filename))
          additional_tags: image_info/tag
        get_params:
          skip_download: true
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PR_BUILD: true
          PROJECT_UNDER_TEST: frontend
          RELEASE_TAG_UNDER_TEST: ((.:image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - in_parallel:
      - task: run-card-e2e-tests
        attempts: 3
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-products-e2e-tests
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-zap-tests
        file: ci/ci/tasks/run-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - <<: *put-e2e-success-status
      put: card-frontend-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: card-frontend-pull-request

  - <<: *job-definition
    name: selfservice-e2e
    plan:
    - <<: *get-pull-request
      resource: selfservice-pull-request
    - in_parallel:
      - <<: *get-ci
      - <<: *put-e2e-pending-status
        put: selfservice-pull-request
    - <<: *node-build
    - <<: *generate-docker-creds-config
    - <<: *build-docker-image
      params:
        app_name: selfservice
    - in_parallel:
      - task: get-docker-image-info
        file: ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: selfservice
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: e2e-test-assume-role
    - in_parallel:
      - load_var: role
        file: assume-role/assume-role.json
      - load_var: image_filename
        file: image_info/image_filename
      - load_var: image_tag
        file: image_info/tag
    - in_parallel:
      - put: pull-request-builds-ecr
        params:
          image: local_image/((.:image_filename))
          additional_tags: image_info/tag
        get_params:
          skip_download: true
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PR_BUILD: true
          PROJECT_UNDER_TEST: selfservice
          RELEASE_TAG_UNDER_TEST: ((.:image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - task: run-card-e2e-tests
      attempts: 3
      file: ci/ci/tasks/run-codebuild.yml
      input_mapping:
        pay-ci: ci
      params:
        PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - <<: *put-e2e-success-status
      put: selfservice-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: selfservice-pull-request

  - <<: *job-definition
    name: products-ui-e2e
    plan:
    - <<: *get-pull-request
      resource: products-ui-pull-request
    - in_parallel:
      - <<: *get-ci
      - <<: *put-e2e-pending-status
        put: products-ui-pull-request
    - <<: *node-build
    - <<: *generate-docker-creds-config
    - <<: *build-docker-image
      params:
        app_name: products-ui
    - in_parallel:
      - task: get-docker-image-info
        file: ci/ci/tasks/get-pr-build-docker-image-info.yml
        params:
          app_name: products-ui
      - task: assume-role
        file: ci/ci/tasks/assume-role.yml
        input_mapping:
          pay-ci: ci
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
          AWS_ROLE_SESSION_NAME: e2e-test-assume-role
    - in_parallel:
      - load_var: role
        file: assume-role/assume-role.json
      - load_var: image_filename
        file: image_info/image_filename
      - load_var: image_tag
        file: image_info/tag
    - in_parallel:
      - put: pull-request-builds-ecr
        params:
          image: local_image/((.:image_filename))
          additional_tags: image_info/tag
        get_params:
          skip_download: true
      - task: prepare-codebuild
        file: ci/ci/tasks/prepare-e2e-codebuild.yml
        input_mapping:
          pay-ci: ci
        params:
          PR_BUILD: true
          PROJECT_UNDER_TEST: products-ui
          RELEASE_TAG_UNDER_TEST: ((.:image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - task: run-products-e2e-tests
      file: ci/ci/tasks/run-codebuild.yml
      input_mapping:
        pay-ci: ci
      params:
        PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
        AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
        AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    - <<: *put-e2e-success-status
      put: products-ui-pull-request
    on_failure:
      <<: *put-e2e-failed-status
      put: products-ui-pull-request

  - <<: *job-definition
    name: ci-pr-test
    plan:
    - <<: *get-pull-request
      resource: ci-pull-request
    - <<: *put-test-pending-status
      put: ci-pull-request
    - task: check-pipelines-and-tasks
      file: ci/ci/tasks/check-pipelines-and-tasks.yml
      on_failure:
        <<: *put-test-failed-status
        put: ci-pull-request
    - <<: *put-test-success-status
      put: ci-pull-request

  - name: update-pr-ci-pipeline
    plan:
      - get: pr-ci-pipeline
        trigger: true
      - set_pipeline: pr-ci
        file: pr-ci-pipeline/ci/pipelines/pr.yml
