aws_test_config: &aws_test_config
  aws_access_key_id: ((readonly_access_key_id))
  aws_secret_access_key: ((readonly_secret_access_key))
  aws_session_token: ((readonly_session_token))
  # Need to create the role for the concourse user to assume in the test account
  aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
  # Hardcode the test account registry ID for now. Needs to be a string, not a number
  aws_ecr_registry_id: "((pay_aws_test_account_id))"
  aws_region: eu-west-1

aws_staging_config: &aws_staging_config
  aws_access_key_id: ((readonly_access_key_id))
  aws_secret_access_key: ((readonly_secret_access_key))
  aws_session_token: ((readonly_session_token))
  aws_role_arn: arn:aws:iam::((pay_aws_staging_account_id)):role/concourse
  aws_ecr_registry_id: "((pay_aws_staging_account_id))"
  aws_region: eu-west-1

aws_assumed_role_creds: &aws_assumed_role_creds
  AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
  AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
  AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))

put_success_slack_notification: &put_success_slack_notification
  on_success:
    put: slack-notification
    params:
      channel: '#govuk-pay-activity'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: "((.:success_snippet)) |
            <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"
  
put_failure_slack_notification: &put_failure_slack_notification
  on_failure:
    put: slack-notification
    params:
      channel: '#govuk-pay-announce'
      icon_emoji: ":fargate:"
      username: pay-concourse
      text: "((.:failure_snippet)) \n
            - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

put_db_migration_slack_notification: &put_db_migration_slack_notification
  put: slack-notification
  params:
    channel: '#govuk-pay-announce'
    icon_emoji: ":postgres:"
    username: pay-concourse
    text: ":postgres: starting $BUILD_JOB_NAME on test-12\n
          - <https://pay-cd.deploy.payments.service.gov.ukcd.gds-reliability.engineering/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>"

wait_for_deploy_params: &wait_for_deploy_params
  <<: *aws_assumed_role_creds
  APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  TELEGRAF_IMAGE_TAG: ((.:telegraf_image_tag))
  ENVIRONMENT: test-12

deploy_params: &deploy_params
  <<: *aws_assumed_role_creds
  APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  NGINX_IMAGE_TAG: ((.:nginx_image_tag))
  TELEGRAF_IMAGE_TAG: ((.:telegraf_image_tag))
  ACCOUNT: test
  ENVIRONMENT: test-12

check_release_versions_params: &check_release_versions_params
  <<: *aws_assumed_role_creds
  AWS_REGION: "eu-west-1"
  CLUSTER_NAME: "test-12-fargate"
  APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  TELEGRAF_IMAGE_TAG: ((.:telegraf_image_tag))
  NGINX_IMAGE_TAG: ((.:nginx_image_tag))

snippet_params_all_versions: &snippet_params_all_versions
  ENV: test-12
  APPLICATION_IMAGE_TAG: ((.:application_image_tag))
  TELEGRAF_IMAGE_TAG: ((.:telegraf_image_tag))
  NGINX_IMAGE_TAG: ((.:nginx_image_tag))

snippet_params_app_version: &snippet_params_app_version
  ENV: test-12
  APPLICATION_IMAGE_TAG: ((.:application_image_tag))


resources:
  - name: deploy-to-test-pipeline-definition
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/deploy-to-test.yml
  - name: pay-ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master

  # Github Releases
  - name: telegraf-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-telegraf
      branch: main
      tag_regex: "(.*)-release"
      username: alphagov-pay-ci
      password: ((github-access-token))
  - name: nginx-forward-proxy-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-nginx-forward-proxy
      branch: main
      tag_regex: "(.*)-release"
      username: alphagov-pay-ci
      password: ((github-access-token))

  # Github Releases
  - name: toolbox-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-toolbox
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: frontend-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-frontend
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: adminusers-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-adminusers
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: cardid-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-cardid
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: connector-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-connector
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: ledger-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ledger
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: products-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-products
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: products-ui-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-products-ui
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: publicauth-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-publicauth
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: publicapi-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-publicapi
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: selfservice-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-selfservice
      branch: master
      tag_regex: "alpha_release-(.*)"  
  - name: webhooks-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-webhooks
      branch: main
      tag_regex: "alpha_release-(.*)"
  - name: nginx-proxy-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-nginx-proxy
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: notifications-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-notifications
      branch: master
      tag_regex: "alpha_release-(.*)"
  - name: pay-infra
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-infra
      branch: master
      username: alphagov-pay-ci
      password: ((github-access-token))

  # ECR registry resources
  - name: toolbox-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      variant: release
      <<: *aws_test_config
  - name: egress-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/egress
      variant: egress-release
      <<: *aws_test_config
  - name: frontend-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      variant: release
      <<: *aws_test_config
  - name: frontend-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      variant: candidate
      <<: *aws_test_config
  - name: frontend-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      tag: latest
      <<: *aws_test_config
  - name: adminusers-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      tag: latest-master
      password: ((docker-password))
      username: ((docker-username))
  - name: adminusers-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: release
      <<: *aws_test_config
  - name: adminusers-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      variant: candidate
      <<: *aws_test_config
  - name: adminusers-latest
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      tag: latest
      <<: *aws_test_config
  - name: cardid-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      tag: latest-master
      password: ((docker-password))
      username: ((docker-username))
  - name: cardid-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      variant: release
      <<: *aws_test_config
  - name: cardid-candidate
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      variant: candidate
      <<: *aws_test_config
  - name: cardid-latest
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      tag: latest
      <<: *aws_test_config      
  - name: connector-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: release
      <<: *aws_test_config
  - name: connector-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      variant: candidate
      <<: *aws_test_config
  - name: connector-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      tag: latest
      <<: *aws_test_config      
  - name: ledger-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: release
      <<: *aws_test_config
  - name: ledger-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      variant: candidate
      <<: *aws_test_config
  - name: ledger-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      tag: latest
      <<: *aws_test_config       
  - name: webhooks-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/webhooks
      variant: release
      <<: *aws_test_config
  - name: products-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: release
      <<: *aws_test_config
  - name: products-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      variant: candidate
      <<: *aws_test_config
  - name: products-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      tag: latest
      <<: *aws_test_config      
  - name: products-ui-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      variant: release
      <<: *aws_test_config
  - name: products-ui-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      variant: candidate
      <<: *aws_test_config
  - name: products-ui-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      tag: latest
      <<: *aws_test_config  
  - name: publicapi-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      variant: release
      <<: *aws_test_config
  - name: publicapi-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      variant: candidate
      <<: *aws_test_config
  - name: publicapi-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      tag: latest
      <<: *aws_test_config      
  - name: publicauth-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: release
      <<: *aws_test_config
  - name: publicauth-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      variant: candidate
      <<: *aws_test_config
  - name: publicauth-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      tag: latest
      <<: *aws_test_config      
  - name: selfservice-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      variant: release
      <<: *aws_test_config
  - name: selfservice-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      variant: candidate
      <<: *aws_test_config
  - name: selfservice-latest-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      tag: latest
      <<: *aws_test_config
  - name: carbon-relay-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/carbon-relay
      variant: carbon-relay-release
      <<: *aws_test_config
  - name: stunnel-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stunnel
      variant: stunnel-release
      <<: *aws_test_config
  - name: nginx-proxy-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      variant: release
      repository: govukpay/docker-nginx-proxy
      <<: *aws_test_config
  - name: nginx-forward-proxy-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/nginx-forward-proxy
      variant: release
      <<: *aws_test_config
  - name: telegraf-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/telegraf
      variant: release
      <<: *aws_test_config
  - name: notifications-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/notifications
      variant: release
      <<: *aws_test_config
  - name: toolbox-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/toolbox
      <<: *aws_staging_config
  - name: egress-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/egress
      <<: *aws_staging_config
  - name: frontend-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/frontend
      <<: *aws_staging_config
  - name: adminusers-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/adminusers
      <<: *aws_staging_config
  - name: connector-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/connector
      <<: *aws_staging_config
  - name: ledger-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/ledger
      <<: *aws_staging_config
  - name: products-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products
      <<: *aws_staging_config
  - name: products-ui-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/products-ui
      <<: *aws_staging_config
  - name: publicapi-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicapi
      <<: *aws_staging_config
  - name: publicauth-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/publicauth
      <<: *aws_staging_config
  - name: selfservice-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/selfservice
      <<: *aws_staging_config
  - name: cardid-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/cardid
      <<: *aws_staging_config
  - name: nginx-proxy-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/docker-nginx-proxy
      <<: *aws_staging_config
  - name: carbon-relay-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/carbon-relay
      <<: *aws_staging_config
  - name: stunnel-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stunnel
      <<: *aws_staging_config
  - name: nginx-forward-proxy-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/nginx-forward-proxy
      variant: release
      <<: *aws_staging_config
  - name: telegraf-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/telegraf
      <<: *aws_staging_config
  - name: notifications-ecr-registry-staging
    type: registry-image
    icon: docker
    source:
      repository: govukpay/notifications
      <<: *aws_staging_config
  - name: slack-notification
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-notification-secret))

resource_types:
  - name: registry-image
    type: registry-image
    source:
      repository: concourse/registry-image-resource
      tag: "1.4.1"
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

groups:
  - name: adminusers
    jobs:
      - push-adminusers-candidate-to-test-ecr
      - run-adminusers-e2e
      - deploy-adminusers
      - smoke-test-adminusers
      - adminusers-pact-tag
      - push-adminusers-to-staging-ecr
      - adminusers-db-migration
  - name: cardid
    jobs:
      - push-cardid-candidate-to-test-ecr
      - run-cardid-e2e
      - deploy-cardid
      - smoke-test-cardid
      - push-cardid-to-staging-ecr
  - name: connector
    jobs:
      - push-connector-to-test-ecr
      - run-connector-e2e
      - deploy-connector
      - smoke-test-connector
      - connector-pact-tag
      - push-connector-to-staging-ecr
      - connector-db-migration
  - name: egress
    jobs:
      - deploy-egress
      - smoke-test-egress
      - push-egress-to-staging-ecr
  - name: frontend
    jobs:
      - push-frontend-to-test-ecr
      - run-frontend-e2e
      - deploy-frontend
      - smoke-test-frontend
      - frontend-pact-tag
      - push-frontend-to-staging-ecr
  - name: ledger
    jobs:
      - push-ledger-to-test-ecr
      - run-ledger-e2e
      - deploy-ledger
      - smoke-test-ledger
      - ledger-pact-tag
      - push-ledger-to-staging-ecr
      - ledger-db-migration
  - name: products
    jobs:
      - push-products-to-test-ecr
      - run-products-e2e
      - deploy-products
      - smoke-test-products
      - products-pact-tag
      - push-products-to-staging-ecr
      - products-db-migration
  - name: products-ui
    jobs:
      - push-products-ui-to-test-ecr
      - run-products-ui-e2e
      - deploy-products-ui
      - smoke-test-products-ui
      - products-ui-pact-tag
      - push-products-ui-to-staging-ecr
  - name: publicapi
    jobs:
      - push-publicapi-to-test-ecr
      - run-publicapi-e2e
      - deploy-publicapi
      - smoke-test-publicapi
      - publicapi-pact-tag
      - push-publicapi-to-staging-ecr
  - name: publicauth
    jobs:
      - push-publicauth-to-test-ecr
      - run-publicauth-e2e
      - deploy-publicauth
      - smoke-test-publicauth
      - push-publicauth-to-staging-ecr
      - publicauth-db-migration
  - name: selfservice
    jobs:
      - push-selfservice-to-test-ecr
      - run-selfservice-e2e
      - deploy-selfservice
      - smoke-test-selfservice
      - selfservice-pact-tag
      - push-selfservice-to-staging-ecr
  - name: toolbox
    jobs:
      - push-toolbox-to-test-ecr
      - deploy-toolbox
      - push-toolbox-to-staging-ecr
  - name: webhooks
    jobs:
      - build-webhooks
      - deploy-webhooks
  - name: carbon-relay
    jobs:
      - deploy-carbon-relay
      - push-carbon-relay-to-staging-ecr
      - push-stunnel-to-staging-ecr
  - name: nginx-proxy
    jobs:
      - push-nginx-proxy-to-test-ecr
      - deploy-toolbox
      - push-nginx-proxy-to-staging-ecr
  - name: nginx-forward-proxy
    jobs:
      - deploy-frontend
      - smoke-test-frontend
      - build-and-push-nginx-forward-proxy-to-test-ecr
      - push-nginx-forward-proxy-to-staging-ecr
  - name: telegraf
    jobs:
      - unit-test-telegraf
      - build-and-push-telegraf-to-test-ecr
      - deploy-toolbox
      - push-telegraf-to-staging-ecr
  - name: notifications
    jobs:
      - push-notifications-to-test-ecr
      - deploy-notifications
      - smoke-test-notifications
      - push-notifications-to-staging-ecr
  - name: update-deploy-to-test-pipeline
    jobs:
      - update-deploy-to-test-pipeline

definitions:
  - &pull-image-from-dockerhub
    task: pull-image-from-dockerhub
    privileged: true
    file: pay-ci/ci/tasks/pull-image-from-dockerhub.yml
    params:
      DOCKER_USERNAME: updateThisValue
      DOCKER_AUTH_TOKEN: updateThisValue
      DOCKER_REPOSITORY: updateThisValue
  # Separate tasks for each combination of scenario/environment
  - &smoke-test-run-all-on-test
    limit: 8
    steps:
      - task: run_create_card_payment_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_sandbox_test"
      - task: run_create_card_payment_worldpay_with_3ds-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds_test"
      - task: run_create_card_payment_worldpay_with_3ds2-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds2_test"
      - task: run_create_card_payment_worldpay_with_3ds2_exemption-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_3ds2ex_test"
      - task: run_create_card_payment_worldpay_without_3ds-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_wpay_test"
      - task: run_cancel_card_payment_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "cancel_sandbox_test"
      - task: run_use_payment_link_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "pymntlnk_sandbox_test"
      - task: run_create_card_payment_stripe-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_stripe_test"
      - task: run_create_card_payment_stripe_3ds-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "card_stripe_3ds_test"
      - task: run_notifications_sandbox-test
        file: pay-ci/ci/tasks/run-smoke-test.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          SMOKE_TEST_NAME: "notifcatns_sndbx_test"

docker_credentials: &docker_credentials
  DOCKER_USERNAME: ((docker-username))
  DOCKER_AUTH_TOKEN: ((docker-password))

jobs:
  - name: update-deploy-to-test-pipeline
    plan:
      - get: deploy-to-test-pipeline-definition
        trigger: true
      - set_pipeline: deploy-to-test
        file: deploy-to-test-pipeline-definition/ci/pipelines/deploy-to-test.yml
  - name: push-toolbox-to-test-ecr
    plan:
      - get: pay-ci
      - get: toolbox-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: toolbox-git-release
        params:
          DOCKER_REPOSITORY: govukpay/toolbox
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: toolbox-git-release
      - put: toolbox-ecr-registry-test
        params:
          image: image/image.tar
          additional_tags: tags/tags
  
  - name: deploy-carbon-relay
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: carbon-relay-ecr-registry-test
        trigger: true
      - get: stunnel-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: carbon_relay_image_tag
        file: carbon-relay-ecr-registry-test/tag
      - load_var: stunnel_image_tag
        file: stunnel-ecr-registry-test/tag  
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-carbon-relay-notification-snippets.yml
        params:
          CARBON_RELAY_IMAGE_TAG: ((.:carbon_relay_image_tag))
          ENV: test-12
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success  
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "test-12-fargate"
          APP_NAME: carbon-relay
          CARBON_RELAY_IMAGE_TAG: ((.:carbon_relay_image_tag))
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-carbon-relay.yml
        params:
          <<: *aws_assumed_role_creds
          CARBON_RELAY_IMAGE_TAG: ((.:carbon_relay_image_tag))
          STUNNEL_IMAGE_TAG: ((.:stunnel_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: carbon-relay
          CARBON_RELAY_IMAGE_TAG: ((.:carbon_relay_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: test-12
    <<: *put_success_slack_notification      
    <<: *put_failure_slack_notification

  - name: push-carbon-relay-to-staging-ecr
    plan:
      - get: carbon-relay-ecr-registry-test
        passed: [deploy-carbon-relay]
        params:
          format: oci
        trigger: true
      - put: carbon-relay-ecr-registry-staging
        params:
          image: carbon-relay-ecr-registry-test/image.tar
          additional_tags: carbon-relay-ecr-registry-test/tag

  - name: push-stunnel-to-staging-ecr
    plan:
      - get: stunnel-ecr-registry-test
        passed: [deploy-carbon-relay]
        params:
          format: oci
        trigger: true
      - put: stunnel-ecr-registry-staging
        params:
          image: stunnel-ecr-registry-test/image.tar
          additional_tags: stunnel-ecr-registry-test/tag

  - name: deploy-toolbox
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: toolbox-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: toolbox-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: toolbox
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: toolbox
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: toolbox
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: toolbox
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-toolbox-to-staging-ecr
    plan:
      - get: toolbox-ecr-registry-test
        passed: [deploy-toolbox]
        params:
          format: oci
        trigger: true
      - put: toolbox-ecr-registry-staging
        params:
          image: toolbox-ecr-registry-test/image.tar
          additional_tags: toolbox-ecr-registry-test/tag

  - name: deploy-egress
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: egress-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          ACTION_NAME: Deployment
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: test-12
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success  
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "test-12-fargate"
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-egress.yml
        params:
          <<: *aws_assumed_role_creds
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: egress
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          <<: *aws_assumed_role_creds
          ENVIRONMENT: test-12
    <<: *put_success_slack_notification      
    <<: *put_failure_slack_notification

  - name: smoke-test-egress
    serial_groups: [smoke-test]
    plan:
      - get: egress-ecr-registry-test
        trigger: true
        passed: [deploy-egress]
      - get: pay-ci
      - load_var: application_image_tag
        file: egress-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-egress-notification-snippets.yml
        params:
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-egress-to-staging-ecr
    plan:
      - get: egress-ecr-registry-test
        passed: [smoke-test-egress]
        params:
          format: oci
        trigger: true
      - put: egress-ecr-registry-staging
        params:
          image: egress-ecr-registry-test/image.tar
          additional_tags: egress-ecr-registry-test/tag

  - name: push-frontend-to-test-ecr
    plan:
      - get: pay-ci
      - get: frontend-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: frontend-git-release
        params:
          DOCKER_REPOSITORY: govukpay/frontend
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: frontend-git-release
      - in_parallel:
        - put: frontend-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: frontend-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-frontend-e2e
    plan:
      - in_parallel:
        - get: frontend-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-frontend-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: frontend-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: frontend
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-product
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-card
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - put: frontend-latest-ecr-registry-test
        params:
          image: frontend-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: frontend candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: frontend candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse

  - name: deploy-frontend
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: frontend-ecr-registry-test
        trigger: true
      - get: nginx-forward-proxy-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: frontend-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: nginx_forward_proxy_image_tag
        file: nginx-forward-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Deployment
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: frontend
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: frontend
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-frontend.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: frontend
          NGINX_FORWARD_PROXY_IMAGE_TAG: ((.:nginx_forward_proxy_image_tag))
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-frontend
    serial_groups: [smoke-test]
    plan:
      - get: frontend-ecr-registry-test
        trigger: true
        passed: [deploy-frontend]
      - get: nginx-forward-proxy-ecr-registry-test
        trigger: true
        passed: [deploy-frontend]
      - get: pay-ci
      - load_var: application_image_tag
        file: frontend-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: frontend-pact-tag
    plan:
      - get: frontend-ecr-registry-test
        passed: [smoke-test-frontend]
        trigger: true
      - load_var: application_image_tag
        file: frontend-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: frontend
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: frontend
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: frontend
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-frontend-to-staging-ecr
    plan:
      - get: frontend-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [frontend-pact-tag]
      - put: frontend-ecr-registry-staging
        params:
          image: frontend-ecr-registry-test/image.tar
          additional_tags: frontend-ecr-registry-test/tag

  - name: push-adminusers-candidate-to-test-ecr
    plan:
      - get: pay-ci
      - get: adminusers-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: adminusers-git-release
        params:
          DOCKER_REPOSITORY: govukpay/adminusers
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: adminusers-git-release
      - put: adminusers-candidate
        params:
          image: image/image.tar
          additional_tags: tags/candidate-tag
        get_params:
          skip_download: true

  - name: run-adminusers-e2e
    plan:
      - in_parallel:
        - get: adminusers-candidate
          params:
            format: oci
          trigger: true
          passed: [push-adminusers-candidate-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - task: parse-candidate-tag
          file: pay-ci/ci/tasks/parse-candidate-tag.yml
          input_mapping:
            ecr-repo: adminusers-candidate
        - load_var: candidate_image_tag
          file: adminusers-candidate/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: adminusers
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-card
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - do:
          - put: adminusers-ecr-registry-test
            params:
              image: adminusers-candidate/image.tar
              additional_tags: parse-candidate-tag/release-tag
            get_params:
              skip_download: true
          - put: adminusers-latest
            params:
              image: adminusers-candidate/image.tar
            get_params:
              skip_download: true
        - put: adminusers-dockerhub
          params:
              image: adminusers-candidate/image.tar
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: adminusers candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: adminusers candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-adminusers
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: adminusers-ecr-registry-test
        trigger: true
        passed: [run-adminusers-e2e]
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: adminusers
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: adminusers
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: adminusers
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: adminusers
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: adminusers
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: adminusers-db-migration
    plan:
      - get: pay-ci
      - get: adminusers-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-adminusers]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/node-runner
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "adminusers"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js

  - name: smoke-test-adminusers
    serial_groups: [smoke-test]
    plan:
      - get: adminusers-ecr-registry-test
        trigger: true
        passed: [deploy-adminusers]
      - get: pay-ci
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: adminusers-pact-tag
    plan:
      - get: adminusers-ecr-registry-test
        passed: [smoke-test-adminusers]
        trigger: true
      - load_var: application_image_tag
        file: adminusers-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: adminusers
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: adminusers
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: adminusers
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-adminusers-to-staging-ecr
    plan:
      - get: adminusers-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [adminusers-pact-tag]
      - put: adminusers-ecr-registry-staging
        params:
          image: adminusers-ecr-registry-test/image.tar
          additional_tags: adminusers-ecr-registry-test/tag

  - name: push-connector-to-test-ecr
    plan:
      - get: pay-ci
      - get: connector-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: connector-git-release
        params:
          DOCKER_REPOSITORY: govukpay/connector
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: connector-git-release
      - in_parallel:
        - put: connector-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: connector-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-connector-e2e
    plan:
      - in_parallel:
        - get: connector-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-connector-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: connector-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: connector
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-card
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - put: connector-latest-ecr-registry-test
        params:
          image: connector-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: connector candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: connector candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse

  - name: deploy-connector
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: connector-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: connector
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: connector
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: connector
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: connector
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: connector
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: connector-db-migration
    plan:
      - get: pay-ci
      - get: connector-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-connector]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/node-runner
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "connector"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
  - name: smoke-test-connector
    serial_groups: [smoke-test]
    plan:
      - get: connector-ecr-registry-test
        trigger: true
        passed: [deploy-connector]
      - get: pay-ci
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: connector-pact-tag
    plan:
      - get: connector-ecr-registry-test
        passed: [smoke-test-connector]
        trigger: true
      - load_var: application_image_tag
        file: connector-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: connector
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: connector
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: connector
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-connector-to-staging-ecr
    plan:
      - get: connector-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [connector-pact-tag]
      - put: connector-ecr-registry-staging
        params:
          image: connector-ecr-registry-test/image.tar
          additional_tags: connector-ecr-registry-test/tag

  - name: push-ledger-to-test-ecr
    plan:
      - get: pay-ci
      - get: ledger-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: ledger-git-release
        params:
          DOCKER_REPOSITORY: govukpay/ledger
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: ledger-git-release
      - in_parallel:
        - put: ledger-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: ledger-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-ledger-e2e
    plan:
      - in_parallel:
        - get: ledger-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-ledger-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: ledger-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: ledger
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-card
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - put: ledger-latest-ecr-registry-test
        params:
          image: ledger-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: ledger candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: ledger candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse

  - name: deploy-ledger
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: ledger-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: ledger
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: ledger
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: ledger
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: ledger
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: ledger
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-ledger
    serial_groups: [smoke-test]
    plan:
      - get: ledger-ecr-registry-test
        trigger: true
        passed: [deploy-ledger]
      - get: pay-ci
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: ledger-pact-tag
    plan:
      - get: ledger-ecr-registry-test
        passed: [smoke-test-ledger]
        trigger: true
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: ledger
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: ledger
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: ledger
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-ledger-to-staging-ecr
    plan:
      - get: ledger-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [ledger-pact-tag]
      - put: ledger-ecr-registry-staging
        params:
          image: ledger-ecr-registry-test/image.tar
          additional_tags: ledger-ecr-registry-test/tag

  - name: ledger-db-migration
    plan:
      - get: pay-ci
      - get: ledger-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-ledger]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: ledger-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/node-runner
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "ledger"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js

  - name: push-products-to-test-ecr
    plan:
      - get: pay-ci
      - get: products-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: products-git-release
        params:
          DOCKER_REPOSITORY: govukpay/products
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: products-git-release
      - in_parallel:
        - put: products-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: products-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-products-e2e
    plan:
      - in_parallel:
        - get: products-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-products-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: products-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: products
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-product
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))          
      - put: products-latest-ecr-registry-test
        params:
          image: products-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: products candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: products candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse

  - name: deploy-products
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: products-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: products
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: products
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: products-db-migration
    plan:
      - get: pay-ci
      - get: products-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-products]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/node-runner
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "products"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
  - name: smoke-test-products
    serial_groups: [smoke-test]
    plan:
      - get: products-ecr-registry-test
        trigger: true
        passed: [deploy-products]
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: products-pact-tag
    plan:
      - get: products-ecr-registry-test
        passed: [smoke-test-products]
        trigger: true
      - load_var: application_image_tag
        file: products-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-products-to-staging-ecr
    plan:
      - get: products-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [products-pact-tag]
      - put: products-ecr-registry-staging
        params:
          image: products-ecr-registry-test/image.tar
          additional_tags: products-ecr-registry-test/tag

  - name: push-products-ui-to-test-ecr
    plan:
      - get: pay-ci
      - get: products-ui-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: products-ui-git-release
        params:
          DOCKER_REPOSITORY: govukpay/products-ui
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: products-ui-git-release
      - in_parallel:
        - put: products-ui-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: products-ui-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag    

  - name: run-products-ui-e2e
    plan:
      - in_parallel:
        - get: products-ui-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-products-ui-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: products-ui-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: products-ui
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - task: run-codebuild-product
        file: pay-ci/ci/tasks/run-codebuild.yml
        params:
          PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))          
      - put: products-ui-latest-ecr-registry-test
        params:
          image: products-ui-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: products-ui candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: products-ui candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse       

  - name: deploy-products-ui
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: products-ui-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products-ui
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products-ui
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: products-ui
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: products-ui
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: products-ui
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-products-ui
    serial_groups: [smoke-test]
    plan:
      - get: products-ui-ecr-registry-test
        trigger: true
        passed: [deploy-products-ui]
      - get: pay-ci
      - load_var: application_image_tag
        file: products-ui-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: products-ui-pact-tag
    plan:
      - get: products-ui-ecr-registry-test
        passed: [smoke-test-products-ui]
        trigger: true
      - load_var: application_image_tag
        file: products-ui-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: products-ui
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: products-ui
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: products-ui
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-products-ui-to-staging-ecr
    plan:
      - get: products-ui-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [products-ui-pact-tag]
      - put: products-ui-ecr-registry-staging
        params:
          image: products-ui-ecr-registry-test/image.tar
          additional_tags: products-ui-ecr-registry-test/tag

  - name: push-publicapi-to-test-ecr
    plan:
      - get: pay-ci
      - get: publicapi-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: publicapi-git-release
        params:
          DOCKER_REPOSITORY: govukpay/publicapi
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: publicapi-git-release
      - in_parallel:
        - put: publicapi-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: publicapi-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-publicapi-e2e
    plan:
      - in_parallel:
        - get: publicapi-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-publicapi-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: publicapi-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: publicapi
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-product
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-card
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - put: publicapi-latest-ecr-registry-test
        params:
          image: publicapi-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: publicapi candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: publicapi candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse

  - name: deploy-publicapi
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: publicapi-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: publicapi
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: publicapi
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: publicapi
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: publicapi
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicapi
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-publicapi
    serial_groups: [smoke-test]
    plan:
      - get: publicapi-ecr-registry-test
        trigger: true
        passed: [deploy-publicapi]
      - get: pay-ci
      - load_var: application_image_tag
        file: publicapi-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: publicapi-pact-tag
    plan:
      - get: publicapi-ecr-registry-test
        passed: [smoke-test-publicapi]
        trigger: true
      - load_var: application_image_tag
        file: publicapi-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicapi
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: publicapi
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: publicapi
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-publicapi-to-staging-ecr
    plan:
      - get: publicapi-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [publicapi-pact-tag]
      - put: publicapi-ecr-registry-staging
        params:
          image: publicapi-ecr-registry-test/image.tar
          additional_tags: publicapi-ecr-registry-test/tag

  - name: push-publicauth-to-test-ecr
    plan:
      - get: pay-ci
      - get: publicauth-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: publicauth-git-release
        params:
          DOCKER_REPOSITORY: govukpay/publicauth
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: publicauth-git-release
      - in_parallel:
        - put: publicauth-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: publicauth-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-publicauth-e2e
    plan:
      - in_parallel:
        - get: publicauth-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-publicauth-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: publicauth-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: publicauth
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:    
        - task: run-codebuild-card
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - put: publicauth-latest-ecr-registry-test
        params:
          image: publicauth-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: publicauth candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: publicauth candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse

  - name: deploy-publicauth
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: publicauth-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicauth
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: publicauth
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: publicauth
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: publicauth
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: publicauth-db-migration
    plan:
      - get: pay-ci
      - get: publicauth-ecr-registry-test
        params:
          format: oci
        trigger: false
        passed: [deploy-publicauth]
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - load_var: application_image_tag
        file: publicauth-ecr-registry-test/tag
      - <<: *put_db_migration_slack_notification
      - task: run-db-migration
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/node-runner
          inputs:
            - name: pay-ci
          params:
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
            AWS_PAGER: ""
            AWS_REGION: "eu-west-1"
            CLUSTER_NAME: "test-12-fargate"
            APP_NAME: "publicauth"
            APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          run:
            path: node
            args:
              - pay-ci/ci/scripts/run-ecs-db-migration.js
  - name: smoke-test-publicauth
    serial_groups: [smoke-test]
    plan:
      - get: publicauth-ecr-registry-test
        trigger: true
        passed: [deploy-publicauth]
      - get: pay-ci
      - load_var: application_image_tag
        file: publicauth-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: publicauth
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-publicauth-to-staging-ecr
    plan:
      - get: publicauth-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [smoke-test-publicauth]
      - put: publicauth-ecr-registry-staging
        params:
          image: publicauth-ecr-registry-test/image.tar
          additional_tags: publicauth-ecr-registry-test/tag

  - name: push-selfservice-to-test-ecr
    plan:
      - get: pay-ci
      - get: selfservice-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: selfservice-git-release
        params:
          DOCKER_REPOSITORY: govukpay/selfservice
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: selfservice-git-release
      - in_parallel:    
        - put: selfservice-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/tags
        - put: selfservice-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag

  - name: run-selfservice-e2e
    plan:
      - in_parallel:
        - get: selfservice-candidate-ecr-registry-test
          params:
            format: oci
          trigger: true
          passed: [push-selfservice-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - load_var: candidate_image_tag
          file: selfservice-candidate-ecr-registry-test/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: selfservice
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-product
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-card
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - put: selfservice-latest-ecr-registry-test
        params:
          image: selfservice-candidate-ecr-registry-test/image.tar
#    on_failure:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-announce'
#        silent: true
#        text: ':red-circle: selfservice candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse
#    on_success:
#      put: slack-notification
#      attempts: 10
#      params:
#        channel: '#govuk-pay-activity'
#        silent: true
#        text: ':green-circle: selfservice candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
#        icon_emoji: ":concourse:"
#        username: pay-concourse            

  - name: deploy-selfservice
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: selfservice-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: selfservice
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: check-pact-compatibility
        file: pay-ci/ci/tasks/check-pact-compatibility.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: selfservice
          PACT_TAG: test-fargate
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: selfservice
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: selfservice
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: selfservice
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-selfservice
    serial_groups: [smoke-test]
    plan:
      - get: selfservice-ecr-registry-test
        trigger: true
        passed: [deploy-selfservice]
      - get: pay-ci
      - load_var: application_image_tag
        file: selfservice-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification


  - name: selfservice-pact-tag
    plan:
      - get: selfservice-ecr-registry-test
        passed: [smoke-test-selfservice]
        trigger: true
      - load_var: application_image_tag
        file: selfservice-ecr-registry-test/tag
      - get: pay-ci
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: selfservice
          ACTION_NAME: Pact tag
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: get-git-sha-for-release-tag
        file: pay-ci/ci/tasks/get-git-sha-for-release-tag.yml
        params:
          APP_NAME: selfservice
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - load_var: git-sha
        file: git-sha/git-sha
      - task: tag-pact
        file: pay-ci/ci/tasks/pact-tag.yml
        params:
          GIT_SHA: ((.:git-sha))
          APP_NAME: selfservice
          PACT_TAG: test-fargate
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-selfservice-to-staging-ecr
    plan:
      - get: selfservice-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [selfservice-pact-tag]
      - put: selfservice-ecr-registry-staging
        params:
          image: selfservice-ecr-registry-test/image.tar
          additional_tags: selfservice-ecr-registry-test/tag

  - name: push-cardid-candidate-to-test-ecr
    plan:
      - get: pay-ci
      - get: cardid-git-release
        trigger: true
        params:
          submodules: none
      - task: update-submodule
        config:
          container_limits: {}
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/concourse-runner
          inputs:
            - name: cardid-git-release
          params:
            GH_ACCESS_TOKEN: ((github-access-token))
          outputs:
            - name: image
          run:
            path: bash
            dir: cardid-git-release
            args:
              - -ec
              - |
                # cardid-data submodule's url is defined as ssh yet concourse
                # is using oauth. Furthermore we need to avoid the password
                # prompt from the git cli. Therefore rewrite the url for https
                # and add the token. The risk of setting the token in the url is
                # mitigated since these files are not committed, the container is ephemeral
                # and anyone with access to read the files could read the token from
                # environment variable. Furthermore we redact the token from the
                # files after the update.
                sed -i "s/git@github.com:/https:\/\/${GH_ACCESS_TOKEN}@github.com\//" .gitmodules
                git submodule init -q data
                git submodule update data
                sed -i "s/${GH_ACCESS_TOKEN}/token_redacted/" .gitmodules
                sed -i "s/${GH_ACCESS_TOKEN}/token_redacted/" .git/config
    # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: cardid-git-release
        params:
          DOCKER_REPOSITORY: govukpay/cardid
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
         git-release: cardid-git-release
      - put: cardid-candidate
        params:
          image: image/image.tar
          additional_tags: tags/candidate-tag         
        get_params:
          skip_download: true

  - name: run-cardid-e2e
    plan:
      - in_parallel:
        - get: cardid-candidate
          params:
            format: oci
          trigger: true
          passed: [push-cardid-candidate-to-test-ecr]
        - get: pay-ci
      - in_parallel:
        - task: parse-candidate-tag
          file: pay-ci/ci/tasks/parse-candidate-tag.yml
          input_mapping:
            ecr-repo: cardid-candidate
        - load_var: candidate_image_tag
          file: cardid-candidate/tag
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: cardid
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:    
        - task: run-codebuild-card
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap    
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - do:
          - put: cardid-ecr-registry-test
            params:
              image: cardid-candidate/image.tar
              additional_tags: parse-candidate-tag/release-tag
            get_params:
              skip_download: true
          - put: cardid-latest
            params:
              image: cardid-candidate/image.tar
            get_params:
              skip_download: true
        - put: cardid-dockerhub
          params:
            image: cardid-candidate/image.tar
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-announce'
        silent: true
        text: ':red-circle: cardid candidate image ((.:candidate_image_tag)) failed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: cardid candidate image ((.:candidate_image_tag)) passed post-merge end to end tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: deploy-cardid
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: cardid-ecr-registry-test
        trigger: true
        passed: [run-cardid-e2e]
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-staging-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: cardid
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: cardid
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: cardid
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: smoke-test-cardid
    serial_groups: [smoke-test]
    plan:
      - get: cardid-ecr-registry-test
        trigger: true
        passed: [deploy-cardid]
      - get: pay-ci
      - load_var: application_image_tag
        file: cardid-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: cardid
          ACTION_NAME: Smoke test
          <<: *snippet_params_app_version
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-cardid-to-staging-ecr
    plan:
      - get: cardid-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [smoke-test-cardid]
      - put: cardid-ecr-registry-staging
        params:
          image: cardid-ecr-registry-test/image.tar
          additional_tags: cardid-ecr-registry-test/tag
          
  - name: build-webhooks
    plan:
      - get: webhooks-git-release
        trigger: true
      - get: pay-ci
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: webhooks-git-release
      - task: build-jar
        config:
          container_limits: {}
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: maven
              tag: 3-openjdk-17
          inputs:
            - name: webhooks-git-release
          outputs:
            - name: jar
          run:
            path: bash
            args:
            - -ec
            - |
              ls -lrt
              pwd

              cd webhooks-git-release
              mvn clean package
              cp -r . ../jar

      - task: build-image
        privileged: true
        config:
          container_limits: {}
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/concourse-runner
              tag: latest
          inputs:
            - name: jar
          outputs:
            - name: local_image
          params:
            app_name: webhooks
          run:
            path: bash
            args:
            - -ec
            - |
              ls -lrt
              pwd

              source /docker-helpers.sh
              start_docker

              function cleanup {
                echo "CLEANUP TRIGGERED"
                clean_docker
                stop_docker
                echo "CLEANUP COMPLETE"
              }

              trap cleanup EXIT

              file_suffix="PR-$(cat jar/.git/HEAD)"

              cd jar

              image_name="govukpay/${app_name}:test"
              echo "BUILDING ${app_name} with tag ${image_name}"
              docker build -t "$image_name" .
              docker image ls
              docker save "$image_name" -o ../local_image/image-"${app_name}"-"${file_suffix}".tar
      - put: webhooks-ecr-registry-test
        params:
          image: local_image/*.tar
          additional_tags: tags/tags


  - name: deploy-webhooks
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: webhooks-ecr-registry-test
        trigger: true
      - get: nginx-proxy-ecr-registry-test
        trigger: true
      - get: telegraf-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: webhooks-ecr-registry-test/tag
      - load_var: nginx_image_tag
        file: nginx-proxy-ecr-registry-test/tag
      - load_var: telegraf_image_tag
        file: telegraf-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          APP_NAME: webhooks
          ACTION_NAME: Deployment
          <<: *snippet_params_all_versions
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *check_release_versions_params
          APP_NAME: webhooks
      - task: deploy-to-test
        file: pay-ci/ci/tasks/deploy-app.yml
        params:
          APP_NAME: webhooks
          <<: *deploy_params
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: webhooks
          <<: *wait_for_deploy_params
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-nginx-proxy-to-test-ecr
    plan:
      - get: pay-ci
      - get: nginx-proxy-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: nginx-proxy-git-release
        params:
          DOCKER_REPOSITORY: govukpay/docker-nginx-proxy
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: nginx-proxy-git-release
      - put: nginx-proxy-ecr-registry-test
        params:
          image: image/image.tar
          additional_tags: tags/tags
  - name: push-nginx-proxy-to-staging-ecr
    plan:
      - get: pay-ci
      - get: nginx-proxy-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [deploy-toolbox]
      - put: nginx-proxy-ecr-registry-staging
        params:
          image: nginx-proxy-ecr-registry-test/image.tar
          additional_tags: nginx-proxy-ecr-registry-test/tag
  - name: build-and-push-nginx-forward-proxy-to-test-ecr
    plan:
      - get: pay-ci
      - get: nginx-forward-proxy-git-release
        trigger: true
      - task: build-nginx-forward-proxy-image
        privileged: true
        params:
            CONTEXT: nginx-forward-proxy-git-release
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: nginx-forward-proxy-git-release
          outputs:
            - name: image
          run:
            path: build
      - put: nginx-forward-proxy-ecr-registry-test
        params:
          image: image/image.tar
          additional_tags: nginx-forward-proxy-git-release/.git/ref
  - name: push-nginx-forward-proxy-to-staging-ecr
    plan:
      - get: pay-ci
      - get: nginx-forward-proxy-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [smoke-test-frontend]
      - put: nginx-forward-proxy-ecr-registry-staging
        params:
          image: nginx-forward-proxy-ecr-registry-test/image.tar
          additional_tags: nginx-forward-proxy-ecr-registry-test/tag
  - name: unit-test-telegraf
    plan:
      - get: pay-ci
      - get: telegraf-git-release
        trigger: true
      - task: run-telegraf-unit-tests
        config:
          container_limits: {}
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: govukpay/concourse-runner
          inputs:
            - name: telegraf-git-release
          run:
            path: ./start.test.sh
            dir: telegraf-git-release
  - name: build-and-push-telegraf-to-test-ecr
    plan:
      - get: pay-ci
      - get: telegraf-git-release
        trigger: true
        passed: [unit-test-telegraf]
      - task: build-telegraf-image
        privileged: true
        params:
            CONTEXT: telegraf-git-release
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: telegraf-git-release
          outputs:
            - name: image
          run:
            path: build
      - put: telegraf-ecr-registry-test
        params:
         image: image/image.tar
         additional_tags: telegraf-git-release/.git/ref
  - name: push-telegraf-to-staging-ecr
    plan:
      - get: pay-ci
      - get: telegraf-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [deploy-toolbox]
      - put: telegraf-ecr-registry-staging
        params:
          image: telegraf-ecr-registry-test/image.tar
          additional_tags: telegraf-ecr-registry-test/tag

  - name: push-notifications-to-test-ecr
    plan:
      - get: pay-ci
      - get: notifications-git-release
        trigger: true
      # Temporarily fetch image from Dockerhub until Concourse can build its own
      - <<: *pull-image-from-dockerhub
        input_mapping:
          git-release: notifications-git-release
        params:
          DOCKER_REPOSITORY: govukpay/notifications
          <<: *docker_credentials
      - task: parse-release-tag
        file: pay-ci/ci/tasks/parse-release-tag.yml
        input_mapping:
          git-release: notifications-git-release
      - put: notifications-ecr-registry-test
        params:
          image: image/image.tar
          additional_tags: tags/tags

  - name: deploy-notifications
    serial: true
    serial_groups: [deploy-application]
    plan:
      - get: notifications-ecr-registry-test
        trigger: true
      - get: pay-infra
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          ACTION_NAME: Deployment
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: test-12
      - load_var: failure_snippet
        file: snippet/failure
      - load_var: success_snippet
        file: snippet/success 
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
          AWS_ROLE_SESSION_NAME: terraform-test-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - task: check-release-versions
        file: pay-ci/ci/tasks/check-release-versions.yml
        params:
          <<: *aws_assumed_role_creds
          AWS_REGION: "eu-west-1"
          CLUSTER_NAME: "test-12-fargate"
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
      - task: deploy-to-test
        params:
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ACCOUNT: test
          ENVIRONMENT: test-12
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
          AWS_REGION: eu-west-1
        config:
          platform: linux
          inputs:
            - name: pay-infra
          image_resource:
            type: registry-image
            source:
              repository: hashicorp/terraform
              tag: 1.0.8
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                cd pay-infra/provisioning/terraform/deployments/${ACCOUNT}/${ENVIRONMENT}/microservices_v2/notifications
                terraform init
                terraform apply \
                  -var notifications_image_tag=${APPLICATION_IMAGE_TAG} \
                  -auto-approve
      - task: wait-for-deploy
        file: pay-ci/ci/tasks/wait-for-deploy.yml
        params:
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENVIRONMENT: test-12
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
    <<: *put_success_slack_notification 
    <<: *put_failure_slack_notification

  - name: smoke-test-notifications
    serial_groups: [smoke-test]
    plan:
      - get: notifications-ecr-registry-test
        trigger: true
        passed: [deploy-notifications]
      - get: pay-ci
      - load_var: application_image_tag
        file: notifications-ecr-registry-test/tag
      - task: create-notification-snippets
        file: pay-ci/ci/tasks/create-notification-snippets.yml
        params:
          ACTION_NAME: Smoke test
          APP_NAME: notifications
          APPLICATION_IMAGE_TAG: ((.:application_image_tag))
          ENV: test-12
      - load_var: success_snippet
        file: snippet/success
      - load_var: failure_snippet
        file: snippet/failure
      - task: assume-role
        file: pay-ci/ci/tasks/assume-role.yml
        params:
          AWS_ROLE_ARN: arn:aws:iam::((pay_aws_deploy_account_id)):role/concourse_trigger_canary
          AWS_ROLE_SESSION_NAME: trigger-canary-deploy-assume-role
      - load_var: role
        file: assume-role/assume-role.json
        format: json
      - in_parallel:
          <<: *smoke-test-run-all-on-test
    <<: *put_success_slack_notification
    <<: *put_failure_slack_notification

  - name: push-notifications-to-staging-ecr
    plan:
      - get: notifications-ecr-registry-test
        params:
          format: oci
        trigger: true
        passed: [smoke-test-notifications]
      - put: notifications-ecr-registry-staging
        params:
          image: notifications-ecr-registry-test/image.tar
          additional_tags: notifications-ecr-registry-test/tag
