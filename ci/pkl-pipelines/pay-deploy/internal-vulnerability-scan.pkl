amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"

import "../common/shared_resources_for_slack_notifications.pkl"
import "../common/shared_resources_for_times.pkl"

local typealias SlackNotificationConfig = shared_resources_for_slack_notifications.SlackNotificationConfig

resource_types {
  shared_resources.pullRequestResourceType
  shared_resources.slackNotificationResourceType
  shared_resources_for_times.cronResourceType
}

resources = new {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-deploy/internal-vulnerability-scan.pkl", "master")
  shared_resources.payCiGitHubResource
  shared_resources.slackNotificationResource
  shared_resources_for_times.quarterlyCronResource
}

jobs = new {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-deploy/internal-vulnerability-scan.pkl")

  new {
    name = "run-vulnerability-scan"
    plan {
      new InParallelStep {
        in_parallel = new Listing<Step> {
          new GetStep { get = "pay-ci" }
          shared_resources_for_times.getQuarterlyCronTrigger
        }
      }
      assumeReadFromStagingEcrRole()
      new LoadVarStep {
        load_var = "assume-read-from-staging-ecr-role"
        file = "assume-read-from-staging-ecr-role/assume-role.json"
        format = "json"
      }
      runVulnerabilityScan()
      createJiraStory()
    }

    on_failure = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig { message = "Failed to run vulnerability scan"
        slack_channel_for_failure = "#govuk-pay-starling" }
    )
    on_success = shared_resources_for_slack_notifications.paySlackNotification(
      new SlackNotificationConfig { is_a_success = true; message = "Internal vulnerability scan has been completed"
        slack_channel_for_success = "#govuk-pay-starling" }
    )
  }

}

local function assumeReadFromStagingEcrRole(): TaskStep = new TaskStep {
  task = "assume-read-from-staging-ecr-role"
  file = "pay-ci/ci/tasks/assume-role.yml"
  output_mapping {
    ["assume-role"] = "assume-read-from-staging-ecr-role"
  }
  params {
    ["AWS_ROLE_ARN"] = "arn:aws:iam::((pay_aws_staging_account_id)):role/concourse"
    ["AWS_ROLE_SESSION_NAME"] = "read-from-ecr-in-staging"
  }
}

local function runVulnerabilityScan(): TaskStep = new TaskStep {
  task = "run-vulnerability-scan"
  file = "pay-ci/ci/tasks/run-vulnerability-scan.yml"
  privileged = true

  params {
    ["ECR_REGISTRY"] = "((pay_aws_staging_account_id)).dkr.ecr.eu-west-1.amazonaws.com"
    ["AWS_ACCESS_KEY_ID"] = "((.:assume-read-from-staging-ecr-role.AWS_ACCESS_KEY_ID))"
    ["AWS_SECRET_ACCESS_KEY"] = "((.:assume-read-from-staging-ecr-role.AWS_SECRET_ACCESS_KEY))"
    ["AWS_SESSION_TOKEN"] = "((.:assume-read-from-staging-ecr-role.AWS_SESSION_TOKEN))"
    ["AWS_DEFAULT_REGION"] = "eu-west-1"
    ["DOCKERHUB_USERNAME"] = "((docker-username))"
    ["DOCKERHUB_ACCESS_TOKEN"] = "((docker-access-token))"
  }
}

local function createJiraStory(): TaskStep = new TaskStep {
  task = "create-jira-story"
  file = "pay-ci/ci/tasks/create-vulnerability-scan-jira-issue.yml"
  privileged = true

  params {
    ["JIRA_API_USERNAME"] = "((jira-api-username))"
    ["JIRA_API_TOKEN"] = "((jira-api-token))"
    ["JIRA_BASE_URL"] = "((jira-base-url))"
  }
}
