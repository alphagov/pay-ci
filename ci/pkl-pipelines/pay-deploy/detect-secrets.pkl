amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.1#/Pipeline.pkl"

import "common/pipeline_self_update.pkl"
import "common/shared_resources.pkl"

resources = new {
    pipeline_self_update.PayPipelineSelfUpdateResource("detect-secrets.pkl", "master")
    shared_resources.payCiGitHubResource
    new shared_resources.PayGitHubResource {
        name = "detect-secrets-src"
        source = new {
            ["uri"] = "https://github.com/alphagov/pay-ci"
            ["branch"] = "master"
            ["paths"] = new Listing<String> {
                "ci/docker/detect-secrets/*"
            }
        }

    }
    shared_resources.payDockerHubResource("detect-secrets-registry-image", "governmentdigitalservice/pay-detect-secrets", "latest")
}

jobs = new {
    pipeline_self_update.PayPipelineSelfUpdateJob("detect-secrets.pkl")
    new {
        name = "detect-secrets-src"
        plan = new {
            new InParallelStep {
                in_parallel = new Listing<Step> {
                    new GetStep {
                        get = "detect-secrets-src"
                        trigger = true
                    }
                    new GetStep { get = "pay-ci" }
                }
            }
            shared_resources.generateDockerCredsConfigStep
            new TaskStep {
                task = "build"
                privileged = true
                params = new {
                    ["CONTEXT"] = "detect-secrets-src/ci/docker/detect-secrets"
                    ["DOCKER_CONFIG"] = "docker_creds"
                }
                config = new {
                    platform = "linux"
                    image_resource = new {
                        type = "registry-image"
                        source = new {
                            ["repository"] = "concourse/oci-build-task"
                        }
                    }
                    inputs = new {
                        new { name = "detect-secrets-src" }
                    }
                    outputs = new {
                        new { name = "image" }
                    }
                    run {
                        path = "build"
                    }
                }
            }
            new PutStep {
                put = "detect-secrets-registry-image"
                params = new { ["image"] = "image/image.tar" }
            }
        }
    }
}
