---
resources:
  - name: e2e-helpers-pipeline
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      paths:
        - ci/pipelines/e2e-helpers.yml

  - name: endtoend-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-endtoend
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: reverse-proxy-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-scripts
      branch: master
      tag_regex: "reverse_proxy_alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: stubs-git-release
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-stubs
      branch: master
      tag_regex: "alpha_release-(.*)"
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: pay-infra-src
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-infra
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: pay-ci
    type: git
    icon: github
    source:
      uri: https://github.com/alphagov/pay-ci
      branch: master
      username: alphagov-pay-ci-concourse
      password: ((github-access-token))

  - name: endtoend-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/endtoend
      tag: latest
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: endtoend-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: governmentdigitalservice/pay-endtoend
      tag: latest-master
      password: ((docker-access-token))
      username: ((docker-username))

  - name: endtoend-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/endtoend
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      variant: candidate

  - name: reverse-proxy-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/reverse-proxy
      tag: latest
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: reverse-proxy-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: governmentdigitalservice/pay-reverse-proxy
      tag: latest-master
      password: ((docker-access-token))
      username: ((docker-username))

  - name: reverse-proxy-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/reverse-proxy
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      variant: candidate

  - name: stubs-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stubs
      tag: latest
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: stubs-candidate-ecr-registry-test
    type: registry-image
    icon: docker
    source:
      repository: govukpay/stubs
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1
      variant: candidate

  - name: stubs-dockerhub
    type: registry-image
    icon: docker
    source:
      repository: governmentdigitalservice/pay-stubs
      tag: latest-master
      password: ((docker-access-token))
      username: ((docker-username))

  - name: postgres-11-alpine
    type: registry-image
    icon: docker
    check_every: 1h
    source:
      repository: postgres
      tag: 11-alpine
      username: ((docker-username))
      password: ((docker-access-token))

  - name: ecr-postgres-11-alpine
    type: registry-image
    icon: docker
    check_every: never
    source:
      repository: postgres
      tag: 11-alpine
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: softwaremill-elasticmq-latest
    type: registry-image
    icon: docker
    check_every: 1h
    source:
      repository: softwaremill/elasticmq
      tag: latest
      username: ((docker-username))
      password: ((docker-access-token))

  - name: ecr-softwaremill-elasticmq-latest
    type: registry-image
    icon: docker
    check_every: never
    source:
      repository: softwaremill/elasticmq
      tag: latest
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: selenium-standalone-chrome-3-141-59
    type: registry-image
    icon: docker
    check_every: 1h
    source:
      repository: selenium/standalone-chrome
      tag: 3.141.59
      username: ((docker-username))
      password: ((docker-access-token))

  - name: ecr-selenium-standalone-chrome-3-141-59
    type: registry-image
    icon: docker
    check_every: never
    source:
      repository: selenium/standalone-chrome
      tag: 3.141.59
      aws_access_key_id: ((readonly_access_key_id))
      aws_secret_access_key: ((readonly_secret_access_key))
      aws_session_token: ((readonly_session_token))
      aws_role_arn: arn:aws:iam::((pay_aws_test_account_id)):role/concourse
      aws_ecr_registry_id: "((pay_aws_test_account_id))"
      aws_region: eu-west-1

  - name: slack-notification
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-notification-secret))

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

# Builds the Docker images used by end-to-end tests and pushes to ECR (and Dockerhub)
jobs:
  - name: build-and-push-endtoend-candidate
    plan:
      - in_parallel:
        - get: endtoend-git-release
          trigger: true
        - get: pay-ci
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
        - task: build-endtoend-image
          privileged: true
          params:
            CONTEXT: endtoend-git-release
            DOCKER_CONFIG: docker_creds
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                repository: concourse/oci-build-task
            inputs:
              - name: endtoend-git-release
              - name: docker_creds
            outputs:
              - name: image
            run:
              path: build
        - task: parse-release-tag
          file: pay-ci/ci/tasks/parse-release-tag.yml
          input_mapping:
            git-release: endtoend-git-release
        - task: send-job-release-info-to-hosted-graphite
          file: pay-ci/ci/tasks/send-job-release-info-to-hosted-graphite
          params:
            BUILD_PIPELINE_NAME:
            BUILD_JOB_NAME:
            RELEASE_NUMBER: ((.:application_image_tag))
            HOSTED_GRAPHITE_API_TOKEN: ((HOSTED_GRAPHITE_API_KEY))
      - put: endtoend-candidate-ecr-registry-test
        params:
          image: image/image.tar
          additional_tags: tags/candidate-tag
        get_params:
          skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed to build and push pay-endtoend candidate image - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Built and pushed pay-endtoend candidate image - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: endtoend-e2e
    plan:
      - in_parallel:
        - get: endtoend-candidate-ecr-registry-test 
          passed: [build-and-push-endtoend-candidate]
          trigger: true
          params:
            format: oci
        - get: pay-ci
      - in_parallel:
        - task: parse-candidate-tag
          file: pay-ci/ci/tasks/parse-candidate-tag.yml
          input_mapping:
            ecr-repo: endtoend-candidate-ecr-registry-test
        - task: send-job-release-info-to-hosted-graphite
          file: pay-ci/ci/tasks/send-job-release-info-to-hosted-graphite
          params:
            BUILD_PIPELINE_NAME:
            BUILD_JOB_NAME:
            RELEASE_NUMBER: ((.:application_image_tag))
            HOSTED_GRAPHITE_API_TOKEN: ((HOSTED_GRAPHITE_API_KEY))
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: candidate_image_tag
          file: endtoend-candidate-ecr-registry-test/tag
        - load_var: role
          file: assume-role/assume-role.json
          format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: endtoend
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-products
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - put: endtoend-ecr-registry-test
          params:
            image: endtoend-candidate-ecr-registry-test/image.tar
            additional_tags: parse-candidate-tag/release-tag
          get_params:
            skip_download: true
        - put: endtoend-dockerhub
          params:
            image: endtoend-candidate-ecr-registry-test/image.tar
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: pay-endtoend failed post-merge e2e tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: pay-endtoend passed post-merge e2e tests and was pushed as a final release - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: build-and-push-reverse-proxy-candidate
    plan:
      - in_parallel:
        - get: reverse-proxy-git-release
          trigger: true
        - get: pay-infra-src
          trigger: true
        - get: pay-ci
      - in_parallel:
        - do:
          - task: find-and-compile-naxsi-rules
            config:
              container_limits: { }
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: governmentdigitalservice/pay-concourse-runner
              inputs:
                - name: pay-infra-src
                - name: reverse-proxy-git-release
              outputs:
                - name: reverse-proxy-git-release
              run:
                path: /bin/sh
                args:
                  - -ec
                  - |
                    cd reverse-proxy-git-release/images/reverse_proxy
                    mkdir target

                    # Search pay-infra files for naxsi rules and copy to current 'target' directory
                    # See https://github.com/alphagov/pay-scripts/blob/master/images/proxy/build-latest-master.sh
                    prod_naxsi_rules_source=../../../pay-infra-src/provisioning/terraform/modules/pay_microservices_v2
                    find "$prod_naxsi_rules_source" -name \*.naxsi -exec cp {} target \;
          - task: generate-docker-creds-config
            file: pay-ci/ci/tasks/generate-docker-config-file.yml
            params:
              USERNAME: ((docker-username))
              PASSWORD: ((docker-access-token))
              EMAIL: ((docker-email))
          - task: build-reverse-proxy-image
            privileged: true
            params:
              CONTEXT: reverse-proxy-git-release/images/reverse_proxy/
              DOCKER_CONFIG: docker_creds
            config:
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: concourse/oci-build-task
              inputs:
              - name: reverse-proxy-git-release
              outputs:
              - name: image
              run:
                path: build
        - task: parse-release-tag
          file: pay-ci/ci/tasks/parse-release-tag.yml
          input_mapping:
            git-release: reverse-proxy-git-release
        - task: send-job-release-info-to-hosted-graphite
          file: pay-ci/ci/tasks/send-job-release-info-to-hosted-graphite
          params:
            BUILD_PIPELINE_NAME:
            BUILD_JOB_NAME:
            RELEASE_NUMBER: ((.:application_image_tag))
            HOSTED_GRAPHITE_API_TOKEN: ((HOSTED_GRAPHITE_API_KEY))
      - in_parallel:
        - put: reverse-proxy-candidate-ecr-registry-test
          params:
            image: image/image.tar
            additional_tags: tags/candidate-tag
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed to build and push e2e helper reverse-proxy - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Built and pushed e2e helper reverse-proxy - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: reverse-proxy-e2e
    plan:
      - in_parallel:
        - get: reverse-proxy-candidate-ecr-registry-test 
          passed: [build-and-push-reverse-proxy-candidate]
          trigger: true
          params:
            format: oci
        - get: pay-ci
      - in_parallel:
        - task: parse-candidate-tag
          file: pay-ci/ci/tasks/parse-candidate-tag.yml
          input_mapping:
            ecr-repo: reverse-proxy-candidate-ecr-registry-test
        - task: send-job-release-info-to-hosted-graphite
          file: pay-ci/ci/tasks/send-job-release-info-to-hosted-graphite
          params:
            BUILD_PIPELINE_NAME:
            BUILD_JOB_NAME:
            RELEASE_NUMBER: ((.:application_image_tag))
            HOSTED_GRAPHITE_API_TOKEN: ((HOSTED_GRAPHITE_API_KEY))   
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: candidate_image_tag
          file: reverse-proxy-candidate-ecr-registry-test/tag
        - load_var: role
          file: assume-role/assume-role.json
          format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: reverse-proxy
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-products
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-zap
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/zap.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - put: reverse-proxy-ecr-registry-test
          params:
            image: reverse-proxy-candidate-ecr-registry-test/image.tar
            additional_tags: parse-candidate-tag/release-tag
          get_params:
            skip_download: true
        - put: reverse-proxy-dockerhub
          params:
            image: reverse-proxy-candidate-ecr-registry-test/image.tar
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: e2e helper reverse-proxy failed post-merge e2e tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: e2e helper reverse-proxy passed post-merge e2e tests and was pushed as a final release - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: build-and-push-stubs-candidate
    plan:
      - in_parallel:
        - get: stubs-git-release
          trigger: true
        - get: pay-ci
      - task: generate-docker-creds-config
        file: pay-ci/ci/tasks/generate-docker-config-file.yml
        params:
          USERNAME: ((docker-username))
          PASSWORD: ((docker-access-token))
          EMAIL: ((docker-email))
      - in_parallel:
        - task: build-stubs-image
          privileged: true
          params:
            CONTEXT: stubs-git-release
            DOCKER_CONFIG: docker_creds
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                repository: concourse/oci-build-task
            inputs:
            - name: stubs-git-release
            outputs:
            - name: image
            run:
              path: build
        - task: parse-release-tag
          file: pay-ci/ci/tasks/parse-release-tag.yml
          input_mapping:
            git-release: stubs-git-release
        - task: send-job-release-info-to-hosted-graphite
          file: pay-ci/ci/tasks/send-job-release-info-to-hosted-graphite
          params:
            BUILD_PIPELINE_NAME:
            BUILD_JOB_NAME:
            RELEASE_NUMBER: ((.:application_image_tag))
            HOSTED_GRAPHITE_API_TOKEN: ((HOSTED_GRAPHITE_API_KEY))
      - put: stubs-candidate-ecr-registry-test
        params:
          image: image/image.tar
          additional_tags: tags/candidate-tag
        get_params:
          skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed to build and push pay-stubs candidate image - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Built and pushed pay-stubs candidate image - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: stubs-e2e
    plan:
      - in_parallel:
        - get: stubs-candidate-ecr-registry-test 
          passed: [build-and-push-stubs-candidate]
          trigger: true
          params:
            format: oci
        - get: pay-ci
      - in_parallel:
        - task: parse-candidate-tag
          file: pay-ci/ci/tasks/parse-candidate-tag.yml
          input_mapping:
            ecr-repo: stubs-candidate-ecr-registry-test
        - task: send-job-release-info-to-hosted-graphite
          file: pay-ci/ci/tasks/send-job-release-info-to-hosted-graphite
          params:
            BUILD_PIPELINE_NAME:
            BUILD_JOB_NAME:
            RELEASE_NUMBER: ((.:application_image_tag))
            HOSTED_GRAPHITE_API_TOKEN: ((HOSTED_GRAPHITE_API_KEY))    
        - task: assume-role
          file: pay-ci/ci/tasks/assume-role.yml
          params:
            AWS_ROLE_ARN: arn:aws:iam::((pay_aws_test_account_id)):role/pay-cd-pay-dev-codebuild-executor-test-12
            AWS_ROLE_SESSION_NAME: e2e-test-assume-role
      - in_parallel:
        - load_var: candidate_image_tag
          file: stubs-candidate-ecr-registry-test/tag
        - load_var: role
          file: assume-role/assume-role.json
          format: json
      - task: prepare-codebuild
        file: pay-ci/ci/tasks/prepare-e2e-codebuild.yml
        params:
          PROJECT_UNDER_TEST: stubs
          RELEASE_TAG_UNDER_TEST: ((.:candidate_image_tag))
          AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
          AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
          AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - task: run-codebuild-card
          attempts: 3
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/card.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
        - task: run-codebuild-products
          file: pay-ci/ci/tasks/run-codebuild.yml
          params:
            PATH_TO_CONFIG: "../../../../run-codebuild-configuration/products.json"
            AWS_ACCESS_KEY_ID: ((.:role.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((.:role.AWS_SECRET_ACCESS_KEY))
            AWS_SESSION_TOKEN: ((.:role.AWS_SESSION_TOKEN))
      - in_parallel:
        - put: stubs-ecr-registry-test
          params:
            image: stubs-candidate-ecr-registry-test/image.tar
            additional_tags: parse-candidate-tag/release-tag
          get_params:
            skip_download: true
        - put: stubs-dockerhub
          params:
            image: stubs-candidate-ecr-registry-test/image.tar
          get_params:
            skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: pay-stubs failed post-merge e2e tests - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: pay-stubs passed post-merge e2e tests and was pushed as a final release - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: copy-postgres-11
    plan:
      - get: postgres-11-alpine
        trigger: true
        params:
          format: oci
      - put: ecr-postgres-11-alpine
        params:
          image: postgres-11-alpine/image.tar
        get_params:
          skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed copying postgres:11-alpine image from Docker Hub to ECR - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Copied postgres:11-alpine image from Docker Hub to ECR - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: copy-softwaremill-elasticmq-latest
    plan:
      - get: softwaremill-elasticmq-latest
        trigger: true
        params:
          format: oci
      - put: ecr-softwaremill-elasticmq-latest
        params:
          image: softwaremill-elasticmq-latest/image.tar
        get_params:
          skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed copying softwaremill/elasticmq:latest image from Docker Hub to ECR - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Copied softwaremill/elasticmq:latest image from Docker Hub to ECR - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: copy-selenium-standalone-chrome-3-141-59
    plan:
      - get: selenium-standalone-chrome-3-141-59
        trigger: true
        params:
          format: oci
      - put: ecr-selenium-standalone-chrome-3-141-59
        params:
          image: selenium-standalone-chrome-3-141-59/image.tar
        get_params:
          skip_download: true
    on_failure:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-starling'
        silent: true
        text: ':red-circle: Failed copying selenium/standalone-chrome:3-141-59 image from Docker Hub to ECR - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse
    on_success:
      put: slack-notification
      attempts: 10
      params:
        channel: '#govuk-pay-activity'
        silent: true
        text: ':green-circle: Copied selenium/standalone-chrome:3-141-59 image from Docker Hub to ECR - <https://pay-cd.deploy.payments.service.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|Concourse build #$BUILD_NAME>'
        icon_emoji: ":concourse:"
        username: pay-concourse

  - name: update-e2e-helpers-pipeline
    plan:
      - get: e2e-helpers-pipeline
        trigger: true
      - set_pipeline: e2e-helpers
        file: e2e-helpers-pipeline/ci/pipelines/e2e-helpers.yml
