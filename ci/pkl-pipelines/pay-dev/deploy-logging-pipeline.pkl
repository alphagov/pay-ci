amends "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"

import "package://pkg.pkl-lang.org/github.com/alphagov/pkl-concourse-pipeline/pkl-concourse-pipeline@0.0.4#/Pipeline.pkl"
import "../common/pipeline_self_update.pkl"
import "../common/shared_resources.pkl"
import "../common/shared_resources_for_deploy_pipelines.pkl"
import "../common/shared_resources_for_terraform.pkl"
import "../common/PayResources.pkl"

local accounts = new Listing<String> {
  "dev"
}

local s3ObjectNameForEventNotification = Map (
  "dev", "2025-04-15-00-00-00-2AD1799A1B3E2A9D",
  "test", "2025-04-15-00-00-00-0E426FB262FAF646"
)

resources {
  pipeline_self_update.PayPipelineSelfUpdateResource("pay-dev/deploy-logging-pipeline.pkl", "master")
  shared_resources.payCiGitHubResource
  new PayResources.PayInfraGitHubResource {
    source {
      paths = new {
        "provisioning/terraform/modules/pay_logging_pipeline/**"
        "provisioning/terraform/deployments/**/logging_pipeline/**"
      }
    }
  }

  new Pipeline.Resource {
    name = "pay-logging-firehose-transformation"
    type = "s3"
    icon = "lambda"

    source = new {
      ["access_key_id"] = "((readonly_access_key_id))"
      ["secret_access_key"] = "((readonly_secret_access_key))"
      ["session_token"] = "((readonly_session_token))"
      ["region_name"] = "eu-west-1"
      ["aws_role_arn"] = "arn:aws:iam::((pay_aws_dev_account_id)):role/concourse"
      ["bucket"] = "pay-govuk-lambda-deploy"
      ["regexp"] = "pay-logging-firehose-transformation-v(.*).zip"
      ["skip_download"] = true
    }
  }

  new Pipeline.Resource {
    name = "pay-logging-s3-to-firehose-delivery"
    type = "s3"
    icon = "lambda"

    source = new {
      ["access_key_id"] = "((readonly_access_key_id))"
      ["secret_access_key"] = "((readonly_secret_access_key))"
      ["session_token"] = "((readonly_session_token))"
      ["region_name"] = "eu-west-1"
      ["aws_role_arn"] = "arn:aws:iam::((pay_aws_dev_account_id)):role/concourse"
      ["bucket"] = "pay-govuk-lambda-deploy"
      ["regexp"] = "pay-logging-s3-to-firehose-delivery-v(.*).zip"
      ["skip_download"] = true
    }
  }
}

groups {
  for (account in accounts) {
    new {
      name = account
      jobs = new {
        "deploy-\(account)"
        "destroy-\(account)"
        "e2e-test-logging-pipeline-in-\(account)"
      }
    }
  }
  pipeline_self_update.payPipelineSelfUpdateGroup
}

jobs {
  pipeline_self_update.PayPipelineSelfUpdateJob("pay-dev/deploy-logging-pipeline.pkl")

  for (account in accounts) {
    new {
      name = "deploy-\(account)"
      plan = new {
        new InParallelStep {
          in_parallel = new Listing<Step> {
            new GetStep {
              get = "pay-infra"
              trigger = true
            }
            new GetStep { get = "pay-ci" }
            new GetStep {
              get = "pay-logging-firehose-transformation"
              trigger = true
            }
            new GetStep {
              get = "pay-logging-s3-to-firehose-delivery"
              trigger = true
            }
          }
        }
        new shared_resources.AssumeConcourseRoleTask {
          aws_account_name = account
          role_name = "logging-pipeline-concourse"
          output_name = "assume-role"
          session_name = "deploy-logging-pipeline"
        }
        shared_resources.loadVarJson("role", "assume-role/assume-role.json")
        ...shared_resources_for_terraform.LoadTerraformVersionForTFRootSteps("pay-infra/provisioning/terraform/deployments/\(account)/logging_pipeline")
        new TaskStep {
          task = "deploy-logging-pipeline"
          file = "pay-ci/ci/tasks/deploy-logging-pipeline.yml"
          input_mapping = new {
            ["pay-infra"] = "pay-infra"
            ["pay-logging-firehose-transformation"] = "pay-logging-firehose-transformation"
            ["pay-logging-s3-to-firehose-delivery"] = "pay-logging-s3-to-firehose-delivery"
          }
          params = new {
            ...shared_resources_for_deploy_pipelines.getAWSAssumeRoleCreds()
            ["ACCOUNT"] = account
            ["TERRAFORM_ACTION"] = "apply"
          }
        }
      }
    }

    new {
      name = "e2e-test-logging-pipeline-in-\(account)"
      plan = new {
        new InParallelStep {
          in_parallel = new Listing<Step> {
            new GetStep {
              get = "pay-ci"
              passed {
                "deploy-\(account)"
              }
              trigger = false
            }
            new GetStep {
              get = "pay-infra"
              trigger = true
              passed {
                "deploy-\(account)"
              }
            }
            new GetStep {
              get = "pay-logging-firehose-transformation"
              trigger = true
              passed {
                "deploy-\(account)"
              }
            }
            new GetStep {
              get = "pay-logging-s3-to-firehose-delivery"
              trigger = true
              passed {
                "deploy-\(account)"
              }
            }

          }
        }
        new shared_resources.AssumeConcourseRoleTask {
          aws_account_name = account
          role_name = "logging-pipeline-concourse"
          output_name = "assume-role"
          session_name = "test-logging-pipeline"
        }
        shared_resources.loadVarJson("role", "assume-role/assume-role.json")
        new TaskStep {
          task = "run-logging-pipeline-e2e-test"
          file = "pay-ci/ci/tasks/run-logging-pipeline-e2e-test.yml"
          input_mapping = new {
            ["pay-ci"] = "pay-ci"
          }
          params = new {
            ["AWS_ACCOUNT_ID"] = "((pay_aws_\(account)_account_id))"
            ["AWS_ACCOUNT_NAME"] = account
            ["S3_OBJECT_NAME"] = "\(s3ObjectNameForEventNotification.getOrNull(account))"
            ["AWS_DEFAULT_REGION"] = "eu-west-1"
            ["AWS_ACCESS_KEY_ID"] = "((.:role.AWS_ACCESS_KEY_ID))"
            ["AWS_SECRET_ACCESS_KEY"] = "((.:role.AWS_SECRET_ACCESS_KEY))"
            ["AWS_SESSION_TOKEN"] = "((.:role.AWS_SESSION_TOKEN))"
          }
        }
      }
    }

    new {
      name = "destroy-\(account)"
      plan = new {
        new InParallelStep {
          in_parallel = new Listing<Step> {
            new GetStep {
              get = "pay-infra"
            }
            new GetStep { get = "pay-ci" }
          }
        }
        new shared_resources.AssumeConcourseRoleTask {
          aws_account_name = account
          role_name = "logging-pipeline-concourse"
          output_name = "assume-role"
          session_name = "deploy-logging-pipeline"
        }
        shared_resources.loadVarJson("role", "assume-role/assume-role.json")
        ...shared_resources_for_terraform.LoadTerraformVersionForTFRootSteps("pay-infra/provisioning/terraform/deployments/\(account)/logging_pipeline")
        new TaskStep {
          task = "deploy-logging-pipeline"
          file = "pay-ci/ci/tasks/deploy-logging-pipeline.yml"
          input_mapping = new {
            ["pay-infra"] = "pay-infra"
          }
          params = new {
            ...shared_resources_for_deploy_pipelines.getAWSAssumeRoleCreds()
            ["ACCOUNT"] = account
            ["TERRAFORM_ACTION"] = "destroy"
          }
        }
      }
    }
  }
}
