const fs = require('fs')
const path = require('path')
const stringify = require('csv-stringify/sync').stringify

const INPUT_PATH = `${path.resolve(path.dirname(__filename))}/reports`
const OUTPUT_PATH = `${path.resolve(path.dirname(__filename))}/reports`

const HEADERS = ["App name", "Release", "Vulnerability", "Severity", "Status", "Package", "Fixed version"]

function generate () {
  const date = new Date().toJSON().slice(0, 10);
  const jsonFiles = fs.readdirSync(INPUT_PATH).filter(file => path.extname(file) === '.json')
  const reportFilePath = `${OUTPUT_PATH}/vulnerability_scan_report-${date}.csv`
  const violatedRules = new Map()
  let parseCount = 0
  let rowCount = 0
  try {
    jsonFiles.forEach(file => {
      const appInfo = extractAppAndReleaseFromFilename(file)
      const filePath = path.join(INPUT_PATH, file)
      const data = fs.readFileSync(filePath, 'utf8')
      const parsedData = JSON.parse(data)

      const appViolations = [];
      violatedRules.set(`${appInfo.name}:${appInfo.release}`, appViolations)

      parsedData["runs"][0]["tool"]["driver"]["rules"].forEach(
        (violatedRule) => appViolations.push({
          "App name": appInfo.name,
          "Release": appInfo.release,
          "Vulnerability": violatedRule.id,
          "Severity": violatedRule.properties.cvssV3_severity,
          "Status": "",
          "Package": violatedRule.properties.purls.join("\n"),
          "Fixed version": violatedRule.properties.fixed_version,
        })
      )

      parseCount++
    })
  } catch (err) {
    console.error(`Error: Failed parsing source json after successfully parsing ${parseCount} of ${jsonFiles.length} source files: `, err)
    process.exit(1)
  }

  const csv_rows = [HEADERS];
  try {
    violatedRules.forEach((violations) => {
      violations.forEach((violation) => {
        const row = HEADERS.map(key => violation[key])
        csv_rows.push(row)
        rowCount++
      })
    })
  } catch (err) {
    console.error("Error collating results for writing to CSV: ", err)
    process.exit(1)
  }

  try {
    fs.writeFileSync(reportFilePath, stringify(csv_rows))
  } catch (err) {
    console.error("Error writing CSV file: ", err.message)
    process.exit(1)
  }

  console.log(`Parsed ${parseCount} of ${jsonFiles.length} JSON files, wrote ${rowCount} row(s) to ${reportFilePath}`)
}

function extractAppAndReleaseFromFilename (fileName) {
  const regex = /^.*?(?=-\d+)/ // matches any characters at the beginning of the string that are followed by a dash and one or more digits
  const match = fileName.match(regex)
  if (match && match[0]) {
    const release = fileName.replace(`${match[0]}-`, "").replace(".json", "")
    return { name: match[0], release }
  } else {
    const fallback = fileName.replace(".json", "")
    return { name: fallback, release: fallback }
  }
}

generate()
